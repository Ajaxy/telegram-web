/*! File generated by TLObjects' generator. All changes will be ERASED !*/
const { TLObject } = require('../tlobject');
const { TLRequest } = require('../tlobject');
const struct = require('python-struct');
const { readBigIntFromBuffer, 
        readBufferFromBigInt, generateRandomBytes } = require('../../Helpers')


class GetStateRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0xedd4882a;
    static SUBCLASS_OF_ID = 0x23df1a01;

    constructor() {
        super();
        this.CONSTRUCTOR_ID = 0xedd4882a;
        this.SUBCLASS_OF_ID = 0x23df1a01;

    }
    get bytes() {
        return Buffer.concat([
            Buffer.from("2a88d4ed","hex"),
            ])
        }
    static fromReader(reader) {
        let _x;
        let len;
        return new this({})
    }
}


class GetDifferenceRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x25939651;
    static SUBCLASS_OF_ID = 0x20482874;

    /**
    :returns updates.Difference: Instance of either DifferenceEmpty, Difference, DifferenceSlice, DifferenceTooLong
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x25939651;
        this.SUBCLASS_OF_ID = 0x20482874;

        this.pts = args.pts;
        this.date = args.date;
        this.qts = args.qts;
        this.ptsTotalLimit = args.ptsTotalLimit || null;
    }
    get bytes() {
        return Buffer.concat([
            Buffer.from("51969325","hex"),
            struct.pack('<I', (this.ptsTotalLimit === undefined || this.ptsTotalLimit === false || this.ptsTotalLimit === null) ? 0 : 1),
            struct.pack('<i', this.pts),
            struct.pack('<i', this.date),
            struct.pack('<i', this.qts),
            (this.ptsTotalLimit === undefined || this.ptsTotalLimit === false || this.ptsTotalLimit ===null) ? Buffer.alloc(0) : [struct.pack('<i', this.ptsTotalLimit)],
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _pts;
        let _date;
        let _qts;
        let _pts_total_limit;
        let _x;
        let len;
        let flags = reader.readInt();

        _pts = reader.readInt();
        _date = reader.readInt();
        _qts = reader.readInt();
        if (flags & 1) {
            _pts_total_limit = reader.readInt();
        }
        else {
            _pts_total_limit = null
        }
        return new this({pts:_pts,
	date:_date,
	qts:_qts,
	ptsTotalLimit:_pts_total_limit})
    }
}


class GetChannelDifferenceRequest extends TLRequest {
    static CONSTRUCTOR_ID = 0x03173d78;
    static SUBCLASS_OF_ID = 0x29896f5d;

    /**
    :returns updates.ChannelDifference: Instance of either ChannelDifferenceEmpty, ChannelDifferenceTooLong, ChannelDifference
    */
    constructor(args) {
        super();
        args = args || {}
        this.CONSTRUCTOR_ID = 0x03173d78;
        this.SUBCLASS_OF_ID = 0x29896f5d;

        this.channel = args.channel;
        this.filter = args.filter;
        this.pts = args.pts;
        this.limit = args.limit;
        this.force = args.force || null;
    }
    async resolve(client, utils) {
        this.channel = utils.getInputChannel(await client.getInputEntity(this.channel))
    }
    get bytes() {
        return Buffer.concat([
            Buffer.from("783d1703","hex"),
            struct.pack('<I', (this.force === undefined || this.force === false || this.force === null) ? 0 : 1),
            this.channel.bytes,
            this.filter.bytes,
            struct.pack('<i', this.pts),
            struct.pack('<i', this.limit),
            ])
        }
    static fromReader(reader) {
        let _flags;
        let _channel;
        let _filter;
        let _pts;
        let _limit;
        let _force;
        let _x;
        let len;
        let flags = reader.readInt();

        _channel = reader.tgReadObject();
        _filter = reader.tgReadObject();
        _pts = reader.readInt();
        _limit = reader.readInt();
        _force = Boolean(flags & 1);
        return new this({channel:_channel,
	filter:_filter,
	pts:_pts,
	limit:_limit,
	force:_force})
    }
}

module.exports = {
    GetStateRequest,
    GetDifferenceRequest,
    GetChannelDifferenceRequest,
};
