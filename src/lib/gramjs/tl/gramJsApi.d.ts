
// This file is autogenerated. All changes will be overwritten.

import { BigInteger } from 'big-integer';

interface GramJsInstance {
  CONSTRUCTOR_ID: number;
  SUBCLASS_OF_ID: number;

  getBytes(): Buffer;
}

type ToArgs<T> = Omit<T, 'CONSTRUCTOR_ID' | 'SUBCLASS_OF_ID' | 'getBytes'>

export namespace MTProto {

  type AnyClass = new (...args: any[]) => any;
  type AnyLiteral = Record<string, any>;
  type Buffer = Uint8Array;

  type Reader = any; // To be defined.
  type Client = any; // To be defined.
  type Utils = any; // To be defined.

  type X = unknown; // TODO Verify this.
  type Type = unknown; // TODO Verify this.
  type Bool = boolean;
  type int128 = number;
  type int256 = number;
  type long = number[] | string | BigInteger;
  type bytes = string | Uint8Array;

  interface inputPeerEmpty extends GramJsInstance {
    
  }
  interface inputPeerSelf extends GramJsInstance {
    
  }
  interface inputPeerChat extends GramJsInstance {
    chatId: int;
  }
  interface inputPeerUser extends GramJsInstance {
    userId: int;
    accessHash: long;
  }
  interface inputPeerChannel extends GramJsInstance {
    channelId: int;
    accessHash: long;
  }
  interface inputPeerUserFromMessage extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    userId: int;
  }
  interface inputPeerChannelFromMessage extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    channelId: int;
  }
  interface inputUserEmpty extends GramJsInstance {
    
  }
  interface inputUserSelf extends GramJsInstance {
    
  }
  interface inputUser extends GramJsInstance {
    userId: int;
    accessHash: long;
  }
  interface inputUserFromMessage extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    userId: int;
  }
  interface inputPhoneContact extends GramJsInstance {
    clientId: long;
    phone: string;
    firstName: string;
    lastName: string;
  }
  interface inputFile extends GramJsInstance {
    id: long;
    parts: int;
    name: string;
    md5Checksum: string;
  }
  interface inputFileBig extends GramJsInstance {
    id: long;
    parts: int;
    name: string;
  }
  interface inputMediaEmpty extends GramJsInstance {
    
  }
  interface inputMediaUploadedPhoto extends GramJsInstance {
    // flags: null;
    file: InputFile;
    stickers?: InputDocument[];
    ttlSeconds?: int;
  }
  interface inputMediaPhoto extends GramJsInstance {
    // flags: null;
    id: InputPhoto;
    ttlSeconds?: int;
  }
  interface inputMediaGeoPoint extends GramJsInstance {
    geoPoint: InputGeoPoint;
  }
  interface inputMediaContact extends GramJsInstance {
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
  }
  interface inputMediaUploadedDocument extends GramJsInstance {
    // flags: null;
    nosoundVideo?: true;
    file: InputFile;
    thumb?: InputFile;
    mimeType: string;
    attributes: DocumentAttribute[];
    stickers?: InputDocument[];
    ttlSeconds?: int;
  }
  interface inputMediaDocument extends GramJsInstance {
    // flags: null;
    id: InputDocument;
    ttlSeconds?: int;
  }
  interface inputMediaVenue extends GramJsInstance {
    geoPoint: InputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  }
  interface inputMediaGifExternal extends GramJsInstance {
    url: string;
    q: string;
  }
  interface inputMediaPhotoExternal extends GramJsInstance {
    // flags: null;
    url: string;
    ttlSeconds?: int;
  }
  interface inputMediaDocumentExternal extends GramJsInstance {
    // flags: null;
    url: string;
    ttlSeconds?: int;
  }
  interface inputMediaGame extends GramJsInstance {
    id: InputGame;
  }
  interface inputMediaInvoice extends GramJsInstance {
    // flags: null;
    title: string;
    description: string;
    photo?: InputWebDocument;
    invoice: Invoice;
    payload: bytes;
    provider: string;
    providerData: DataJSON;
    startParam: string;
  }
  interface inputMediaGeoLive extends GramJsInstance {
    // flags: null;
    stopped?: true;
    geoPoint: InputGeoPoint;
    period?: int;
  }
  interface inputMediaPoll extends GramJsInstance {
    poll: Poll;
  }
  interface inputChatPhotoEmpty extends GramJsInstance {
    
  }
  interface inputChatUploadedPhoto extends GramJsInstance {
    file: InputFile;
  }
  interface inputChatPhoto extends GramJsInstance {
    id: InputPhoto;
  }
  interface inputGeoPointEmpty extends GramJsInstance {
    
  }
  interface inputGeoPoint extends GramJsInstance {
    lat: double;
    long: double;
  }
  interface inputPhotoEmpty extends GramJsInstance {
    
  }
  interface inputPhoto extends GramJsInstance {
    id: long;
    accessHash: long;
    fileReference: bytes;
  }
  interface inputFileLocation extends GramJsInstance {
    volumeId: long;
    localId: int;
    secret: long;
    fileReference: bytes;
  }
  interface inputEncryptedFileLocation extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputDocumentFileLocation extends GramJsInstance {
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  }
  interface inputSecureFileLocation extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputTakeoutFileLocation extends GramJsInstance {
    
  }
  interface inputPhotoFileLocation extends GramJsInstance {
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  }
  interface inputPeerPhotoFileLocation extends GramJsInstance {
    // flags: null;
    big?: true;
    peer: InputPeer;
    volumeId: long;
    localId: int;
  }
  interface inputStickerSetThumb extends GramJsInstance {
    stickerset: InputStickerSet;
    volumeId: long;
    localId: int;
  }
  interface peerUser extends GramJsInstance {
    userId: int;
  }
  interface peerChat extends GramJsInstance {
    chatId: int;
  }
  interface peerChannel extends GramJsInstance {
    channelId: int;
  }
  interface storage_fileUnknown extends GramJsInstance {
    
  }
  interface storage_filePartial extends GramJsInstance {
    
  }
  interface storage_fileJpeg extends GramJsInstance {
    
  }
  interface storage_fileGif extends GramJsInstance {
    
  }
  interface storage_filePng extends GramJsInstance {
    
  }
  interface storage_filePdf extends GramJsInstance {
    
  }
  interface storage_fileMp3 extends GramJsInstance {
    
  }
  interface storage_fileMov extends GramJsInstance {
    
  }
  interface storage_fileMp4 extends GramJsInstance {
    
  }
  interface storage_fileWebp extends GramJsInstance {
    
  }
  interface userEmpty extends GramJsInstance {
    id: int;
  }
  interface user extends GramJsInstance {
    // flags: null;
    self?: true;
    contact?: true;
    mutualContact?: true;
    deleted?: true;
    bot?: true;
    botChatHistory?: true;
    botNochats?: true;
    verified?: true;
    restricted?: true;
    min?: true;
    botInlineGeo?: true;
    support?: true;
    scam?: true;
    id: int;
    accessHash?: long;
    firstName?: string;
    lastName?: string;
    username?: string;
    phone?: string;
    photo?: UserProfilePhoto;
    status?: UserStatus;
    botInfoVersion?: int;
    restrictionReason?: RestrictionReason[];
    botInlinePlaceholder?: string;
    langCode?: string;
  }
  interface userProfilePhotoEmpty extends GramJsInstance {
    
  }
  interface userProfilePhoto extends GramJsInstance {
    photoId: long;
    photoSmall: FileLocation;
    photoBig: FileLocation;
    dcId: int;
  }
  interface userStatusEmpty extends GramJsInstance {
    
  }
  interface userStatusOnline extends GramJsInstance {
    expires: int;
  }
  interface userStatusOffline extends GramJsInstance {
    wasOnline: int;
  }
  interface userStatusRecently extends GramJsInstance {
    
  }
  interface userStatusLastWeek extends GramJsInstance {
    
  }
  interface userStatusLastMonth extends GramJsInstance {
    
  }
  interface chatEmpty extends GramJsInstance {
    id: int;
  }
  interface chat extends GramJsInstance {
    // flags: null;
    creator?: true;
    kicked?: true;
    left?: true;
    deactivated?: true;
    id: int;
    title: string;
    photo: ChatPhoto;
    participantsCount: int;
    date: int;
    version: int;
    migratedTo?: InputChannel;
    adminRights?: ChatAdminRights;
    defaultBannedRights?: ChatBannedRights;
  }
  interface chatForbidden extends GramJsInstance {
    id: int;
    title: string;
  }
  interface channel extends GramJsInstance {
    // flags: null;
    creator?: true;
    left?: true;
    broadcast?: true;
    verified?: true;
    megagroup?: true;
    restricted?: true;
    signatures?: true;
    min?: true;
    scam?: true;
    hasLink?: true;
    hasGeo?: true;
    slowmodeEnabled?: true;
    id: int;
    accessHash?: long;
    title: string;
    username?: string;
    photo: ChatPhoto;
    date: int;
    version: int;
    restrictionReason?: RestrictionReason[];
    adminRights?: ChatAdminRights;
    bannedRights?: ChatBannedRights;
    defaultBannedRights?: ChatBannedRights;
    participantsCount?: int;
  }
  interface channelForbidden extends GramJsInstance {
    // flags: null;
    broadcast?: true;
    megagroup?: true;
    id: int;
    accessHash: long;
    title: string;
    untilDate?: int;
  }
  interface chatFull extends GramJsInstance {
    // flags: null;
    canSetUsername?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participants: ChatParticipants;
    chatPhoto?: Photo;
    notifySettings: PeerNotifySettings;
    exportedInvite: ExportedChatInvite;
    botInfo?: BotInfo[];
    pinnedMsgId?: int;
    folderId?: int;
  }
  interface channelFull extends GramJsInstance {
    // flags: null;
    canViewParticipants?: true;
    canSetUsername?: true;
    canSetStickers?: true;
    hiddenPrehistory?: true;
    canViewStats?: true;
    canSetLocation?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participantsCount?: int;
    adminsCount?: int;
    kickedCount?: int;
    bannedCount?: int;
    onlineCount?: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    chatPhoto: Photo;
    notifySettings: PeerNotifySettings;
    exportedInvite: ExportedChatInvite;
    botInfo: BotInfo[];
    migratedFromChatId?: int;
    migratedFromMaxId?: int;
    pinnedMsgId?: int;
    stickerset?: StickerSet;
    availableMinId?: int;
    folderId?: int;
    linkedChatId?: int;
    location?: ChannelLocation;
    slowmodeSeconds?: int;
    slowmodeNextSendDate?: int;
    pts: int;
  }
  interface chatParticipant extends GramJsInstance {
    userId: int;
    inviterId: int;
    date: int;
  }
  interface chatParticipantCreator extends GramJsInstance {
    userId: int;
  }
  interface chatParticipantAdmin extends GramJsInstance {
    userId: int;
    inviterId: int;
    date: int;
  }
  interface chatParticipantsForbidden extends GramJsInstance {
    // flags: null;
    chatId: int;
    selfParticipant?: ChatParticipant;
  }
  interface chatParticipants extends GramJsInstance {
    chatId: int;
    participants: ChatParticipant[];
    version: int;
  }
  interface chatPhotoEmpty extends GramJsInstance {
    
  }
  interface chatPhoto extends GramJsInstance {
    photoSmall: FileLocation;
    photoBig: FileLocation;
    dcId: int;
  }
  interface messageEmpty extends GramJsInstance {
    id: int;
  }
  interface message extends GramJsInstance {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    fromScheduled?: true;
    legacy?: true;
    editHide?: true;
    id: int;
    fromId?: int;
    toId: Peer;
    fwdFrom?: MessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    date: int;
    message: string;
    media?: MessageMedia;
    replyMarkup?: ReplyMarkup;
    entities?: MessageEntity[];
    views?: int;
    editDate?: int;
    postAuthor?: string;
    groupedId?: long;
    restrictionReason?: RestrictionReason[];
  }
  interface messageService extends GramJsInstance {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    legacy?: true;
    id: int;
    fromId?: int;
    toId: Peer;
    replyToMsgId?: int;
    date: int;
    action: MessageAction;
  }
  interface messageMediaEmpty extends GramJsInstance {
    
  }
  interface messageMediaPhoto extends GramJsInstance {
    // flags: null;
    photo?: Photo;
    ttlSeconds?: int;
  }
  interface messageMediaGeo extends GramJsInstance {
    geo: GeoPoint;
  }
  interface messageMediaContact extends GramJsInstance {
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    userId: int;
  }
  interface messageMediaUnsupported extends GramJsInstance {
    
  }
  interface messageMediaDocument extends GramJsInstance {
    // flags: null;
    document?: Document;
    ttlSeconds?: int;
  }
  interface messageMediaWebPage extends GramJsInstance {
    webpage: WebPage;
  }
  interface messageMediaVenue extends GramJsInstance {
    geo: GeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  }
  interface messageMediaGame extends GramJsInstance {
    game: Game;
  }
  interface messageMediaInvoice extends GramJsInstance {
    // flags: null;
    shippingAddressRequested?: true;
    test?: true;
    title: string;
    description: string;
    photo?: WebDocument;
    receiptMsgId?: int;
    currency: string;
    totalAmount: long;
    startParam: string;
  }
  interface messageMediaGeoLive extends GramJsInstance {
    geo: GeoPoint;
    period: int;
  }
  interface messageMediaPoll extends GramJsInstance {
    poll: Poll;
    results: PollResults;
  }
  interface messageActionEmpty extends GramJsInstance {
    
  }
  interface messageActionChatCreate extends GramJsInstance {
    title: string;
    users: int[];
  }
  interface messageActionChatEditTitle extends GramJsInstance {
    title: string;
  }
  interface messageActionChatEditPhoto extends GramJsInstance {
    photo: Photo;
  }
  interface messageActionChatDeletePhoto extends GramJsInstance {
    
  }
  interface messageActionChatAddUser extends GramJsInstance {
    users: int[];
  }
  interface messageActionChatDeleteUser extends GramJsInstance {
    userId: int;
  }
  interface messageActionChatJoinedByLink extends GramJsInstance {
    inviterId: int;
  }
  interface messageActionChannelCreate extends GramJsInstance {
    title: string;
  }
  interface messageActionChatMigrateTo extends GramJsInstance {
    channelId: int;
  }
  interface messageActionChannelMigrateFrom extends GramJsInstance {
    title: string;
    chatId: int;
  }
  interface messageActionPinMessage extends GramJsInstance {
    
  }
  interface messageActionHistoryClear extends GramJsInstance {
    
  }
  interface messageActionGameScore extends GramJsInstance {
    gameId: long;
    score: int;
  }
  interface messageActionPaymentSentMe extends GramJsInstance {
    // flags: null;
    currency: string;
    totalAmount: long;
    payload: bytes;
    info?: PaymentRequestedInfo;
    shippingOptionId?: string;
    charge: PaymentCharge;
  }
  interface messageActionPaymentSent extends GramJsInstance {
    currency: string;
    totalAmount: long;
  }
  interface messageActionPhoneCall extends GramJsInstance {
    // flags: null;
    video?: true;
    callId: long;
    reason?: PhoneCallDiscardReason;
    duration?: int;
  }
  interface messageActionScreenshotTaken extends GramJsInstance {
    
  }
  interface messageActionCustomAction extends GramJsInstance {
    message: string;
  }
  interface messageActionBotAllowed extends GramJsInstance {
    domain: string;
  }
  interface messageActionSecureValuesSentMe extends GramJsInstance {
    values: SecureValue[];
    credentials: SecureCredentialsEncrypted;
  }
  interface messageActionSecureValuesSent extends GramJsInstance {
    types: SecureValueType[];
  }
  interface messageActionContactSignUp extends GramJsInstance {
    
  }
  interface dialog extends GramJsInstance {
    // flags: null;
    pinned?: true;
    unreadMark?: true;
    peer: Peer;
    topMessage: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    unreadMentionsCount: int;
    notifySettings: PeerNotifySettings;
    pts?: int;
    draft?: DraftMessage;
    folderId?: int;
  }
  interface dialogFolder extends GramJsInstance {
    // flags: null;
    pinned?: true;
    folder: Folder;
    peer: Peer;
    topMessage: int;
    unreadMutedPeersCount: int;
    unreadUnmutedPeersCount: int;
    unreadMutedMessagesCount: int;
    unreadUnmutedMessagesCount: int;
  }
  interface photoEmpty extends GramJsInstance {
    id: long;
  }
  interface photo extends GramJsInstance {
    // flags: null;
    hasStickers?: true;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    sizes: PhotoSize[];
    dcId: int;
  }
  interface photoSizeEmpty extends GramJsInstance {
    type: string;
  }
  interface photoSize extends GramJsInstance {
    type: string;
    location: FileLocation;
    w: int;
    h: int;
    size: int;
  }
  interface photoCachedSize extends GramJsInstance {
    type: string;
    location: FileLocation;
    w: int;
    h: int;
    bytes: bytes;
  }
  interface photoStrippedSize extends GramJsInstance {
    type: string;
    bytes: bytes;
  }
  interface geoPointEmpty extends GramJsInstance {
    
  }
  interface geoPoint extends GramJsInstance {
    long: double;
    lat: double;
    accessHash: long;
  }
  interface auth_sentCode extends GramJsInstance {
    // flags: null;
    type: auth_SentCodeType;
    phoneCodeHash: string;
    nextType?: auth_CodeType;
    timeout?: int;
  }
  interface auth_authorization extends GramJsInstance {
    // flags: null;
    tmpSessions?: int;
    user: User;
  }
  interface auth_authorizationSignUpRequired extends GramJsInstance {
    // flags: null;
    termsOfService?: help_TermsOfService;
  }
  interface auth_exportedAuthorization extends GramJsInstance {
    id: int;
    bytes: bytes;
  }
  interface inputNotifyPeer extends GramJsInstance {
    peer: InputPeer;
  }
  interface inputNotifyUsers extends GramJsInstance {
    
  }
  interface inputNotifyChats extends GramJsInstance {
    
  }
  interface inputNotifyBroadcasts extends GramJsInstance {
    
  }
  interface inputPeerNotifySettings extends GramJsInstance {
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  }
  interface peerNotifySettings extends GramJsInstance {
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  }
  interface peerSettings extends GramJsInstance {
    // flags: null;
    reportSpam?: true;
    addContact?: true;
    blockContact?: true;
    shareContact?: true;
    needContactsException?: true;
    reportGeo?: true;
  }
  interface wallPaper extends GramJsInstance {
    id: long;
    // flags: null;
    creator?: true;
    default?: true;
    pattern?: true;
    dark?: true;
    accessHash: long;
    slug: string;
    document: Document;
    settings?: WallPaperSettings;
  }
  interface inputReportReasonSpam extends GramJsInstance {
    
  }
  interface inputReportReasonViolence extends GramJsInstance {
    
  }
  interface inputReportReasonPornography extends GramJsInstance {
    
  }
  interface inputReportReasonChildAbuse extends GramJsInstance {
    
  }
  interface inputReportReasonOther extends GramJsInstance {
    text: string;
  }
  interface inputReportReasonCopyright extends GramJsInstance {
    
  }
  interface inputReportReasonGeoIrrelevant extends GramJsInstance {
    
  }
  interface userFull extends GramJsInstance {
    // flags: null;
    blocked?: true;
    phoneCallsAvailable?: true;
    phoneCallsPrivate?: true;
    canPinMessage?: true;
    hasScheduled?: true;
    user: User;
    about?: string;
    settings: PeerSettings;
    profilePhoto?: Photo;
    notifySettings: PeerNotifySettings;
    botInfo?: BotInfo;
    pinnedMsgId?: int;
    commonChatsCount: int;
    folderId?: int;
  }
  interface contact extends GramJsInstance {
    userId: int;
    mutual: Bool;
  }
  interface importedContact extends GramJsInstance {
    userId: int;
    clientId: long;
  }
  interface contactBlocked extends GramJsInstance {
    userId: int;
    date: int;
  }
  interface contactStatus extends GramJsInstance {
    userId: int;
    status: UserStatus;
  }
  interface contacts_contactsNotModified extends GramJsInstance {
    
  }
  interface contacts_contacts extends GramJsInstance {
    contacts: Contact[];
    savedCount: int;
    users: User[];
  }
  interface contacts_importedContacts extends GramJsInstance {
    imported: ImportedContact[];
    popularInvites: PopularContact[];
    retryContacts: long[];
    users: User[];
  }
  interface contacts_blocked extends GramJsInstance {
    blocked: ContactBlocked[];
    users: User[];
  }
  interface contacts_blockedSlice extends GramJsInstance {
    count: int;
    blocked: ContactBlocked[];
    users: User[];
  }
  interface messages_dialogs extends GramJsInstance {
    dialogs: Dialog[];
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface messages_dialogsSlice extends GramJsInstance {
    count: int;
    dialogs: Dialog[];
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface messages_dialogsNotModified extends GramJsInstance {
    count: int;
  }
  interface messages_messages extends GramJsInstance {
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface messages_messagesSlice extends GramJsInstance {
    // flags: null;
    inexact?: true;
    count: int;
    nextRate?: int;
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface messages_channelMessages extends GramJsInstance {
    // flags: null;
    inexact?: true;
    pts: int;
    count: int;
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface messages_messagesNotModified extends GramJsInstance {
    count: int;
  }
  interface messages_chats extends GramJsInstance {
    chats: Chat[];
  }
  interface messages_chatsSlice extends GramJsInstance {
    count: int;
    chats: Chat[];
  }
  interface messages_chatFull extends GramJsInstance {
    fullChat: ChatFull;
    chats: Chat[];
    users: User[];
  }
  interface messages_affectedHistory extends GramJsInstance {
    pts: int;
    ptsCount: int;
    offset: int;
  }
  interface inputMessagesFilterEmpty extends GramJsInstance {
    
  }
  interface inputMessagesFilterPhotos extends GramJsInstance {
    
  }
  interface inputMessagesFilterVideo extends GramJsInstance {
    
  }
  interface inputMessagesFilterPhotoVideo extends GramJsInstance {
    
  }
  interface inputMessagesFilterDocument extends GramJsInstance {
    
  }
  interface inputMessagesFilterUrl extends GramJsInstance {
    
  }
  interface inputMessagesFilterGif extends GramJsInstance {
    
  }
  interface inputMessagesFilterVoice extends GramJsInstance {
    
  }
  interface inputMessagesFilterMusic extends GramJsInstance {
    
  }
  interface inputMessagesFilterChatPhotos extends GramJsInstance {
    
  }
  interface inputMessagesFilterPhoneCalls extends GramJsInstance {
    // flags: null;
    missed?: true;
  }
  interface inputMessagesFilterRoundVoice extends GramJsInstance {
    
  }
  interface inputMessagesFilterRoundVideo extends GramJsInstance {
    
  }
  interface inputMessagesFilterMyMentions extends GramJsInstance {
    
  }
  interface inputMessagesFilterGeo extends GramJsInstance {
    
  }
  interface inputMessagesFilterContacts extends GramJsInstance {
    
  }
  interface updateNewMessage extends GramJsInstance {
    message: Message;
    pts: int;
    ptsCount: int;
  }
  interface updateMessageID extends GramJsInstance {
    id: int;
    randomId: long;
  }
  interface updateDeleteMessages extends GramJsInstance {
    messages: int[];
    pts: int;
    ptsCount: int;
  }
  interface updateUserTyping extends GramJsInstance {
    userId: int;
    action: SendMessageAction;
  }
  interface updateChatUserTyping extends GramJsInstance {
    chatId: int;
    userId: int;
    action: SendMessageAction;
  }
  interface updateChatParticipants extends GramJsInstance {
    participants: ChatParticipants;
  }
  interface updateUserStatus extends GramJsInstance {
    userId: int;
    status: UserStatus;
  }
  interface updateUserName extends GramJsInstance {
    userId: int;
    firstName: string;
    lastName: string;
    username: string;
  }
  interface updateUserPhoto extends GramJsInstance {
    userId: int;
    date: int;
    photo: UserProfilePhoto;
    previous: Bool;
  }
  interface updateNewEncryptedMessage extends GramJsInstance {
    message: EncryptedMessage;
    qts: int;
  }
  interface updateEncryptedChatTyping extends GramJsInstance {
    chatId: int;
  }
  interface updateEncryption extends GramJsInstance {
    chat: EncryptedChat;
    date: int;
  }
  interface updateEncryptedMessagesRead extends GramJsInstance {
    chatId: int;
    maxDate: int;
    date: int;
  }
  interface updateChatParticipantAdd extends GramJsInstance {
    chatId: int;
    userId: int;
    inviterId: int;
    date: int;
    version: int;
  }
  interface updateChatParticipantDelete extends GramJsInstance {
    chatId: int;
    userId: int;
    version: int;
  }
  interface updateDcOptions extends GramJsInstance {
    dcOptions: DcOption[];
  }
  interface updateUserBlocked extends GramJsInstance {
    userId: int;
    blocked: Bool;
  }
  interface updateNotifySettings extends GramJsInstance {
    peer: NotifyPeer;
    notifySettings: PeerNotifySettings;
  }
  interface updateServiceNotification extends GramJsInstance {
    // flags: null;
    popup?: true;
    inboxDate?: int;
    type: string;
    message: string;
    media: MessageMedia;
    entities: MessageEntity[];
  }
  interface updatePrivacy extends GramJsInstance {
    key: PrivacyKey;
    rules: PrivacyRule[];
  }
  interface updateUserPhone extends GramJsInstance {
    userId: int;
    phone: string;
  }
  interface updateReadHistoryInbox extends GramJsInstance {
    // flags: null;
    folderId?: int;
    peer: Peer;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
    ptsCount: int;
  }
  interface updateReadHistoryOutbox extends GramJsInstance {
    peer: Peer;
    maxId: int;
    pts: int;
    ptsCount: int;
  }
  interface updateWebPage extends GramJsInstance {
    webpage: WebPage;
    pts: int;
    ptsCount: int;
  }
  interface updateReadMessagesContents extends GramJsInstance {
    messages: int[];
    pts: int;
    ptsCount: int;
  }
  interface updateChannelTooLong extends GramJsInstance {
    // flags: null;
    channelId: int;
    pts?: int;
  }
  interface updateChannel extends GramJsInstance {
    channelId: int;
  }
  interface updateNewChannelMessage extends GramJsInstance {
    message: Message;
    pts: int;
    ptsCount: int;
  }
  interface updateReadChannelInbox extends GramJsInstance {
    // flags: null;
    folderId?: int;
    channelId: int;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
  }
  interface updateDeleteChannelMessages extends GramJsInstance {
    channelId: int;
    messages: int[];
    pts: int;
    ptsCount: int;
  }
  interface updateChannelMessageViews extends GramJsInstance {
    channelId: int;
    id: int;
    views: int;
  }
  interface updateChatParticipantAdmin extends GramJsInstance {
    chatId: int;
    userId: int;
    isAdmin: Bool;
    version: int;
  }
  interface updateNewStickerSet extends GramJsInstance {
    stickerset: messages_StickerSet;
  }
  interface updateStickerSetsOrder extends GramJsInstance {
    // flags: null;
    masks?: true;
    order: long[];
  }
  interface updateStickerSets extends GramJsInstance {
    
  }
  interface updateSavedGifs extends GramJsInstance {
    
  }
  interface updateBotInlineQuery extends GramJsInstance {
    // flags: null;
    queryId: long;
    userId: int;
    query: string;
    geo?: GeoPoint;
    offset: string;
  }
  interface updateBotInlineSend extends GramJsInstance {
    // flags: null;
    userId: int;
    query: string;
    geo?: GeoPoint;
    id: string;
    msgId?: InputBotInlineMessageID;
  }
  interface updateEditChannelMessage extends GramJsInstance {
    message: Message;
    pts: int;
    ptsCount: int;
  }
  interface updateChannelPinnedMessage extends GramJsInstance {
    channelId: int;
    id: int;
  }
  interface updateBotCallbackQuery extends GramJsInstance {
    // flags: null;
    queryId: long;
    userId: int;
    peer: Peer;
    msgId: int;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  }
  interface updateEditMessage extends GramJsInstance {
    message: Message;
    pts: int;
    ptsCount: int;
  }
  interface updateInlineBotCallbackQuery extends GramJsInstance {
    // flags: null;
    queryId: long;
    userId: int;
    msgId: InputBotInlineMessageID;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  }
  interface updateReadChannelOutbox extends GramJsInstance {
    channelId: int;
    maxId: int;
  }
  interface updateDraftMessage extends GramJsInstance {
    peer: Peer;
    draft: DraftMessage;
  }
  interface updateReadFeaturedStickers extends GramJsInstance {
    
  }
  interface updateRecentStickers extends GramJsInstance {
    
  }
  interface updateConfig extends GramJsInstance {
    
  }
  interface updatePtsChanged extends GramJsInstance {
    
  }
  interface updateChannelWebPage extends GramJsInstance {
    channelId: int;
    webpage: WebPage;
    pts: int;
    ptsCount: int;
  }
  interface updateDialogPinned extends GramJsInstance {
    // flags: null;
    pinned?: true;
    folderId?: int;
    peer: DialogPeer;
  }
  interface updatePinnedDialogs extends GramJsInstance {
    // flags: null;
    folderId?: int;
    order?: DialogPeer[];
  }
  interface updateBotWebhookJSON extends GramJsInstance {
    data: DataJSON;
  }
  interface updateBotWebhookJSONQuery extends GramJsInstance {
    queryId: long;
    data: DataJSON;
    timeout: int;
  }
  interface updateBotShippingQuery extends GramJsInstance {
    queryId: long;
    userId: int;
    payload: bytes;
    shippingAddress: PostAddress;
  }
  interface updateBotPrecheckoutQuery extends GramJsInstance {
    // flags: null;
    queryId: long;
    userId: int;
    payload: bytes;
    info?: PaymentRequestedInfo;
    shippingOptionId?: string;
    currency: string;
    totalAmount: long;
  }
  interface updatePhoneCall extends GramJsInstance {
    phoneCall: PhoneCall;
  }
  interface updateLangPackTooLong extends GramJsInstance {
    langCode: string;
  }
  interface updateLangPack extends GramJsInstance {
    difference: LangPackDifference;
  }
  interface updateFavedStickers extends GramJsInstance {
    
  }
  interface updateChannelReadMessagesContents extends GramJsInstance {
    channelId: int;
    messages: int[];
  }
  interface updateContactsReset extends GramJsInstance {
    
  }
  interface updateChannelAvailableMessages extends GramJsInstance {
    channelId: int;
    availableMinId: int;
  }
  interface updateDialogUnreadMark extends GramJsInstance {
    // flags: null;
    unread?: true;
    peer: DialogPeer;
  }
  interface updateUserPinnedMessage extends GramJsInstance {
    userId: int;
    id: int;
  }
  interface updateChatPinnedMessage extends GramJsInstance {
    chatId: int;
    id: int;
    version: int;
  }
  interface updateMessagePoll extends GramJsInstance {
    // flags: null;
    pollId: long;
    poll?: Poll;
    results: PollResults;
  }
  interface updateChatDefaultBannedRights extends GramJsInstance {
    peer: Peer;
    defaultBannedRights: ChatBannedRights;
    version: int;
  }
  interface updateFolderPeers extends GramJsInstance {
    folderPeers: FolderPeer[];
    pts: int;
    ptsCount: int;
  }
  interface updatePeerSettings extends GramJsInstance {
    peer: Peer;
    settings: PeerSettings;
  }
  interface updatePeerLocated extends GramJsInstance {
    peers: PeerLocated[];
  }
  interface updateNewScheduledMessage extends GramJsInstance {
    message: Message;
  }
  interface updateDeleteScheduledMessages extends GramJsInstance {
    peer: Peer;
    messages: int[];
  }
  interface updateTheme extends GramJsInstance {
    theme: Theme;
  }
  interface updates_state extends GramJsInstance {
    pts: int;
    qts: int;
    date: int;
    seq: int;
    unreadCount: int;
  }
  interface updates_differenceEmpty extends GramJsInstance {
    date: int;
    seq: int;
  }
  interface updates_difference extends GramJsInstance {
    newMessages: Message[];
    newEncryptedMessages: EncryptedMessage[];
    otherUpdates: Update[];
    chats: Chat[];
    users: User[];
    state: updates_State;
  }
  interface updates_differenceSlice extends GramJsInstance {
    newMessages: Message[];
    newEncryptedMessages: EncryptedMessage[];
    otherUpdates: Update[];
    chats: Chat[];
    users: User[];
    intermediateState: updates_State;
  }
  interface updates_differenceTooLong extends GramJsInstance {
    pts: int;
  }
  interface updatesTooLong extends GramJsInstance {
    
  }
  interface updateShortMessage extends GramJsInstance {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    userId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: MessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: MessageEntity[];
  }
  interface updateShortChatMessage extends GramJsInstance {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    fromId: int;
    chatId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: MessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: MessageEntity[];
  }
  interface updateShort extends GramJsInstance {
    update: Update;
    date: int;
  }
  interface updatesCombined extends GramJsInstance {
    updates: Update[];
    users: User[];
    chats: Chat[];
    date: int;
    seqStart: int;
    seq: int;
  }
  interface updates extends GramJsInstance {
    updates: Update[];
    users: User[];
    chats: Chat[];
    date: int;
    seq: int;
  }
  interface updateShortSentMessage extends GramJsInstance {
    // flags: null;
    out?: true;
    id: int;
    pts: int;
    ptsCount: int;
    date: int;
    media?: MessageMedia;
    entities?: MessageEntity[];
  }
  interface photos_photos extends GramJsInstance {
    photos: Photo[];
    users: User[];
  }
  interface photos_photosSlice extends GramJsInstance {
    count: int;
    photos: Photo[];
    users: User[];
  }
  interface photos_photo extends GramJsInstance {
    photo: Photo;
    users: User[];
  }
  interface upload_file extends GramJsInstance {
    type: storage_FileType;
    mtime: int;
    bytes: bytes;
  }
  interface upload_fileCdnRedirect extends GramJsInstance {
    dcId: int;
    fileToken: bytes;
    encryptionKey: bytes;
    encryptionIv: bytes;
    fileHashes: FileHash[];
  }
  interface dcOption extends GramJsInstance {
    // flags: null;
    ipv6?: true;
    mediaOnly?: true;
    tcpoOnly?: true;
    cdn?: true;
    static?: true;
    id: int;
    ipAddress: string;
    port: int;
    secret?: bytes;
  }
  interface config extends GramJsInstance {
    // flags: null;
    phonecallsEnabled?: true;
    defaultP2pContacts?: true;
    preloadFeaturedStickers?: true;
    ignorePhoneEntities?: true;
    revokePmInbox?: true;
    blockedMode?: true;
    pfsEnabled?: true;
    date: int;
    expires: int;
    testMode: Bool;
    thisDc: int;
    dcOptions: DcOption[];
    dcTxtDomainName: string;
    chatSizeMax: int;
    megagroupSizeMax: int;
    forwardedCountMax: int;
    onlineUpdatePeriodMs: int;
    offlineBlurTimeoutMs: int;
    offlineIdleTimeoutMs: int;
    onlineCloudTimeoutMs: int;
    notifyCloudDelayMs: int;
    notifyDefaultDelayMs: int;
    pushChatPeriodMs: int;
    pushChatLimit: int;
    savedGifsLimit: int;
    editTimeLimit: int;
    revokeTimeLimit: int;
    revokePmTimeLimit: int;
    ratingEDecay: int;
    stickersRecentLimit: int;
    stickersFavedLimit: int;
    channelsReadMediaPeriod: int;
    tmpSessions?: int;
    pinnedDialogsCountMax: int;
    pinnedInfolderCountMax: int;
    callReceiveTimeoutMs: int;
    callRingTimeoutMs: int;
    callConnectTimeoutMs: int;
    callPacketTimeoutMs: int;
    meUrlPrefix: string;
    autoupdateUrlPrefix?: string;
    gifSearchUsername?: string;
    venueSearchUsername?: string;
    imgSearchUsername?: string;
    staticMapsProvider?: string;
    captionLengthMax: int;
    messageLengthMax: int;
    webfileDcId: int;
    suggestedLangCode?: string;
    langPackVersion?: int;
    baseLangPackVersion?: int;
  }
  interface nearestDc extends GramJsInstance {
    country: string;
    thisDc: int;
    nearestDc: int;
  }
  interface help_appUpdate extends GramJsInstance {
    // flags: null;
    canNotSkip?: true;
    id: int;
    version: string;
    text: string;
    entities: MessageEntity[];
    document?: Document;
    url?: string;
  }
  interface help_noAppUpdate extends GramJsInstance {
    
  }
  interface help_inviteText extends GramJsInstance {
    message: string;
  }
  interface encryptedChatEmpty extends GramJsInstance {
    id: int;
  }
  interface encryptedChatWaiting extends GramJsInstance {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
  }
  interface encryptedChatRequested extends GramJsInstance {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gA: bytes;
  }
  interface encryptedChat extends GramJsInstance {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
  }
  interface encryptedChatDiscarded extends GramJsInstance {
    id: int;
  }
  interface inputEncryptedChat extends GramJsInstance {
    chatId: int;
    accessHash: long;
  }
  interface encryptedFileEmpty extends GramJsInstance {
    
  }
  interface encryptedFile extends GramJsInstance {
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    keyFingerprint: int;
  }
  interface inputEncryptedFileEmpty extends GramJsInstance {
    
  }
  interface inputEncryptedFileUploaded extends GramJsInstance {
    id: long;
    parts: int;
    md5Checksum: string;
    keyFingerprint: int;
  }
  interface inputEncryptedFile extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputEncryptedFileBigUploaded extends GramJsInstance {
    id: long;
    parts: int;
    keyFingerprint: int;
  }
  interface encryptedMessage extends GramJsInstance {
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
    file: EncryptedFile;
  }
  interface encryptedMessageService extends GramJsInstance {
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
  }
  interface messages_dhConfigNotModified extends GramJsInstance {
    random: bytes;
  }
  interface messages_dhConfig extends GramJsInstance {
    g: int;
    p: bytes;
    version: int;
    random: bytes;
  }
  interface messages_sentEncryptedMessage extends GramJsInstance {
    date: int;
  }
  interface messages_sentEncryptedFile extends GramJsInstance {
    date: int;
    file: EncryptedFile;
  }
  interface inputDocumentEmpty extends GramJsInstance {
    
  }
  interface inputDocument extends GramJsInstance {
    id: long;
    accessHash: long;
    fileReference: bytes;
  }
  interface documentEmpty extends GramJsInstance {
    id: long;
  }
  interface document extends GramJsInstance {
    // flags: null;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    mimeType: string;
    size: int;
    thumbs?: PhotoSize[];
    dcId: int;
    attributes: DocumentAttribute[];
  }
  interface help_support extends GramJsInstance {
    phoneNumber: string;
    user: User;
  }
  interface notifyPeer extends GramJsInstance {
    peer: Peer;
  }
  interface notifyUsers extends GramJsInstance {
    
  }
  interface notifyChats extends GramJsInstance {
    
  }
  interface notifyBroadcasts extends GramJsInstance {
    
  }
  interface sendMessageTypingAction extends GramJsInstance {
    
  }
  interface sendMessageCancelAction extends GramJsInstance {
    
  }
  interface sendMessageRecordVideoAction extends GramJsInstance {
    
  }
  interface sendMessageUploadVideoAction extends GramJsInstance {
    progress: int;
  }
  interface sendMessageRecordAudioAction extends GramJsInstance {
    
  }
  interface sendMessageUploadAudioAction extends GramJsInstance {
    progress: int;
  }
  interface sendMessageUploadPhotoAction extends GramJsInstance {
    progress: int;
  }
  interface sendMessageUploadDocumentAction extends GramJsInstance {
    progress: int;
  }
  interface sendMessageGeoLocationAction extends GramJsInstance {
    
  }
  interface sendMessageChooseContactAction extends GramJsInstance {
    
  }
  interface sendMessageGamePlayAction extends GramJsInstance {
    
  }
  interface sendMessageRecordRoundAction extends GramJsInstance {
    
  }
  interface sendMessageUploadRoundAction extends GramJsInstance {
    progress: int;
  }
  interface contacts_found extends GramJsInstance {
    myResults: Peer[];
    results: Peer[];
    chats: Chat[];
    users: User[];
  }
  interface inputPrivacyKeyStatusTimestamp extends GramJsInstance {
    
  }
  interface inputPrivacyKeyChatInvite extends GramJsInstance {
    
  }
  interface inputPrivacyKeyPhoneCall extends GramJsInstance {
    
  }
  interface inputPrivacyKeyPhoneP2P extends GramJsInstance {
    
  }
  interface inputPrivacyKeyForwards extends GramJsInstance {
    
  }
  interface inputPrivacyKeyProfilePhoto extends GramJsInstance {
    
  }
  interface inputPrivacyKeyPhoneNumber extends GramJsInstance {
    
  }
  interface inputPrivacyKeyAddedByPhone extends GramJsInstance {
    
  }
  interface privacyKeyStatusTimestamp extends GramJsInstance {
    
  }
  interface privacyKeyChatInvite extends GramJsInstance {
    
  }
  interface privacyKeyPhoneCall extends GramJsInstance {
    
  }
  interface privacyKeyPhoneP2P extends GramJsInstance {
    
  }
  interface privacyKeyForwards extends GramJsInstance {
    
  }
  interface privacyKeyProfilePhoto extends GramJsInstance {
    
  }
  interface privacyKeyPhoneNumber extends GramJsInstance {
    
  }
  interface privacyKeyAddedByPhone extends GramJsInstance {
    
  }
  interface inputPrivacyValueAllowContacts extends GramJsInstance {
    
  }
  interface inputPrivacyValueAllowAll extends GramJsInstance {
    
  }
  interface inputPrivacyValueAllowUsers extends GramJsInstance {
    users: InputUser[];
  }
  interface inputPrivacyValueDisallowContacts extends GramJsInstance {
    
  }
  interface inputPrivacyValueDisallowAll extends GramJsInstance {
    
  }
  interface inputPrivacyValueDisallowUsers extends GramJsInstance {
    users: InputUser[];
  }
  interface inputPrivacyValueAllowChatParticipants extends GramJsInstance {
    chats: int[];
  }
  interface inputPrivacyValueDisallowChatParticipants extends GramJsInstance {
    chats: int[];
  }
  interface privacyValueAllowContacts extends GramJsInstance {
    
  }
  interface privacyValueAllowAll extends GramJsInstance {
    
  }
  interface privacyValueAllowUsers extends GramJsInstance {
    users: int[];
  }
  interface privacyValueDisallowContacts extends GramJsInstance {
    
  }
  interface privacyValueDisallowAll extends GramJsInstance {
    
  }
  interface privacyValueDisallowUsers extends GramJsInstance {
    users: int[];
  }
  interface privacyValueAllowChatParticipants extends GramJsInstance {
    chats: int[];
  }
  interface privacyValueDisallowChatParticipants extends GramJsInstance {
    chats: int[];
  }
  interface account_privacyRules extends GramJsInstance {
    rules: PrivacyRule[];
    chats: Chat[];
    users: User[];
  }
  interface accountDaysTTL extends GramJsInstance {
    days: int;
  }
  interface documentAttributeImageSize extends GramJsInstance {
    w: int;
    h: int;
  }
  interface documentAttributeAnimated extends GramJsInstance {
    
  }
  interface documentAttributeSticker extends GramJsInstance {
    // flags: null;
    mask?: true;
    alt: string;
    stickerset: InputStickerSet;
    maskCoords?: MaskCoords;
  }
  interface documentAttributeVideo extends GramJsInstance {
    // flags: null;
    roundMessage?: true;
    supportsStreaming?: true;
    duration: int;
    w: int;
    h: int;
  }
  interface documentAttributeAudio extends GramJsInstance {
    // flags: null;
    voice?: true;
    duration: int;
    title?: string;
    performer?: string;
    waveform?: bytes;
  }
  interface documentAttributeFilename extends GramJsInstance {
    fileName: string;
  }
  interface documentAttributeHasStickers extends GramJsInstance {
    
  }
  interface messages_stickersNotModified extends GramJsInstance {
    
  }
  interface messages_stickers extends GramJsInstance {
    hash: int;
    stickers: Document[];
  }
  interface stickerPack extends GramJsInstance {
    emoticon: string;
    documents: long[];
  }
  interface messages_allStickersNotModified extends GramJsInstance {
    
  }
  interface messages_allStickers extends GramJsInstance {
    hash: int;
    sets: StickerSet[];
  }
  interface messages_affectedMessages extends GramJsInstance {
    pts: int;
    ptsCount: int;
  }
  interface webPageEmpty extends GramJsInstance {
    id: long;
  }
  interface webPagePending extends GramJsInstance {
    id: long;
    date: int;
  }
  interface webPage extends GramJsInstance {
    // flags: null;
    id: long;
    url: string;
    displayUrl: string;
    hash: int;
    type?: string;
    siteName?: string;
    title?: string;
    description?: string;
    photo?: Photo;
    embedUrl?: string;
    embedType?: string;
    embedWidth?: int;
    embedHeight?: int;
    duration?: int;
    author?: string;
    document?: Document;
    documents?: Document[];
    cachedPage?: Page;
  }
  interface webPageNotModified extends GramJsInstance {
    
  }
  interface authorization extends GramJsInstance {
    // flags: null;
    current?: true;
    officialApp?: true;
    passwordPending?: true;
    hash: long;
    deviceModel: string;
    platform: string;
    systemVersion: string;
    apiId: int;
    appName: string;
    appVersion: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    country: string;
    region: string;
  }
  interface account_authorizations extends GramJsInstance {
    authorizations: Authorization[];
  }
  interface account_password extends GramJsInstance {
    // flags: null;
    hasRecovery?: true;
    hasSecureValues?: true;
    hasPassword?: true;
    currentAlgo?: PasswordKdfAlgo;
    srp_B?: bytes;
    srpId?: long;
    hint?: string;
    emailUnconfirmedPattern?: string;
    newAlgo: PasswordKdfAlgo;
    newSecureAlgo: SecurePasswordKdfAlgo;
    secureRandom: bytes;
  }
  interface account_passwordSettings extends GramJsInstance {
    // flags: null;
    email?: string;
    secureSettings?: SecureSecretSettings;
  }
  interface account_passwordInputSettings extends GramJsInstance {
    // flags: null;
    newAlgo?: PasswordKdfAlgo;
    newPasswordHash?: bytes;
    hint?: string;
    email?: string;
    newSecureSettings?: SecureSecretSettings;
  }
  interface auth_passwordRecovery extends GramJsInstance {
    emailPattern: string;
  }
  interface receivedNotifyMessage extends GramJsInstance {
    id: int;
    // flags: int;
  }
  interface chatInviteEmpty extends GramJsInstance {
    
  }
  interface chatInviteExported extends GramJsInstance {
    link: string;
  }
  interface chatInviteAlready extends GramJsInstance {
    chat: Chat;
  }
  interface chatInvite extends GramJsInstance {
    // flags: null;
    channel?: true;
    broadcast?: true;
    public?: true;
    megagroup?: true;
    title: string;
    photo: Photo;
    participantsCount: int;
    participants?: User[];
  }
  interface inputStickerSetEmpty extends GramJsInstance {
    
  }
  interface inputStickerSetID extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputStickerSetShortName extends GramJsInstance {
    shortName: string;
  }
  interface inputStickerSetAnimatedEmoji extends GramJsInstance {
    
  }
  interface stickerSet extends GramJsInstance {
    // flags: null;
    archived?: true;
    official?: true;
    masks?: true;
    animated?: true;
    installedDate?: int;
    id: long;
    accessHash: long;
    title: string;
    shortName: string;
    thumb?: PhotoSize;
    thumbDcId?: int;
    count: int;
    hash: int;
  }
  interface messages_stickerSet extends GramJsInstance {
    set: StickerSet;
    packs: StickerPack[];
    documents: Document[];
  }
  interface botCommand extends GramJsInstance {
    command: string;
    description: string;
  }
  interface botInfo extends GramJsInstance {
    userId: int;
    description: string;
    commands: BotCommand[];
  }
  interface keyboardButton extends GramJsInstance {
    text: string;
  }
  interface keyboardButtonUrl extends GramJsInstance {
    text: string;
    url: string;
  }
  interface keyboardButtonCallback extends GramJsInstance {
    text: string;
    data: bytes;
  }
  interface keyboardButtonRequestPhone extends GramJsInstance {
    text: string;
  }
  interface keyboardButtonRequestGeoLocation extends GramJsInstance {
    text: string;
  }
  interface keyboardButtonSwitchInline extends GramJsInstance {
    // flags: null;
    samePeer?: true;
    text: string;
    query: string;
  }
  interface keyboardButtonGame extends GramJsInstance {
    text: string;
  }
  interface keyboardButtonBuy extends GramJsInstance {
    text: string;
  }
  interface keyboardButtonUrlAuth extends GramJsInstance {
    // flags: null;
    text: string;
    fwdText?: string;
    url: string;
    buttonId: int;
  }
  interface inputKeyboardButtonUrlAuth extends GramJsInstance {
    // flags: null;
    requestWriteAccess?: true;
    text: string;
    fwdText?: string;
    url: string;
    bot: InputUser;
  }
  interface keyboardButtonRow extends GramJsInstance {
    buttons: KeyboardButton[];
  }
  interface replyKeyboardHide extends GramJsInstance {
    // flags: null;
    selective?: true;
  }
  interface replyKeyboardForceReply extends GramJsInstance {
    // flags: null;
    singleUse?: true;
    selective?: true;
  }
  interface replyKeyboardMarkup extends GramJsInstance {
    // flags: null;
    resize?: true;
    singleUse?: true;
    selective?: true;
    rows: KeyboardButtonRow[];
  }
  interface replyInlineMarkup extends GramJsInstance {
    rows: KeyboardButtonRow[];
  }
  interface messageEntityUnknown extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityMention extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityHashtag extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityBotCommand extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityUrl extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityEmail extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityBold extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityItalic extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityCode extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityPre extends GramJsInstance {
    offset: int;
    length: int;
    language: string;
  }
  interface messageEntityTextUrl extends GramJsInstance {
    offset: int;
    length: int;
    url: string;
  }
  interface messageEntityMentionName extends GramJsInstance {
    offset: int;
    length: int;
    userId: int;
  }
  interface inputMessageEntityMentionName extends GramJsInstance {
    offset: int;
    length: int;
    userId: InputUser;
  }
  interface messageEntityPhone extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityCashtag extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityUnderline extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityStrike extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface messageEntityBlockquote extends GramJsInstance {
    offset: int;
    length: int;
  }
  interface inputChannelEmpty extends GramJsInstance {
    
  }
  interface inputChannel extends GramJsInstance {
    channelId: int;
    accessHash: long;
  }
  interface inputChannelFromMessage extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    channelId: int;
  }
  interface contacts_resolvedPeer extends GramJsInstance {
    peer: Peer;
    chats: Chat[];
    users: User[];
  }
  interface messageRange extends GramJsInstance {
    minId: int;
    maxId: int;
  }
  interface updates_channelDifferenceEmpty extends GramJsInstance {
    // flags: null;
    final?: true;
    pts: int;
    timeout?: int;
  }
  interface updates_channelDifferenceTooLong extends GramJsInstance {
    // flags: null;
    final?: true;
    timeout?: int;
    dialog: Dialog;
    messages: Message[];
    chats: Chat[];
    users: User[];
  }
  interface updates_channelDifference extends GramJsInstance {
    // flags: null;
    final?: true;
    pts: int;
    timeout?: int;
    newMessages: Message[];
    otherUpdates: Update[];
    chats: Chat[];
    users: User[];
  }
  interface channelMessagesFilterEmpty extends GramJsInstance {
    
  }
  interface channelMessagesFilter extends GramJsInstance {
    // flags: null;
    excludeNewMessages?: true;
    ranges: MessageRange[];
  }
  interface channelParticipant extends GramJsInstance {
    userId: int;
    date: int;
  }
  interface channelParticipantSelf extends GramJsInstance {
    userId: int;
    inviterId: int;
    date: int;
  }
  interface channelParticipantCreator extends GramJsInstance {
    // flags: null;
    userId: int;
    rank?: string;
  }
  interface channelParticipantAdmin extends GramJsInstance {
    // flags: null;
    canEdit?: true;
    self?: true;
    userId: int;
    inviterId?: int;
    promotedBy: int;
    date: int;
    adminRights: ChatAdminRights;
    rank?: string;
  }
  interface channelParticipantBanned extends GramJsInstance {
    // flags: null;
    left?: true;
    userId: int;
    kickedBy: int;
    date: int;
    bannedRights: ChatBannedRights;
  }
  interface channelParticipantsRecent extends GramJsInstance {
    
  }
  interface channelParticipantsAdmins extends GramJsInstance {
    
  }
  interface channelParticipantsKicked extends GramJsInstance {
    q: string;
  }
  interface channelParticipantsBots extends GramJsInstance {
    
  }
  interface channelParticipantsBanned extends GramJsInstance {
    q: string;
  }
  interface channelParticipantsSearch extends GramJsInstance {
    q: string;
  }
  interface channelParticipantsContacts extends GramJsInstance {
    q: string;
  }
  interface channels_channelParticipants extends GramJsInstance {
    count: int;
    participants: ChannelParticipant[];
    users: User[];
  }
  interface channels_channelParticipantsNotModified extends GramJsInstance {
    
  }
  interface channels_channelParticipant extends GramJsInstance {
    participant: ChannelParticipant;
    users: User[];
  }
  interface help_termsOfService extends GramJsInstance {
    // flags: null;
    popup?: true;
    id: DataJSON;
    text: string;
    entities: MessageEntity[];
    minAgeConfirm?: int;
  }
  interface foundGif extends GramJsInstance {
    url: string;
    thumbUrl: string;
    contentUrl: string;
    contentType: string;
    w: int;
    h: int;
  }
  interface foundGifCached extends GramJsInstance {
    url: string;
    photo: Photo;
    document: Document;
  }
  interface messages_foundGifs extends GramJsInstance {
    nextOffset: int;
    results: FoundGif[];
  }
  interface messages_savedGifsNotModified extends GramJsInstance {
    
  }
  interface messages_savedGifs extends GramJsInstance {
    hash: int;
    gifs: Document[];
  }
  interface inputBotInlineMessageMediaAuto extends GramJsInstance {
    // flags: null;
    message: string;
    entities?: MessageEntity[];
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineMessageText extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: MessageEntity[];
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineMessageMediaGeo extends GramJsInstance {
    // flags: null;
    geoPoint: InputGeoPoint;
    period: int;
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineMessageMediaVenue extends GramJsInstance {
    // flags: null;
    geoPoint: InputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineMessageMediaContact extends GramJsInstance {
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineMessageGame extends GramJsInstance {
    // flags: null;
    replyMarkup?: ReplyMarkup;
  }
  interface inputBotInlineResult extends GramJsInstance {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: InputWebDocument;
    content?: InputWebDocument;
    sendMessage: InputBotInlineMessage;
  }
  interface inputBotInlineResultPhoto extends GramJsInstance {
    id: string;
    type: string;
    photo: InputPhoto;
    sendMessage: InputBotInlineMessage;
  }
  interface inputBotInlineResultDocument extends GramJsInstance {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    document: InputDocument;
    sendMessage: InputBotInlineMessage;
  }
  interface inputBotInlineResultGame extends GramJsInstance {
    id: string;
    shortName: string;
    sendMessage: InputBotInlineMessage;
  }
  interface botInlineMessageMediaAuto extends GramJsInstance {
    // flags: null;
    message: string;
    entities?: MessageEntity[];
    replyMarkup?: ReplyMarkup;
  }
  interface botInlineMessageText extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: MessageEntity[];
    replyMarkup?: ReplyMarkup;
  }
  interface botInlineMessageMediaGeo extends GramJsInstance {
    // flags: null;
    geo: GeoPoint;
    period: int;
    replyMarkup?: ReplyMarkup;
  }
  interface botInlineMessageMediaVenue extends GramJsInstance {
    // flags: null;
    geo: GeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: ReplyMarkup;
  }
  interface botInlineMessageMediaContact extends GramJsInstance {
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: ReplyMarkup;
  }
  interface botInlineResult extends GramJsInstance {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: WebDocument;
    content?: WebDocument;
    sendMessage: BotInlineMessage;
  }
  interface botInlineMediaResult extends GramJsInstance {
    // flags: null;
    id: string;
    type: string;
    photo?: Photo;
    document?: Document;
    title?: string;
    description?: string;
    sendMessage: BotInlineMessage;
  }
  interface messages_botResults extends GramJsInstance {
    // flags: null;
    gallery?: true;
    queryId: long;
    nextOffset?: string;
    switchPm?: InlineBotSwitchPM;
    results: BotInlineResult[];
    cacheTime: int;
    users: User[];
  }
  interface exportedMessageLink extends GramJsInstance {
    link: string;
    html: string;
  }
  interface messageFwdHeader extends GramJsInstance {
    // flags: null;
    fromId?: int;
    fromName?: string;
    date: int;
    channelId?: int;
    channelPost?: int;
    postAuthor?: string;
    savedFromPeer?: Peer;
    savedFromMsgId?: int;
  }
  interface auth_codeTypeSms extends GramJsInstance {
    
  }
  interface auth_codeTypeCall extends GramJsInstance {
    
  }
  interface auth_codeTypeFlashCall extends GramJsInstance {
    
  }
  interface auth_sentCodeTypeApp extends GramJsInstance {
    length: int;
  }
  interface auth_sentCodeTypeSms extends GramJsInstance {
    length: int;
  }
  interface auth_sentCodeTypeCall extends GramJsInstance {
    length: int;
  }
  interface auth_sentCodeTypeFlashCall extends GramJsInstance {
    pattern: string;
  }
  interface messages_botCallbackAnswer extends GramJsInstance {
    // flags: null;
    alert?: true;
    hasUrl?: true;
    nativeUi?: true;
    message?: string;
    url?: string;
    cacheTime: int;
  }
  interface messages_messageEditData extends GramJsInstance {
    // flags: null;
    caption?: true;
  }
  interface inputBotInlineMessageID extends GramJsInstance {
    dcId: int;
    id: long;
    accessHash: long;
  }
  interface inlineBotSwitchPM extends GramJsInstance {
    text: string;
    startParam: string;
  }
  interface messages_peerDialogs extends GramJsInstance {
    dialogs: Dialog[];
    messages: Message[];
    chats: Chat[];
    users: User[];
    state: updates_State;
  }
  interface topPeer extends GramJsInstance {
    peer: Peer;
    rating: double;
  }
  interface topPeerCategoryBotsPM extends GramJsInstance {
    
  }
  interface topPeerCategoryBotsInline extends GramJsInstance {
    
  }
  interface topPeerCategoryCorrespondents extends GramJsInstance {
    
  }
  interface topPeerCategoryGroups extends GramJsInstance {
    
  }
  interface topPeerCategoryChannels extends GramJsInstance {
    
  }
  interface topPeerCategoryPhoneCalls extends GramJsInstance {
    
  }
  interface topPeerCategoryForwardUsers extends GramJsInstance {
    
  }
  interface topPeerCategoryForwardChats extends GramJsInstance {
    
  }
  interface topPeerCategoryPeers extends GramJsInstance {
    category: TopPeerCategory;
    count: int;
    peers: TopPeer[];
  }
  interface contacts_topPeersNotModified extends GramJsInstance {
    
  }
  interface contacts_topPeers extends GramJsInstance {
    categories: TopPeerCategoryPeers[];
    chats: Chat[];
    users: User[];
  }
  interface contacts_topPeersDisabled extends GramJsInstance {
    
  }
  interface draftMessageEmpty extends GramJsInstance {
    // flags: null;
    date?: int;
  }
  interface draftMessage extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    replyToMsgId?: int;
    message: string;
    entities?: MessageEntity[];
    date: int;
  }
  interface messages_featuredStickersNotModified extends GramJsInstance {
    
  }
  interface messages_featuredStickers extends GramJsInstance {
    hash: int;
    sets: StickerSetCovered[];
    unread: long[];
  }
  interface messages_recentStickersNotModified extends GramJsInstance {
    
  }
  interface messages_recentStickers extends GramJsInstance {
    hash: int;
    packs: StickerPack[];
    stickers: Document[];
    dates: int[];
  }
  interface messages_archivedStickers extends GramJsInstance {
    count: int;
    sets: StickerSetCovered[];
  }
  interface messages_stickerSetInstallResultSuccess extends GramJsInstance {
    
  }
  interface messages_stickerSetInstallResultArchive extends GramJsInstance {
    sets: StickerSetCovered[];
  }
  interface stickerSetCovered extends GramJsInstance {
    set: StickerSet;
    cover: Document;
  }
  interface stickerSetMultiCovered extends GramJsInstance {
    set: StickerSet;
    covers: Document[];
  }
  interface maskCoords extends GramJsInstance {
    n: int;
    x: double;
    y: double;
    zoom: double;
  }
  interface inputStickeredMediaPhoto extends GramJsInstance {
    id: InputPhoto;
  }
  interface inputStickeredMediaDocument extends GramJsInstance {
    id: InputDocument;
  }
  interface game extends GramJsInstance {
    // flags: null;
    id: long;
    accessHash: long;
    shortName: string;
    title: string;
    description: string;
    photo: Photo;
    document?: Document;
  }
  interface inputGameID extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputGameShortName extends GramJsInstance {
    botId: InputUser;
    shortName: string;
  }
  interface highScore extends GramJsInstance {
    pos: int;
    userId: int;
    score: int;
  }
  interface messages_highScores extends GramJsInstance {
    scores: HighScore[];
    users: User[];
  }
  interface textEmpty extends GramJsInstance {
    
  }
  interface textPlain extends GramJsInstance {
    text: string;
  }
  interface textBold extends GramJsInstance {
    text: RichText;
  }
  interface textItalic extends GramJsInstance {
    text: RichText;
  }
  interface textUnderline extends GramJsInstance {
    text: RichText;
  }
  interface textStrike extends GramJsInstance {
    text: RichText;
  }
  interface textFixed extends GramJsInstance {
    text: RichText;
  }
  interface textUrl extends GramJsInstance {
    text: RichText;
    url: string;
    webpageId: long;
  }
  interface textEmail extends GramJsInstance {
    text: RichText;
    email: string;
  }
  interface textConcat extends GramJsInstance {
    texts: RichText[];
  }
  interface textSubscript extends GramJsInstance {
    text: RichText;
  }
  interface textSuperscript extends GramJsInstance {
    text: RichText;
  }
  interface textMarked extends GramJsInstance {
    text: RichText;
  }
  interface textPhone extends GramJsInstance {
    text: RichText;
    phone: string;
  }
  interface textImage extends GramJsInstance {
    documentId: long;
    w: int;
    h: int;
  }
  interface textAnchor extends GramJsInstance {
    text: RichText;
    name: string;
  }
  interface pageBlockUnsupported extends GramJsInstance {
    
  }
  interface pageBlockTitle extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockSubtitle extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockAuthorDate extends GramJsInstance {
    author: RichText;
    publishedDate: int;
  }
  interface pageBlockHeader extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockSubheader extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockParagraph extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockPreformatted extends GramJsInstance {
    text: RichText;
    language: string;
  }
  interface pageBlockFooter extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockDivider extends GramJsInstance {
    
  }
  interface pageBlockAnchor extends GramJsInstance {
    name: string;
  }
  interface pageBlockList extends GramJsInstance {
    items: PageListItem[];
  }
  interface pageBlockBlockquote extends GramJsInstance {
    text: RichText;
    caption: RichText;
  }
  interface pageBlockPullquote extends GramJsInstance {
    text: RichText;
    caption: RichText;
  }
  interface pageBlockPhoto extends GramJsInstance {
    // flags: null;
    photoId: long;
    caption: PageCaption;
    url?: string;
    webpageId?: long;
  }
  interface pageBlockVideo extends GramJsInstance {
    // flags: null;
    autoplay?: true;
    loop?: true;
    videoId: long;
    caption: PageCaption;
  }
  interface pageBlockCover extends GramJsInstance {
    cover: PageBlock;
  }
  interface pageBlockEmbed extends GramJsInstance {
    // flags: null;
    fullWidth?: true;
    allowScrolling?: true;
    url?: string;
    html?: string;
    posterPhotoId?: long;
    w?: int;
    h?: int;
    caption: PageCaption;
  }
  interface pageBlockEmbedPost extends GramJsInstance {
    url: string;
    webpageId: long;
    authorPhotoId: long;
    author: string;
    date: int;
    blocks: PageBlock[];
    caption: PageCaption;
  }
  interface pageBlockCollage extends GramJsInstance {
    items: PageBlock[];
    caption: PageCaption;
  }
  interface pageBlockSlideshow extends GramJsInstance {
    items: PageBlock[];
    caption: PageCaption;
  }
  interface pageBlockChannel extends GramJsInstance {
    channel: Chat;
  }
  interface pageBlockAudio extends GramJsInstance {
    audioId: long;
    caption: PageCaption;
  }
  interface pageBlockKicker extends GramJsInstance {
    text: RichText;
  }
  interface pageBlockTable extends GramJsInstance {
    // flags: null;
    bordered?: true;
    striped?: true;
    title: RichText;
    rows: PageTableRow[];
  }
  interface pageBlockOrderedList extends GramJsInstance {
    items: PageListOrderedItem[];
  }
  interface pageBlockDetails extends GramJsInstance {
    // flags: null;
    open?: true;
    blocks: PageBlock[];
    title: RichText;
  }
  interface pageBlockRelatedArticles extends GramJsInstance {
    title: RichText;
    articles: PageRelatedArticle[];
  }
  interface pageBlockMap extends GramJsInstance {
    geo: GeoPoint;
    zoom: int;
    w: int;
    h: int;
    caption: PageCaption;
  }
  interface phoneCallDiscardReasonMissed extends GramJsInstance {
    
  }
  interface phoneCallDiscardReasonDisconnect extends GramJsInstance {
    
  }
  interface phoneCallDiscardReasonHangup extends GramJsInstance {
    
  }
  interface phoneCallDiscardReasonBusy extends GramJsInstance {
    
  }
  interface dataJSON extends GramJsInstance {
    data: string;
  }
  interface labeledPrice extends GramJsInstance {
    label: string;
    amount: long;
  }
  interface invoice extends GramJsInstance {
    // flags: null;
    test?: true;
    nameRequested?: true;
    phoneRequested?: true;
    emailRequested?: true;
    shippingAddressRequested?: true;
    flexible?: true;
    phoneToProvider?: true;
    emailToProvider?: true;
    currency: string;
    prices: LabeledPrice[];
  }
  interface paymentCharge extends GramJsInstance {
    id: string;
    providerChargeId: string;
  }
  interface postAddress extends GramJsInstance {
    streetLine1: string;
    streetLine2: string;
    city: string;
    state: string;
    countryIso2: string;
    postCode: string;
  }
  interface paymentRequestedInfo extends GramJsInstance {
    // flags: null;
    name?: string;
    phone?: string;
    email?: string;
    shippingAddress?: PostAddress;
  }
  interface paymentSavedCredentialsCard extends GramJsInstance {
    id: string;
    title: string;
  }
  interface webDocument extends GramJsInstance {
    url: string;
    accessHash: long;
    size: int;
    mimeType: string;
    attributes: DocumentAttribute[];
  }
  interface webDocumentNoProxy extends GramJsInstance {
    url: string;
    size: int;
    mimeType: string;
    attributes: DocumentAttribute[];
  }
  interface inputWebDocument extends GramJsInstance {
    url: string;
    size: int;
    mimeType: string;
    attributes: DocumentAttribute[];
  }
  interface inputWebFileLocation extends GramJsInstance {
    url: string;
    accessHash: long;
  }
  interface inputWebFileGeoPointLocation extends GramJsInstance {
    geoPoint: InputGeoPoint;
    accessHash: long;
    w: int;
    h: int;
    zoom: int;
    scale: int;
  }
  interface upload_webFile extends GramJsInstance {
    size: int;
    mimeType: string;
    fileType: storage_FileType;
    mtime: int;
    bytes: bytes;
  }
  interface payments_paymentForm extends GramJsInstance {
    // flags: null;
    canSaveCredentials?: true;
    passwordMissing?: true;
    botId: int;
    invoice: Invoice;
    providerId: int;
    url: string;
    nativeProvider?: string;
    nativeParams?: DataJSON;
    savedInfo?: PaymentRequestedInfo;
    savedCredentials?: PaymentSavedCredentials;
    users: User[];
  }
  interface payments_validatedRequestedInfo extends GramJsInstance {
    // flags: null;
    id?: string;
    shippingOptions?: ShippingOption[];
  }
  interface payments_paymentResult extends GramJsInstance {
    updates: Updates;
  }
  interface payments_paymentVerificationNeeded extends GramJsInstance {
    url: string;
  }
  interface payments_paymentReceipt extends GramJsInstance {
    // flags: null;
    date: int;
    botId: int;
    invoice: Invoice;
    providerId: int;
    info?: PaymentRequestedInfo;
    shipping?: ShippingOption;
    currency: string;
    totalAmount: long;
    credentialsTitle: string;
    users: User[];
  }
  interface payments_savedInfo extends GramJsInstance {
    // flags: null;
    hasSavedCredentials?: true;
    savedInfo?: PaymentRequestedInfo;
  }
  interface inputPaymentCredentialsSaved extends GramJsInstance {
    id: string;
    tmpPassword: bytes;
  }
  interface inputPaymentCredentials extends GramJsInstance {
    // flags: null;
    save?: true;
    data: DataJSON;
  }
  interface inputPaymentCredentialsApplePay extends GramJsInstance {
    paymentData: DataJSON;
  }
  interface inputPaymentCredentialsAndroidPay extends GramJsInstance {
    paymentToken: DataJSON;
    googleTransactionId: string;
  }
  interface account_tmpPassword extends GramJsInstance {
    tmpPassword: bytes;
    validUntil: int;
  }
  interface shippingOption extends GramJsInstance {
    id: string;
    title: string;
    prices: LabeledPrice[];
  }
  interface inputStickerSetItem extends GramJsInstance {
    // flags: null;
    document: InputDocument;
    emoji: string;
    maskCoords?: MaskCoords;
  }
  interface inputPhoneCall extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface phoneCallEmpty extends GramJsInstance {
    id: long;
  }
  interface phoneCallWaiting extends GramJsInstance {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    protocol: PhoneCallProtocol;
    receiveDate?: int;
  }
  interface phoneCallRequested extends GramJsInstance {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAHash: bytes;
    protocol: PhoneCallProtocol;
  }
  interface phoneCallAccepted extends GramJsInstance {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gB: bytes;
    protocol: PhoneCallProtocol;
  }
  interface phoneCall extends GramJsInstance {
    // flags: null;
    p2pAllowed?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
    protocol: PhoneCallProtocol;
    connections: PhoneConnection[];
    startDate: int;
  }
  interface phoneCallDiscarded extends GramJsInstance {
    // flags: null;
    needRating?: true;
    needDebug?: true;
    video?: true;
    id: long;
    reason?: PhoneCallDiscardReason;
    duration?: int;
  }
  interface phoneConnection extends GramJsInstance {
    id: long;
    ip: string;
    ipv6: string;
    port: int;
    peerTag: bytes;
  }
  interface phoneCallProtocol extends GramJsInstance {
    // flags: null;
    udpP2p?: true;
    udpReflector?: true;
    minLayer: int;
    maxLayer: int;
  }
  interface phone_phoneCall extends GramJsInstance {
    phoneCall: PhoneCall;
    users: User[];
  }
  interface upload_cdnFileReuploadNeeded extends GramJsInstance {
    requestToken: bytes;
  }
  interface upload_cdnFile extends GramJsInstance {
    bytes: bytes;
  }
  interface cdnPublicKey extends GramJsInstance {
    dcId: int;
    publicKey: string;
  }
  interface cdnConfig extends GramJsInstance {
    publicKeys: CdnPublicKey[];
  }
  interface langPackString extends GramJsInstance {
    key: string;
    value: string;
  }
  interface langPackStringPluralized extends GramJsInstance {
    // flags: null;
    key: string;
    zeroValue?: string;
    oneValue?: string;
    twoValue?: string;
    fewValue?: string;
    manyValue?: string;
    otherValue: string;
  }
  interface langPackStringDeleted extends GramJsInstance {
    key: string;
  }
  interface langPackDifference extends GramJsInstance {
    langCode: string;
    fromVersion: int;
    version: int;
    strings: LangPackString[];
  }
  interface langPackLanguage extends GramJsInstance {
    // flags: null;
    official?: true;
    rtl?: true;
    beta?: true;
    name: string;
    nativeName: string;
    langCode: string;
    baseLangCode?: string;
    pluralCode: string;
    stringsCount: int;
    translatedCount: int;
    translationsUrl: string;
  }
  interface channelAdminLogEventActionChangeTitle extends GramJsInstance {
    prevValue: string;
    newValue: string;
  }
  interface channelAdminLogEventActionChangeAbout extends GramJsInstance {
    prevValue: string;
    newValue: string;
  }
  interface channelAdminLogEventActionChangeUsername extends GramJsInstance {
    prevValue: string;
    newValue: string;
  }
  interface channelAdminLogEventActionChangePhoto extends GramJsInstance {
    prevPhoto: Photo;
    newPhoto: Photo;
  }
  interface channelAdminLogEventActionToggleInvites extends GramJsInstance {
    newValue: Bool;
  }
  interface channelAdminLogEventActionToggleSignatures extends GramJsInstance {
    newValue: Bool;
  }
  interface channelAdminLogEventActionUpdatePinned extends GramJsInstance {
    message: Message;
  }
  interface channelAdminLogEventActionEditMessage extends GramJsInstance {
    prevMessage: Message;
    newMessage: Message;
  }
  interface channelAdminLogEventActionDeleteMessage extends GramJsInstance {
    message: Message;
  }
  interface channelAdminLogEventActionParticipantJoin extends GramJsInstance {
    
  }
  interface channelAdminLogEventActionParticipantLeave extends GramJsInstance {
    
  }
  interface channelAdminLogEventActionParticipantInvite extends GramJsInstance {
    participant: ChannelParticipant;
  }
  interface channelAdminLogEventActionParticipantToggleBan extends GramJsInstance {
    prevParticipant: ChannelParticipant;
    newParticipant: ChannelParticipant;
  }
  interface channelAdminLogEventActionParticipantToggleAdmin extends GramJsInstance {
    prevParticipant: ChannelParticipant;
    newParticipant: ChannelParticipant;
  }
  interface channelAdminLogEventActionChangeStickerSet extends GramJsInstance {
    prevStickerset: InputStickerSet;
    newStickerset: InputStickerSet;
  }
  interface channelAdminLogEventActionTogglePreHistoryHidden extends GramJsInstance {
    newValue: Bool;
  }
  interface channelAdminLogEventActionDefaultBannedRights extends GramJsInstance {
    prevBannedRights: ChatBannedRights;
    newBannedRights: ChatBannedRights;
  }
  interface channelAdminLogEventActionStopPoll extends GramJsInstance {
    message: Message;
  }
  interface channelAdminLogEventActionChangeLinkedChat extends GramJsInstance {
    prevValue: int;
    newValue: int;
  }
  interface channelAdminLogEventActionChangeLocation extends GramJsInstance {
    prevValue: ChannelLocation;
    newValue: ChannelLocation;
  }
  interface channelAdminLogEventActionToggleSlowMode extends GramJsInstance {
    prevValue: int;
    newValue: int;
  }
  interface channelAdminLogEvent extends GramJsInstance {
    id: long;
    date: int;
    userId: int;
    action: ChannelAdminLogEventAction;
  }
  interface channels_adminLogResults extends GramJsInstance {
    events: ChannelAdminLogEvent[];
    chats: Chat[];
    users: User[];
  }
  interface channelAdminLogEventsFilter extends GramJsInstance {
    // flags: null;
    join?: true;
    leave?: true;
    invite?: true;
    ban?: true;
    unban?: true;
    kick?: true;
    unkick?: true;
    promote?: true;
    demote?: true;
    info?: true;
    settings?: true;
    pinned?: true;
    edit?: true;
    delete?: true;
  }
  interface popularContact extends GramJsInstance {
    clientId: long;
    importers: int;
  }
  interface messages_favedStickersNotModified extends GramJsInstance {
    
  }
  interface messages_favedStickers extends GramJsInstance {
    hash: int;
    packs: StickerPack[];
    stickers: Document[];
  }
  interface recentMeUrlUnknown extends GramJsInstance {
    url: string;
  }
  interface recentMeUrlUser extends GramJsInstance {
    url: string;
    userId: int;
  }
  interface recentMeUrlChat extends GramJsInstance {
    url: string;
    chatId: int;
  }
  interface recentMeUrlChatInvite extends GramJsInstance {
    url: string;
    chatInvite: ChatInvite;
  }
  interface recentMeUrlStickerSet extends GramJsInstance {
    url: string;
    set: StickerSetCovered;
  }
  interface help_recentMeUrls extends GramJsInstance {
    urls: RecentMeUrl[];
    chats: Chat[];
    users: User[];
  }
  interface inputSingleMedia extends GramJsInstance {
    // flags: null;
    media: InputMedia;
    randomId: long;
    message: string;
    entities?: MessageEntity[];
  }
  interface webAuthorization extends GramJsInstance {
    hash: long;
    botId: int;
    domain: string;
    browser: string;
    platform: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    region: string;
  }
  interface account_webAuthorizations extends GramJsInstance {
    authorizations: WebAuthorization[];
    users: User[];
  }
  interface inputMessageID extends GramJsInstance {
    id: int;
  }
  interface inputMessageReplyTo extends GramJsInstance {
    id: int;
  }
  interface inputMessagePinned extends GramJsInstance {
    
  }
  interface inputDialogPeer extends GramJsInstance {
    peer: InputPeer;
  }
  interface inputDialogPeerFolder extends GramJsInstance {
    folderId: int;
  }
  interface dialogPeer extends GramJsInstance {
    peer: Peer;
  }
  interface dialogPeerFolder extends GramJsInstance {
    folderId: int;
  }
  interface messages_foundStickerSetsNotModified extends GramJsInstance {
    
  }
  interface messages_foundStickerSets extends GramJsInstance {
    hash: int;
    sets: StickerSetCovered[];
  }
  interface fileHash extends GramJsInstance {
    offset: int;
    limit: int;
    hash: bytes;
  }
  interface inputClientProxy extends GramJsInstance {
    address: string;
    port: int;
  }
  interface help_proxyDataEmpty extends GramJsInstance {
    expires: int;
  }
  interface help_proxyDataPromo extends GramJsInstance {
    expires: int;
    peer: Peer;
    chats: Chat[];
    users: User[];
  }
  interface help_termsOfServiceUpdateEmpty extends GramJsInstance {
    expires: int;
  }
  interface help_termsOfServiceUpdate extends GramJsInstance {
    expires: int;
    termsOfService: help_TermsOfService;
  }
  interface inputSecureFileUploaded extends GramJsInstance {
    id: long;
    parts: int;
    md5Checksum: string;
    fileHash: bytes;
    secret: bytes;
  }
  interface inputSecureFile extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface secureFileEmpty extends GramJsInstance {
    
  }
  interface secureFile extends GramJsInstance {
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    date: int;
    fileHash: bytes;
    secret: bytes;
  }
  interface secureData extends GramJsInstance {
    data: bytes;
    dataHash: bytes;
    secret: bytes;
  }
  interface securePlainPhone extends GramJsInstance {
    phone: string;
  }
  interface securePlainEmail extends GramJsInstance {
    email: string;
  }
  interface secureValueTypePersonalDetails extends GramJsInstance {
    
  }
  interface secureValueTypePassport extends GramJsInstance {
    
  }
  interface secureValueTypeDriverLicense extends GramJsInstance {
    
  }
  interface secureValueTypeIdentityCard extends GramJsInstance {
    
  }
  interface secureValueTypeInternalPassport extends GramJsInstance {
    
  }
  interface secureValueTypeAddress extends GramJsInstance {
    
  }
  interface secureValueTypeUtilityBill extends GramJsInstance {
    
  }
  interface secureValueTypeBankStatement extends GramJsInstance {
    
  }
  interface secureValueTypeRentalAgreement extends GramJsInstance {
    
  }
  interface secureValueTypePassportRegistration extends GramJsInstance {
    
  }
  interface secureValueTypeTemporaryRegistration extends GramJsInstance {
    
  }
  interface secureValueTypePhone extends GramJsInstance {
    
  }
  interface secureValueTypeEmail extends GramJsInstance {
    
  }
  interface secureValue extends GramJsInstance {
    // flags: null;
    type: SecureValueType;
    data?: SecureData;
    frontSide?: SecureFile;
    reverseSide?: SecureFile;
    selfie?: SecureFile;
    translation?: SecureFile[];
    files?: SecureFile[];
    plainData?: SecurePlainData;
    hash: bytes;
  }
  interface inputSecureValue extends GramJsInstance {
    // flags: null;
    type: SecureValueType;
    data?: SecureData;
    frontSide?: InputSecureFile;
    reverseSide?: InputSecureFile;
    selfie?: InputSecureFile;
    translation?: InputSecureFile[];
    files?: InputSecureFile[];
    plainData?: SecurePlainData;
  }
  interface secureValueHash extends GramJsInstance {
    type: SecureValueType;
    hash: bytes;
  }
  interface secureValueErrorData extends GramJsInstance {
    type: SecureValueType;
    dataHash: bytes;
    field: string;
    text: string;
  }
  interface secureValueErrorFrontSide extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes;
    text: string;
  }
  interface secureValueErrorReverseSide extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes;
    text: string;
  }
  interface secureValueErrorSelfie extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes;
    text: string;
  }
  interface secureValueErrorFile extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes;
    text: string;
  }
  interface secureValueErrorFiles extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes[];
    text: string;
  }
  interface secureValueError extends GramJsInstance {
    type: SecureValueType;
    hash: bytes;
    text: string;
  }
  interface secureValueErrorTranslationFile extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes;
    text: string;
  }
  interface secureValueErrorTranslationFiles extends GramJsInstance {
    type: SecureValueType;
    fileHash: bytes[];
    text: string;
  }
  interface secureCredentialsEncrypted extends GramJsInstance {
    data: bytes;
    hash: bytes;
    secret: bytes;
  }
  interface account_authorizationForm extends GramJsInstance {
    // flags: null;
    requiredTypes: SecureRequiredType[];
    values: SecureValue[];
    errors: SecureValueError[];
    users: User[];
    privacyPolicyUrl?: string;
  }
  interface account_sentEmailCode extends GramJsInstance {
    emailPattern: string;
    length: int;
  }
  interface help_deepLinkInfoEmpty extends GramJsInstance {
    
  }
  interface help_deepLinkInfo extends GramJsInstance {
    // flags: null;
    updateApp?: true;
    message: string;
    entities?: MessageEntity[];
  }
  interface savedPhoneContact extends GramJsInstance {
    phone: string;
    firstName: string;
    lastName: string;
    date: int;
  }
  interface account_takeout extends GramJsInstance {
    id: long;
  }
  interface passwordKdfAlgoUnknown extends GramJsInstance {
    
  }
  interface passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends GramJsInstance {
    salt1: bytes;
    salt2: bytes;
    g: int;
    p: bytes;
  }
  interface securePasswordKdfAlgoUnknown extends GramJsInstance {
    
  }
  interface securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends GramJsInstance {
    salt: bytes;
  }
  interface securePasswordKdfAlgoSHA512 extends GramJsInstance {
    salt: bytes;
  }
  interface secureSecretSettings extends GramJsInstance {
    secureAlgo: SecurePasswordKdfAlgo;
    secureSecret: bytes;
    secureSecretId: long;
  }
  interface inputCheckPasswordEmpty extends GramJsInstance {
    
  }
  interface inputCheckPasswordSRP extends GramJsInstance {
    srpId: long;
    A: bytes;
    M1: bytes;
  }
  interface secureRequiredType extends GramJsInstance {
    // flags: null;
    nativeNames?: true;
    selfieRequired?: true;
    translationRequired?: true;
    type: SecureValueType;
  }
  interface secureRequiredTypeOneOf extends GramJsInstance {
    types: SecureRequiredType[];
  }
  interface help_passportConfigNotModified extends GramJsInstance {
    
  }
  interface help_passportConfig extends GramJsInstance {
    hash: int;
    countriesLangs: DataJSON;
  }
  interface inputAppEvent extends GramJsInstance {
    time: double;
    type: string;
    peer: long;
    data: JSONValue;
  }
  interface jsonObjectValue extends GramJsInstance {
    key: string;
    value: JSONValue;
  }
  interface jsonNull extends GramJsInstance {
    
  }
  interface jsonBool extends GramJsInstance {
    value: Bool;
  }
  interface jsonNumber extends GramJsInstance {
    value: double;
  }
  interface jsonString extends GramJsInstance {
    value: string;
  }
  interface jsonArray extends GramJsInstance {
    value: JSONValue[];
  }
  interface jsonObject extends GramJsInstance {
    value: JSONObjectValue[];
  }
  interface pageTableCell extends GramJsInstance {
    // flags: null;
    header?: true;
    alignCenter?: true;
    alignRight?: true;
    valignMiddle?: true;
    valignBottom?: true;
    text?: RichText;
    colspan?: int;
    rowspan?: int;
  }
  interface pageTableRow extends GramJsInstance {
    cells: PageTableCell[];
  }
  interface pageCaption extends GramJsInstance {
    text: RichText;
    credit: RichText;
  }
  interface pageListItemText extends GramJsInstance {
    text: RichText;
  }
  interface pageListItemBlocks extends GramJsInstance {
    blocks: PageBlock[];
  }
  interface pageListOrderedItemText extends GramJsInstance {
    num: string;
    text: RichText;
  }
  interface pageListOrderedItemBlocks extends GramJsInstance {
    num: string;
    blocks: PageBlock[];
  }
  interface pageRelatedArticle extends GramJsInstance {
    // flags: null;
    url: string;
    webpageId: long;
    title?: string;
    description?: string;
    photoId?: long;
    author?: string;
    publishedDate?: int;
  }
  interface page extends GramJsInstance {
    // flags: null;
    part?: true;
    rtl?: true;
    v2?: true;
    url: string;
    blocks: PageBlock[];
    photos: Photo[];
    documents: Document[];
  }
  interface help_supportName extends GramJsInstance {
    name: string;
  }
  interface help_userInfoEmpty extends GramJsInstance {
    
  }
  interface help_userInfo extends GramJsInstance {
    message: string;
    entities: MessageEntity[];
    author: string;
    date: int;
  }
  interface pollAnswer extends GramJsInstance {
    text: string;
    option: bytes;
  }
  interface poll extends GramJsInstance {
    id: long;
    // flags: null;
    closed?: true;
    question: string;
    answers: PollAnswer[];
  }
  interface pollAnswerVoters extends GramJsInstance {
    // flags: null;
    chosen?: true;
    option: bytes;
    voters: int;
  }
  interface pollResults extends GramJsInstance {
    // flags: null;
    min?: true;
    results?: PollAnswerVoters[];
    totalVoters?: int;
  }
  interface chatOnlines extends GramJsInstance {
    onlines: int;
  }
  interface statsURL extends GramJsInstance {
    url: string;
  }
  interface chatAdminRights extends GramJsInstance {
    // flags: null;
    changeInfo?: true;
    postMessages?: true;
    editMessages?: true;
    deleteMessages?: true;
    banUsers?: true;
    inviteUsers?: true;
    pinMessages?: true;
    addAdmins?: true;
  }
  interface chatBannedRights extends GramJsInstance {
    // flags: null;
    viewMessages?: true;
    sendMessages?: true;
    sendMedia?: true;
    sendStickers?: true;
    sendGifs?: true;
    sendGames?: true;
    sendInline?: true;
    embedLinks?: true;
    sendPolls?: true;
    changeInfo?: true;
    inviteUsers?: true;
    pinMessages?: true;
    untilDate: int;
  }
  interface inputWallPaper extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputWallPaperSlug extends GramJsInstance {
    slug: string;
  }
  interface account_wallPapersNotModified extends GramJsInstance {
    
  }
  interface account_wallPapers extends GramJsInstance {
    hash: int;
    wallpapers: WallPaper[];
  }
  interface codeSettings extends GramJsInstance {
    // flags: null;
    allowFlashcall?: true;
    currentNumber?: true;
    allowAppHash?: true;
  }
  interface wallPaperSettings extends GramJsInstance {
    // flags: null;
    blur?: true;
    motion?: true;
    backgroundColor?: int;
    intensity?: int;
  }
  interface autoDownloadSettings extends GramJsInstance {
    // flags: null;
    disabled?: true;
    videoPreloadLarge?: true;
    audioPreloadNext?: true;
    phonecallsLessData?: true;
    photoSizeMax: int;
    videoSizeMax: int;
    fileSizeMax: int;
  }
  interface account_autoDownloadSettings extends GramJsInstance {
    low: AutoDownloadSettings;
    medium: AutoDownloadSettings;
    high: AutoDownloadSettings;
  }
  interface emojiKeyword extends GramJsInstance {
    keyword: string;
    emoticons: string[];
  }
  interface emojiKeywordDeleted extends GramJsInstance {
    keyword: string;
    emoticons: string[];
  }
  interface emojiKeywordsDifference extends GramJsInstance {
    langCode: string;
    fromVersion: int;
    version: int;
    keywords: EmojiKeyword[];
  }
  interface emojiURL extends GramJsInstance {
    url: string;
  }
  interface emojiLanguage extends GramJsInstance {
    langCode: string;
  }
  interface fileLocationToBeDeprecated extends GramJsInstance {
    volumeId: long;
    localId: int;
  }
  interface folder extends GramJsInstance {
    // flags: null;
    autofillNewBroadcasts?: true;
    autofillPublicGroups?: true;
    autofillNewCorrespondents?: true;
    id: int;
    title: string;
    photo?: ChatPhoto;
  }
  interface inputFolderPeer extends GramJsInstance {
    peer: InputPeer;
    folderId: int;
  }
  interface folderPeer extends GramJsInstance {
    peer: Peer;
    folderId: int;
  }
  interface messages_searchCounter extends GramJsInstance {
    // flags: null;
    inexact?: true;
    filter: MessagesFilter;
    count: int;
  }
  interface urlAuthResultRequest extends GramJsInstance {
    // flags: null;
    requestWriteAccess?: true;
    bot: User;
    domain: string;
  }
  interface urlAuthResultAccepted extends GramJsInstance {
    url: string;
  }
  interface urlAuthResultDefault extends GramJsInstance {
    
  }
  interface channelLocationEmpty extends GramJsInstance {
    
  }
  interface channelLocation extends GramJsInstance {
    geoPoint: GeoPoint;
    address: string;
  }
  interface peerLocated extends GramJsInstance {
    peer: Peer;
    expires: int;
    distance: int;
  }
  interface restrictionReason extends GramJsInstance {
    platform: string;
    reason: string;
    text: string;
  }
  interface inputTheme extends GramJsInstance {
    id: long;
    accessHash: long;
  }
  interface inputThemeSlug extends GramJsInstance {
    slug: string;
  }
  interface themeDocumentNotModified extends GramJsInstance {
    
  }
  interface theme extends GramJsInstance {
    // flags: null;
    creator?: true;
    default?: true;
    id: long;
    accessHash: long;
    slug: string;
    title: string;
    document?: Document;
    installsCount: int;
  }
  interface account_themesNotModified extends GramJsInstance {
    
  }
  interface account_themes extends GramJsInstance {
    hash: int;
    themes: Theme[];
  }
  interface resPQ extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    pq: bytes;
    serverPublicKeyFingerprints: long[];
  }
  interface pQInnerData extends GramJsInstance {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
  }
  interface pQInnerDataDc extends GramJsInstance {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
  }
  interface pQInnerDataTemp extends GramJsInstance {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    expiresIn: int;
  }
  interface pQInnerDataTempDc extends GramJsInstance {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
    expiresIn: int;
  }
  interface serverDHParamsFail extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    newNonceHash: int128;
  }
  interface serverDHParamsOk extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    encryptedAnswer: bytes;
  }
  interface serverDHInnerData extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    g: int;
    dhPrime: bytes;
    gA: bytes;
    serverTime: int;
  }
  interface clientDHInnerData extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    retryId: long;
    gB: bytes;
  }
  interface dhGenOk extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    newNonceHash1: int128;
  }
  interface dhGenRetry extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    newNonceHash2: int128;
  }
  interface dhGenFail extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    newNonceHash3: int128;
  }
  interface destroyAuthKeyOk extends GramJsInstance {
    
  }
  interface destroyAuthKeyNone extends GramJsInstance {
    
  }
  interface destroyAuthKeyFail extends GramJsInstance {
    
  }
  interface msgsAck extends GramJsInstance {
    msgIds: long[];
  }
  interface badMsgNotification extends GramJsInstance {
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
  }
  interface badServerSalt extends GramJsInstance {
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
    newServerSalt: long;
  }
  interface msgsStateReq extends GramJsInstance {
    msgIds: long[];
  }
  interface msgsStateInfo extends GramJsInstance {
    reqMsgId: long;
    info: string;
  }
  interface msgsAllInfo extends GramJsInstance {
    msgIds: long[];
    info: string;
  }
  interface msgDetailedInfo extends GramJsInstance {
    msgId: long;
    answerMsgId: long;
    bytes: int;
    status: int;
  }
  interface msgNewDetailedInfo extends GramJsInstance {
    answerMsgId: long;
    bytes: int;
    status: int;
  }
  interface msgResendReq extends GramJsInstance {
    msgIds: long[];
  }
  interface rpcError extends GramJsInstance {
    errorCode: int;
    errorMessage: string;
  }
  interface rpcAnswerUnknown extends GramJsInstance {
    
  }
  interface rpcAnswerDroppedRunning extends GramJsInstance {
    
  }
  interface rpcAnswerDropped extends GramJsInstance {
    msgId: long;
    seqNo: int;
    bytes: int;
  }
  interface futureSalt extends GramJsInstance {
    validSince: int;
    validUntil: int;
    salt: long;
  }
  interface futureSalts extends GramJsInstance {
    reqMsgId: long;
    now: int;
    salts: future_salt[];
  }
  interface pong extends GramJsInstance {
    msgId: long;
    pingId: long;
  }
  interface destroySessionOk extends GramJsInstance {
    sessionId: long;
  }
  interface destroySessionNone extends GramJsInstance {
    sessionId: long;
  }
  interface newSessionCreated extends GramJsInstance {
    firstMsgId: long;
    uniqueId: long;
    serverSalt: long;
  }
  interface httpWait extends GramJsInstance {
    maxDelay: int;
    waitAfter: int;
    maxWait: int;
  }
  interface ipPort extends GramJsInstance {
    ipv4: int;
    port: int;
  }
  interface ipPortSecret extends GramJsInstance {
    ipv4: int;
    port: int;
    secret: bytes;
  }
  interface accessPointRule extends GramJsInstance {
    phonePrefixRules: string;
    dcId: int;
    ips: IpPort[];
  }
  interface help_configSimple extends GramJsInstance {
    date: int;
    expires: int;
    rules: AccessPointRule[];
  }
  interface tlsClientHello extends GramJsInstance {
    blocks: TlsBlock[];
  }
  interface tlsBlockString extends GramJsInstance {
    data: string;
  }
  interface tlsBlockRandom extends GramJsInstance {
    length: int;
  }
  interface tlsBlockZero extends GramJsInstance {
    length: int;
  }
  interface tlsBlockDomain extends GramJsInstance {
    
  }
  interface tlsBlockGrease extends GramJsInstance {
    seed: int;
  }
  interface tlsBlockScope extends GramJsInstance {
    entries: TlsBlock[];
  }

  type InputPeer = inputPeerEmpty | inputPeerSelf | inputPeerChat | inputPeerUser | inputPeerChannel | inputPeerUserFromMessage | inputPeerChannelFromMessage;
  type InputUser = inputUserEmpty | inputUserSelf | inputUser | inputUserFromMessage;
  type InputContact = inputPhoneContact;
  type InputFile = inputFile | inputFileBig;
  type InputMedia = inputMediaEmpty | inputMediaUploadedPhoto | inputMediaPhoto | inputMediaGeoPoint | inputMediaContact | inputMediaUploadedDocument | inputMediaDocument | inputMediaVenue | inputMediaGifExternal | inputMediaPhotoExternal | inputMediaDocumentExternal | inputMediaGame | inputMediaInvoice | inputMediaGeoLive | inputMediaPoll;
  type InputChatPhoto = inputChatPhotoEmpty | inputChatUploadedPhoto | inputChatPhoto;
  type InputGeoPoint = inputGeoPointEmpty | inputGeoPoint;
  type InputPhoto = inputPhotoEmpty | inputPhoto;
  type InputFileLocation = inputFileLocation | inputEncryptedFileLocation | inputDocumentFileLocation | inputSecureFileLocation | inputTakeoutFileLocation | inputPhotoFileLocation | inputPeerPhotoFileLocation | inputStickerSetThumb;
  type Peer = peerUser | peerChat | peerChannel;
  type storage_FileType = storage_fileUnknown | storage_filePartial | storage_fileJpeg | storage_fileGif | storage_filePng | storage_filePdf | storage_fileMp3 | storage_fileMov | storage_fileMp4 | storage_fileWebp;
  type User = userEmpty | user;
  type UserProfilePhoto = userProfilePhotoEmpty | userProfilePhoto;
  type UserStatus = userStatusEmpty | userStatusOnline | userStatusOffline | userStatusRecently | userStatusLastWeek | userStatusLastMonth;
  type Chat = chatEmpty | chat | chatForbidden | channel | channelForbidden;
  type ChatFull = chatFull | channelFull;
  type ChatParticipant = chatParticipant | chatParticipantCreator | chatParticipantAdmin;
  type ChatParticipants = chatParticipantsForbidden | chatParticipants;
  type ChatPhoto = chatPhotoEmpty | chatPhoto;
  type Message = messageEmpty | message | messageService;
  type MessageMedia = messageMediaEmpty | messageMediaPhoto | messageMediaGeo | messageMediaContact | messageMediaUnsupported | messageMediaDocument | messageMediaWebPage | messageMediaVenue | messageMediaGame | messageMediaInvoice | messageMediaGeoLive | messageMediaPoll;
  type MessageAction = messageActionEmpty | messageActionChatCreate | messageActionChatEditTitle | messageActionChatEditPhoto | messageActionChatDeletePhoto | messageActionChatAddUser | messageActionChatDeleteUser | messageActionChatJoinedByLink | messageActionChannelCreate | messageActionChatMigrateTo | messageActionChannelMigrateFrom | messageActionPinMessage | messageActionHistoryClear | messageActionGameScore | messageActionPaymentSentMe | messageActionPaymentSent | messageActionPhoneCall | messageActionScreenshotTaken | messageActionCustomAction | messageActionBotAllowed | messageActionSecureValuesSentMe | messageActionSecureValuesSent | messageActionContactSignUp;
  type Dialog = dialog | dialogFolder;
  type Photo = photoEmpty | photo;
  type PhotoSize = photoSizeEmpty | photoSize | photoCachedSize | photoStrippedSize;
  type GeoPoint = geoPointEmpty | geoPoint;
  type auth_SentCode = auth_sentCode;
  type auth_Authorization = auth_authorization | auth_authorizationSignUpRequired;
  type auth_ExportedAuthorization = auth_exportedAuthorization;
  type InputNotifyPeer = inputNotifyPeer | inputNotifyUsers | inputNotifyChats | inputNotifyBroadcasts;
  type InputPeerNotifySettings = inputPeerNotifySettings;
  type PeerNotifySettings = peerNotifySettings;
  type PeerSettings = peerSettings;
  type WallPaper = wallPaper;
  type ReportReason = inputReportReasonSpam | inputReportReasonViolence | inputReportReasonPornography | inputReportReasonChildAbuse | inputReportReasonOther | inputReportReasonCopyright | inputReportReasonGeoIrrelevant;
  type UserFull = userFull;
  type Contact = contact;
  type ImportedContact = importedContact;
  type ContactBlocked = contactBlocked;
  type ContactStatus = contactStatus;
  type contacts_Contacts = contacts_contactsNotModified | contacts_contacts;
  type contacts_ImportedContacts = contacts_importedContacts;
  type contacts_Blocked = contacts_blocked | contacts_blockedSlice;
  type messages_Dialogs = messages_dialogs | messages_dialogsSlice | messages_dialogsNotModified;
  type messages_Messages = messages_messages | messages_messagesSlice | messages_channelMessages | messages_messagesNotModified;
  type messages_Chats = messages_chats | messages_chatsSlice;
  type messages_ChatFull = messages_chatFull;
  type messages_AffectedHistory = messages_affectedHistory;
  type MessagesFilter = inputMessagesFilterEmpty | inputMessagesFilterPhotos | inputMessagesFilterVideo | inputMessagesFilterPhotoVideo | inputMessagesFilterDocument | inputMessagesFilterUrl | inputMessagesFilterGif | inputMessagesFilterVoice | inputMessagesFilterMusic | inputMessagesFilterChatPhotos | inputMessagesFilterPhoneCalls | inputMessagesFilterRoundVoice | inputMessagesFilterRoundVideo | inputMessagesFilterMyMentions | inputMessagesFilterGeo | inputMessagesFilterContacts;
  type Update = updateNewMessage | updateMessageID | updateDeleteMessages | updateUserTyping | updateChatUserTyping | updateChatParticipants | updateUserStatus | updateUserName | updateUserPhoto | updateNewEncryptedMessage | updateEncryptedChatTyping | updateEncryption | updateEncryptedMessagesRead | updateChatParticipantAdd | updateChatParticipantDelete | updateDcOptions | updateUserBlocked | updateNotifySettings | updateServiceNotification | updatePrivacy | updateUserPhone | updateReadHistoryInbox | updateReadHistoryOutbox | updateWebPage | updateReadMessagesContents | updateChannelTooLong | updateChannel | updateNewChannelMessage | updateReadChannelInbox | updateDeleteChannelMessages | updateChannelMessageViews | updateChatParticipantAdmin | updateNewStickerSet | updateStickerSetsOrder | updateStickerSets | updateSavedGifs | updateBotInlineQuery | updateBotInlineSend | updateEditChannelMessage | updateChannelPinnedMessage | updateBotCallbackQuery | updateEditMessage | updateInlineBotCallbackQuery | updateReadChannelOutbox | updateDraftMessage | updateReadFeaturedStickers | updateRecentStickers | updateConfig | updatePtsChanged | updateChannelWebPage | updateDialogPinned | updatePinnedDialogs | updateBotWebhookJSON | updateBotWebhookJSONQuery | updateBotShippingQuery | updateBotPrecheckoutQuery | updatePhoneCall | updateLangPackTooLong | updateLangPack | updateFavedStickers | updateChannelReadMessagesContents | updateContactsReset | updateChannelAvailableMessages | updateDialogUnreadMark | updateUserPinnedMessage | updateChatPinnedMessage | updateMessagePoll | updateChatDefaultBannedRights | updateFolderPeers | updatePeerSettings | updatePeerLocated | updateNewScheduledMessage | updateDeleteScheduledMessages | updateTheme;
  type updates_State = updates_state;
  type updates_Difference = updates_differenceEmpty | updates_difference | updates_differenceSlice | updates_differenceTooLong;
  type Updates = updatesTooLong | updateShortMessage | updateShortChatMessage | updateShort | updatesCombined | updates | updateShortSentMessage;
  type photos_Photos = photos_photos | photos_photosSlice;
  type photos_Photo = photos_photo;
  type upload_File = upload_file | upload_fileCdnRedirect;
  type DcOption = dcOption;
  type Config = config;
  type NearestDc = nearestDc;
  type help_AppUpdate = help_appUpdate | help_noAppUpdate;
  type help_InviteText = help_inviteText;
  type EncryptedChat = encryptedChatEmpty | encryptedChatWaiting | encryptedChatRequested | encryptedChat | encryptedChatDiscarded;
  type InputEncryptedChat = inputEncryptedChat;
  type EncryptedFile = encryptedFileEmpty | encryptedFile;
  type InputEncryptedFile = inputEncryptedFileEmpty | inputEncryptedFileUploaded | inputEncryptedFile | inputEncryptedFileBigUploaded;
  type EncryptedMessage = encryptedMessage | encryptedMessageService;
  type messages_DhConfig = messages_dhConfigNotModified | messages_dhConfig;
  type messages_SentEncryptedMessage = messages_sentEncryptedMessage | messages_sentEncryptedFile;
  type InputDocument = inputDocumentEmpty | inputDocument;
  type Document = documentEmpty | document;
  type help_Support = help_support;
  type NotifyPeer = notifyPeer | notifyUsers | notifyChats | notifyBroadcasts;
  type SendMessageAction = sendMessageTypingAction | sendMessageCancelAction | sendMessageRecordVideoAction | sendMessageUploadVideoAction | sendMessageRecordAudioAction | sendMessageUploadAudioAction | sendMessageUploadPhotoAction | sendMessageUploadDocumentAction | sendMessageGeoLocationAction | sendMessageChooseContactAction | sendMessageGamePlayAction | sendMessageRecordRoundAction | sendMessageUploadRoundAction;
  type contacts_Found = contacts_found;
  type InputPrivacyKey = inputPrivacyKeyStatusTimestamp | inputPrivacyKeyChatInvite | inputPrivacyKeyPhoneCall | inputPrivacyKeyPhoneP2P | inputPrivacyKeyForwards | inputPrivacyKeyProfilePhoto | inputPrivacyKeyPhoneNumber | inputPrivacyKeyAddedByPhone;
  type PrivacyKey = privacyKeyStatusTimestamp | privacyKeyChatInvite | privacyKeyPhoneCall | privacyKeyPhoneP2P | privacyKeyForwards | privacyKeyProfilePhoto | privacyKeyPhoneNumber | privacyKeyAddedByPhone;
  type InputPrivacyRule = inputPrivacyValueAllowContacts | inputPrivacyValueAllowAll | inputPrivacyValueAllowUsers | inputPrivacyValueDisallowContacts | inputPrivacyValueDisallowAll | inputPrivacyValueDisallowUsers | inputPrivacyValueAllowChatParticipants | inputPrivacyValueDisallowChatParticipants;
  type PrivacyRule = privacyValueAllowContacts | privacyValueAllowAll | privacyValueAllowUsers | privacyValueDisallowContacts | privacyValueDisallowAll | privacyValueDisallowUsers | privacyValueAllowChatParticipants | privacyValueDisallowChatParticipants;
  type account_PrivacyRules = account_privacyRules;
  type AccountDaysTTL = accountDaysTTL;
  type DocumentAttribute = documentAttributeImageSize | documentAttributeAnimated | documentAttributeSticker | documentAttributeVideo | documentAttributeAudio | documentAttributeFilename | documentAttributeHasStickers;
  type messages_Stickers = messages_stickersNotModified | messages_stickers;
  type StickerPack = stickerPack;
  type messages_AllStickers = messages_allStickersNotModified | messages_allStickers;
  type messages_AffectedMessages = messages_affectedMessages;
  type WebPage = webPageEmpty | webPagePending | webPage | webPageNotModified;
  type Authorization = authorization;
  type account_Authorizations = account_authorizations;
  type account_Password = account_password;
  type account_PasswordSettings = account_passwordSettings;
  type account_PasswordInputSettings = account_passwordInputSettings;
  type auth_PasswordRecovery = auth_passwordRecovery;
  type ReceivedNotifyMessage = receivedNotifyMessage;
  type ExportedChatInvite = chatInviteEmpty | chatInviteExported;
  type ChatInvite = chatInviteAlready | chatInvite;
  type InputStickerSet = inputStickerSetEmpty | inputStickerSetID | inputStickerSetShortName | inputStickerSetAnimatedEmoji;
  type StickerSet = stickerSet;
  type messages_StickerSet = messages_stickerSet;
  type BotCommand = botCommand;
  type BotInfo = botInfo;
  type KeyboardButton = keyboardButton | keyboardButtonUrl | keyboardButtonCallback | keyboardButtonRequestPhone | keyboardButtonRequestGeoLocation | keyboardButtonSwitchInline | keyboardButtonGame | keyboardButtonBuy | keyboardButtonUrlAuth | inputKeyboardButtonUrlAuth;
  type KeyboardButtonRow = keyboardButtonRow;
  type ReplyMarkup = replyKeyboardHide | replyKeyboardForceReply | replyKeyboardMarkup | replyInlineMarkup;
  type MessageEntity = messageEntityUnknown | messageEntityMention | messageEntityHashtag | messageEntityBotCommand | messageEntityUrl | messageEntityEmail | messageEntityBold | messageEntityItalic | messageEntityCode | messageEntityPre | messageEntityTextUrl | messageEntityMentionName | inputMessageEntityMentionName | messageEntityPhone | messageEntityCashtag | messageEntityUnderline | messageEntityStrike | messageEntityBlockquote;
  type InputChannel = inputChannelEmpty | inputChannel | inputChannelFromMessage;
  type contacts_ResolvedPeer = contacts_resolvedPeer;
  type MessageRange = messageRange;
  type updates_ChannelDifference = updates_channelDifferenceEmpty | updates_channelDifferenceTooLong | updates_channelDifference;
  type ChannelMessagesFilter = channelMessagesFilterEmpty | channelMessagesFilter;
  type ChannelParticipant = channelParticipant | channelParticipantSelf | channelParticipantCreator | channelParticipantAdmin | channelParticipantBanned;
  type ChannelParticipantsFilter = channelParticipantsRecent | channelParticipantsAdmins | channelParticipantsKicked | channelParticipantsBots | channelParticipantsBanned | channelParticipantsSearch | channelParticipantsContacts;
  type channels_ChannelParticipants = channels_channelParticipants | channels_channelParticipantsNotModified;
  type channels_ChannelParticipant = channels_channelParticipant;
  type help_TermsOfService = help_termsOfService;
  type FoundGif = foundGif | foundGifCached;
  type messages_FoundGifs = messages_foundGifs;
  type messages_SavedGifs = messages_savedGifsNotModified | messages_savedGifs;
  type InputBotInlineMessage = inputBotInlineMessageMediaAuto | inputBotInlineMessageText | inputBotInlineMessageMediaGeo | inputBotInlineMessageMediaVenue | inputBotInlineMessageMediaContact | inputBotInlineMessageGame;
  type InputBotInlineResult = inputBotInlineResult | inputBotInlineResultPhoto | inputBotInlineResultDocument | inputBotInlineResultGame;
  type BotInlineMessage = botInlineMessageMediaAuto | botInlineMessageText | botInlineMessageMediaGeo | botInlineMessageMediaVenue | botInlineMessageMediaContact;
  type BotInlineResult = botInlineResult | botInlineMediaResult;
  type messages_BotResults = messages_botResults;
  type ExportedMessageLink = exportedMessageLink;
  type MessageFwdHeader = messageFwdHeader;
  type auth_CodeType = auth_codeTypeSms | auth_codeTypeCall | auth_codeTypeFlashCall;
  type auth_SentCodeType = auth_sentCodeTypeApp | auth_sentCodeTypeSms | auth_sentCodeTypeCall | auth_sentCodeTypeFlashCall;
  type messages_BotCallbackAnswer = messages_botCallbackAnswer;
  type messages_MessageEditData = messages_messageEditData;
  type InputBotInlineMessageID = inputBotInlineMessageID;
  type InlineBotSwitchPM = inlineBotSwitchPM;
  type messages_PeerDialogs = messages_peerDialogs;
  type TopPeer = topPeer;
  type TopPeerCategory = topPeerCategoryBotsPM | topPeerCategoryBotsInline | topPeerCategoryCorrespondents | topPeerCategoryGroups | topPeerCategoryChannels | topPeerCategoryPhoneCalls | topPeerCategoryForwardUsers | topPeerCategoryForwardChats;
  type TopPeerCategoryPeers = topPeerCategoryPeers;
  type contacts_TopPeers = contacts_topPeersNotModified | contacts_topPeers | contacts_topPeersDisabled;
  type DraftMessage = draftMessageEmpty | draftMessage;
  type messages_FeaturedStickers = messages_featuredStickersNotModified | messages_featuredStickers;
  type messages_RecentStickers = messages_recentStickersNotModified | messages_recentStickers;
  type messages_ArchivedStickers = messages_archivedStickers;
  type messages_StickerSetInstallResult = messages_stickerSetInstallResultSuccess | messages_stickerSetInstallResultArchive;
  type StickerSetCovered = stickerSetCovered | stickerSetMultiCovered;
  type MaskCoords = maskCoords;
  type InputStickeredMedia = inputStickeredMediaPhoto | inputStickeredMediaDocument;
  type Game = game;
  type InputGame = inputGameID | inputGameShortName;
  type HighScore = highScore;
  type messages_HighScores = messages_highScores;
  type RichText = textEmpty | textPlain | textBold | textItalic | textUnderline | textStrike | textFixed | textUrl | textEmail | textConcat | textSubscript | textSuperscript | textMarked | textPhone | textImage | textAnchor;
  type PageBlock = pageBlockUnsupported | pageBlockTitle | pageBlockSubtitle | pageBlockAuthorDate | pageBlockHeader | pageBlockSubheader | pageBlockParagraph | pageBlockPreformatted | pageBlockFooter | pageBlockDivider | pageBlockAnchor | pageBlockList | pageBlockBlockquote | pageBlockPullquote | pageBlockPhoto | pageBlockVideo | pageBlockCover | pageBlockEmbed | pageBlockEmbedPost | pageBlockCollage | pageBlockSlideshow | pageBlockChannel | pageBlockAudio | pageBlockKicker | pageBlockTable | pageBlockOrderedList | pageBlockDetails | pageBlockRelatedArticles | pageBlockMap;
  type PhoneCallDiscardReason = phoneCallDiscardReasonMissed | phoneCallDiscardReasonDisconnect | phoneCallDiscardReasonHangup | phoneCallDiscardReasonBusy;
  type DataJSON = dataJSON;
  type LabeledPrice = labeledPrice;
  type Invoice = invoice;
  type PaymentCharge = paymentCharge;
  type PostAddress = postAddress;
  type PaymentRequestedInfo = paymentRequestedInfo;
  type PaymentSavedCredentials = paymentSavedCredentialsCard;
  type WebDocument = webDocument | webDocumentNoProxy;
  type InputWebDocument = inputWebDocument;
  type InputWebFileLocation = inputWebFileLocation | inputWebFileGeoPointLocation;
  type upload_WebFile = upload_webFile;
  type payments_PaymentForm = payments_paymentForm;
  type payments_ValidatedRequestedInfo = payments_validatedRequestedInfo;
  type payments_PaymentResult = payments_paymentResult | payments_paymentVerificationNeeded;
  type payments_PaymentReceipt = payments_paymentReceipt;
  type payments_SavedInfo = payments_savedInfo;
  type InputPaymentCredentials = inputPaymentCredentialsSaved | inputPaymentCredentials | inputPaymentCredentialsApplePay | inputPaymentCredentialsAndroidPay;
  type account_TmpPassword = account_tmpPassword;
  type ShippingOption = shippingOption;
  type InputStickerSetItem = inputStickerSetItem;
  type InputPhoneCall = inputPhoneCall;
  type PhoneCall = phoneCallEmpty | phoneCallWaiting | phoneCallRequested | phoneCallAccepted | phoneCall | phoneCallDiscarded;
  type PhoneConnection = phoneConnection;
  type PhoneCallProtocol = phoneCallProtocol;
  type phone_PhoneCall = phone_phoneCall;
  type upload_CdnFile = upload_cdnFileReuploadNeeded | upload_cdnFile;
  type CdnPublicKey = cdnPublicKey;
  type CdnConfig = cdnConfig;
  type LangPackString = langPackString | langPackStringPluralized | langPackStringDeleted;
  type LangPackDifference = langPackDifference;
  type LangPackLanguage = langPackLanguage;
  type ChannelAdminLogEventAction = channelAdminLogEventActionChangeTitle | channelAdminLogEventActionChangeAbout | channelAdminLogEventActionChangeUsername | channelAdminLogEventActionChangePhoto | channelAdminLogEventActionToggleInvites | channelAdminLogEventActionToggleSignatures | channelAdminLogEventActionUpdatePinned | channelAdminLogEventActionEditMessage | channelAdminLogEventActionDeleteMessage | channelAdminLogEventActionParticipantJoin | channelAdminLogEventActionParticipantLeave | channelAdminLogEventActionParticipantInvite | channelAdminLogEventActionParticipantToggleBan | channelAdminLogEventActionParticipantToggleAdmin | channelAdminLogEventActionChangeStickerSet | channelAdminLogEventActionTogglePreHistoryHidden | channelAdminLogEventActionDefaultBannedRights | channelAdminLogEventActionStopPoll | channelAdminLogEventActionChangeLinkedChat | channelAdminLogEventActionChangeLocation | channelAdminLogEventActionToggleSlowMode;
  type ChannelAdminLogEvent = channelAdminLogEvent;
  type channels_AdminLogResults = channels_adminLogResults;
  type ChannelAdminLogEventsFilter = channelAdminLogEventsFilter;
  type PopularContact = popularContact;
  type messages_FavedStickers = messages_favedStickersNotModified | messages_favedStickers;
  type RecentMeUrl = recentMeUrlUnknown | recentMeUrlUser | recentMeUrlChat | recentMeUrlChatInvite | recentMeUrlStickerSet;
  type help_RecentMeUrls = help_recentMeUrls;
  type InputSingleMedia = inputSingleMedia;
  type WebAuthorization = webAuthorization;
  type account_WebAuthorizations = account_webAuthorizations;
  type InputMessage = inputMessageID | inputMessageReplyTo | inputMessagePinned;
  type InputDialogPeer = inputDialogPeer | inputDialogPeerFolder;
  type DialogPeer = dialogPeer | dialogPeerFolder;
  type messages_FoundStickerSets = messages_foundStickerSetsNotModified | messages_foundStickerSets;
  type FileHash = fileHash;
  type InputClientProxy = inputClientProxy;
  type help_ProxyData = help_proxyDataEmpty | help_proxyDataPromo;
  type help_TermsOfServiceUpdate = help_termsOfServiceUpdateEmpty | help_termsOfServiceUpdate;
  type InputSecureFile = inputSecureFileUploaded | inputSecureFile;
  type SecureFile = secureFileEmpty | secureFile;
  type SecureData = secureData;
  type SecurePlainData = securePlainPhone | securePlainEmail;
  type SecureValueType = secureValueTypePersonalDetails | secureValueTypePassport | secureValueTypeDriverLicense | secureValueTypeIdentityCard | secureValueTypeInternalPassport | secureValueTypeAddress | secureValueTypeUtilityBill | secureValueTypeBankStatement | secureValueTypeRentalAgreement | secureValueTypePassportRegistration | secureValueTypeTemporaryRegistration | secureValueTypePhone | secureValueTypeEmail;
  type SecureValue = secureValue;
  type InputSecureValue = inputSecureValue;
  type SecureValueHash = secureValueHash;
  type SecureValueError = secureValueErrorData | secureValueErrorFrontSide | secureValueErrorReverseSide | secureValueErrorSelfie | secureValueErrorFile | secureValueErrorFiles | secureValueError | secureValueErrorTranslationFile | secureValueErrorTranslationFiles;
  type SecureCredentialsEncrypted = secureCredentialsEncrypted;
  type account_AuthorizationForm = account_authorizationForm;
  type account_SentEmailCode = account_sentEmailCode;
  type help_DeepLinkInfo = help_deepLinkInfoEmpty | help_deepLinkInfo;
  type SavedContact = savedPhoneContact;
  type account_Takeout = account_takeout;
  type PasswordKdfAlgo = passwordKdfAlgoUnknown | passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
  type SecurePasswordKdfAlgo = securePasswordKdfAlgoUnknown | securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | securePasswordKdfAlgoSHA512;
  type SecureSecretSettings = secureSecretSettings;
  type InputCheckPasswordSRP = inputCheckPasswordEmpty | inputCheckPasswordSRP;
  type SecureRequiredType = secureRequiredType | secureRequiredTypeOneOf;
  type help_PassportConfig = help_passportConfigNotModified | help_passportConfig;
  type InputAppEvent = inputAppEvent;
  type JSONObjectValue = jsonObjectValue;
  type JSONValue = jsonNull | jsonBool | jsonNumber | jsonString | jsonArray | jsonObject;
  type PageTableCell = pageTableCell;
  type PageTableRow = pageTableRow;
  type PageCaption = pageCaption;
  type PageListItem = pageListItemText | pageListItemBlocks;
  type PageListOrderedItem = pageListOrderedItemText | pageListOrderedItemBlocks;
  type PageRelatedArticle = pageRelatedArticle;
  type Page = page;
  type help_SupportName = help_supportName;
  type help_UserInfo = help_userInfoEmpty | help_userInfo;
  type PollAnswer = pollAnswer;
  type Poll = poll;
  type PollAnswerVoters = pollAnswerVoters;
  type PollResults = pollResults;
  type ChatOnlines = chatOnlines;
  type StatsURL = statsURL;
  type ChatAdminRights = chatAdminRights;
  type ChatBannedRights = chatBannedRights;
  type InputWallPaper = inputWallPaper | inputWallPaperSlug;
  type account_WallPapers = account_wallPapersNotModified | account_wallPapers;
  type CodeSettings = codeSettings;
  type WallPaperSettings = wallPaperSettings;
  type AutoDownloadSettings = autoDownloadSettings;
  type account_AutoDownloadSettings = account_autoDownloadSettings;
  type EmojiKeyword = emojiKeyword | emojiKeywordDeleted;
  type EmojiKeywordsDifference = emojiKeywordsDifference;
  type EmojiURL = emojiURL;
  type EmojiLanguage = emojiLanguage;
  type FileLocation = fileLocationToBeDeprecated;
  type Folder = folder;
  type InputFolderPeer = inputFolderPeer;
  type FolderPeer = folderPeer;
  type messages_SearchCounter = messages_searchCounter;
  type UrlAuthResult = urlAuthResultRequest | urlAuthResultAccepted | urlAuthResultDefault;
  type ChannelLocation = channelLocationEmpty | channelLocation;
  type PeerLocated = peerLocated;
  type RestrictionReason = restrictionReason;
  type InputTheme = inputTheme | inputThemeSlug;
  type Theme = themeDocumentNotModified | theme;
  type account_Themes = account_themesNotModified | account_themes;
  type ResPQ = resPQ;
  type P_Q_inner_data = pQInnerData | pQInnerDataDc | pQInnerDataTemp | pQInnerDataTempDc;
  type Server_DH_Params = serverDHParamsFail | serverDHParamsOk;
  type Server_DH_inner_data = serverDHInnerData;
  type Client_DH_Inner_Data = clientDHInnerData;
  type Set_client_DH_params_answer = dhGenOk | dhGenRetry | dhGenFail;
  type DestroyAuthKeyRes = destroyAuthKeyOk | destroyAuthKeyNone | destroyAuthKeyFail;
  type MsgsAck = msgsAck;
  type BadMsgNotification = badMsgNotification | badServerSalt;
  type MsgsStateReq = msgsStateReq;
  type MsgsStateInfo = msgsStateInfo;
  type MsgsAllInfo = msgsAllInfo;
  type MsgDetailedInfo = msgDetailedInfo | msgNewDetailedInfo;
  type MsgResendReq = msgResendReq;
  type RpcError = rpcError;
  type RpcDropAnswer = rpcAnswerUnknown | rpcAnswerDroppedRunning | rpcAnswerDropped;
  type FutureSalt = futureSalt;
  type FutureSalts = futureSalts;
  type Pong = pong;
  type DestroySessionRes = destroySessionOk | destroySessionNone;
  type NewSession = newSessionCreated;
  type HttpWait = httpWait;
  type IpPort = ipPort | ipPortSecret;
  type AccessPointRule = accessPointRule;
  type help_ConfigSimple = help_configSimple;
  type TlsClientHello = tlsClientHello;
  type TlsBlock = tlsBlockString | tlsBlockRandom | tlsBlockZero | tlsBlockDomain | tlsBlockGrease | tlsBlockScope;

  interface invokeAfterMsgRequest extends GramJsInstance {
    msgId: long;
    query: X;
  }
  interface invokeAfterMsgsRequest extends GramJsInstance {
    msgIds: long[];
    query: X;
  }
  interface initConnectionRequest extends GramJsInstance {
    // flags: null;
    apiId: int;
    deviceModel: string;
    systemVersion: string;
    appVersion: string;
    systemLangCode: string;
    langPack: string;
    langCode: string;
    proxy?: InputClientProxy;
    query: X;
  }
  interface invokeWithLayerRequest extends GramJsInstance {
    layer: int;
    query: X;
  }
  interface invokeWithoutUpdatesRequest extends GramJsInstance {
    query: X;
  }
  interface invokeWithMessagesRangeRequest extends GramJsInstance {
    range: MessageRange;
    query: X;
  }
  interface invokeWithTakeoutRequest extends GramJsInstance {
    takeoutId: long;
    query: X;
  }
  interface auth_sendCodeRequest extends GramJsInstance {
    phoneNumber: string;
    apiId: int;
    apiHash: string;
    settings: CodeSettings;
  }
  interface auth_signUpRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
    firstName: string;
    lastName: string;
  }
  interface auth_signInRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
    phoneCode: string;
  }
  interface auth_logOutRequest extends GramJsInstance {
    
  }
  interface auth_resetAuthorizationsRequest extends GramJsInstance {
    
  }
  interface auth_exportAuthorizationRequest extends GramJsInstance {
    dcId: int;
  }
  interface auth_importAuthorizationRequest extends GramJsInstance {
    id: int;
    bytes: bytes;
  }
  interface auth_bindTempAuthKeyRequest extends GramJsInstance {
    permAuthKeyId: long;
    nonce: long;
    expiresAt: int;
    encryptedMessage: bytes;
  }
  interface auth_importBotAuthorizationRequest extends GramJsInstance {
    // flags: int;
    apiId: int;
    apiHash: string;
    botAuthToken: string;
  }
  interface auth_checkPasswordRequest extends GramJsInstance {
    password: InputCheckPasswordSRP;
  }
  interface auth_requestPasswordRecoveryRequest extends GramJsInstance {
    
  }
  interface auth_recoverPasswordRequest extends GramJsInstance {
    code: string;
  }
  interface auth_resendCodeRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
  }
  interface auth_cancelCodeRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
  }
  interface auth_dropTempAuthKeysRequest extends GramJsInstance {
    exceptAuthKeys: long[];
  }
  interface account_registerDeviceRequest extends GramJsInstance {
    // flags: null;
    noMuted?: true;
    tokenType: int;
    token: string;
    appSandbox: Bool;
    secret: bytes;
    otherUids: int[];
  }
  interface account_unregisterDeviceRequest extends GramJsInstance {
    tokenType: int;
    token: string;
    otherUids: int[];
  }
  interface account_updateNotifySettingsRequest extends GramJsInstance {
    peer: InputNotifyPeer;
    settings: InputPeerNotifySettings;
  }
  interface account_getNotifySettingsRequest extends GramJsInstance {
    peer: InputNotifyPeer;
  }
  interface account_resetNotifySettingsRequest extends GramJsInstance {
    
  }
  interface account_updateProfileRequest extends GramJsInstance {
    // flags: null;
    firstName?: string;
    lastName?: string;
    about?: string;
  }
  interface account_updateStatusRequest extends GramJsInstance {
    offline: Bool;
  }
  interface account_getWallPapersRequest extends GramJsInstance {
    hash: int;
  }
  interface account_reportPeerRequest extends GramJsInstance {
    peer: InputPeer;
    reason: ReportReason;
  }
  interface account_checkUsernameRequest extends GramJsInstance {
    username: string;
  }
  interface account_updateUsernameRequest extends GramJsInstance {
    username: string;
  }
  interface account_getPrivacyRequest extends GramJsInstance {
    key: InputPrivacyKey;
  }
  interface account_setPrivacyRequest extends GramJsInstance {
    key: InputPrivacyKey;
    rules: InputPrivacyRule[];
  }
  interface account_deleteAccountRequest extends GramJsInstance {
    reason: string;
  }
  interface account_getAccountTTLRequest extends GramJsInstance {
    
  }
  interface account_setAccountTTLRequest extends GramJsInstance {
    ttl: AccountDaysTTL;
  }
  interface account_sendChangePhoneCodeRequest extends GramJsInstance {
    phoneNumber: string;
    settings: CodeSettings;
  }
  interface account_changePhoneRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
    phoneCode: string;
  }
  interface account_updateDeviceLockedRequest extends GramJsInstance {
    period: int;
  }
  interface account_getAuthorizationsRequest extends GramJsInstance {
    
  }
  interface account_resetAuthorizationRequest extends GramJsInstance {
    hash: long;
  }
  interface account_getPasswordRequest extends GramJsInstance {
    
  }
  interface account_getPasswordSettingsRequest extends GramJsInstance {
    password: InputCheckPasswordSRP;
  }
  interface account_updatePasswordSettingsRequest extends GramJsInstance {
    password: InputCheckPasswordSRP;
    newSettings: account_PasswordInputSettings;
  }
  interface account_sendConfirmPhoneCodeRequest extends GramJsInstance {
    hash: string;
    settings: CodeSettings;
  }
  interface account_confirmPhoneRequest extends GramJsInstance {
    phoneCodeHash: string;
    phoneCode: string;
  }
  interface account_getTmpPasswordRequest extends GramJsInstance {
    password: InputCheckPasswordSRP;
    period: int;
  }
  interface account_getWebAuthorizationsRequest extends GramJsInstance {
    
  }
  interface account_resetWebAuthorizationRequest extends GramJsInstance {
    hash: long;
  }
  interface account_resetWebAuthorizationsRequest extends GramJsInstance {
    
  }
  interface account_getAllSecureValuesRequest extends GramJsInstance {
    
  }
  interface account_getSecureValueRequest extends GramJsInstance {
    types: SecureValueType[];
  }
  interface account_saveSecureValueRequest extends GramJsInstance {
    value: InputSecureValue;
    secureSecretId: long;
  }
  interface account_deleteSecureValueRequest extends GramJsInstance {
    types: SecureValueType[];
  }
  interface account_getAuthorizationFormRequest extends GramJsInstance {
    botId: int;
    scope: string;
    publicKey: string;
  }
  interface account_acceptAuthorizationRequest extends GramJsInstance {
    botId: int;
    scope: string;
    publicKey: string;
    valueHashes: SecureValueHash[];
    credentials: SecureCredentialsEncrypted;
  }
  interface account_sendVerifyPhoneCodeRequest extends GramJsInstance {
    phoneNumber: string;
    settings: CodeSettings;
  }
  interface account_verifyPhoneRequest extends GramJsInstance {
    phoneNumber: string;
    phoneCodeHash: string;
    phoneCode: string;
  }
  interface account_sendVerifyEmailCodeRequest extends GramJsInstance {
    email: string;
  }
  interface account_verifyEmailRequest extends GramJsInstance {
    email: string;
    code: string;
  }
  interface account_initTakeoutSessionRequest extends GramJsInstance {
    // flags: null;
    contacts?: true;
    messageUsers?: true;
    messageChats?: true;
    messageMegagroups?: true;
    messageChannels?: true;
    files?: true;
    fileMaxSize?: int;
  }
  interface account_finishTakeoutSessionRequest extends GramJsInstance {
    // flags: null;
    success?: true;
  }
  interface account_confirmPasswordEmailRequest extends GramJsInstance {
    code: string;
  }
  interface account_resendPasswordEmailRequest extends GramJsInstance {
    
  }
  interface account_cancelPasswordEmailRequest extends GramJsInstance {
    
  }
  interface account_getContactSignUpNotificationRequest extends GramJsInstance {
    
  }
  interface account_setContactSignUpNotificationRequest extends GramJsInstance {
    silent: Bool;
  }
  interface account_getNotifyExceptionsRequest extends GramJsInstance {
    // flags: null;
    compareSound?: true;
    peer?: InputNotifyPeer;
  }
  interface account_getWallPaperRequest extends GramJsInstance {
    wallpaper: InputWallPaper;
  }
  interface account_uploadWallPaperRequest extends GramJsInstance {
    file: InputFile;
    mimeType: string;
    settings: WallPaperSettings;
  }
  interface account_saveWallPaperRequest extends GramJsInstance {
    wallpaper: InputWallPaper;
    unsave: Bool;
    settings: WallPaperSettings;
  }
  interface account_installWallPaperRequest extends GramJsInstance {
    wallpaper: InputWallPaper;
    settings: WallPaperSettings;
  }
  interface account_resetWallPapersRequest extends GramJsInstance {
    
  }
  interface account_getAutoDownloadSettingsRequest extends GramJsInstance {
    
  }
  interface account_saveAutoDownloadSettingsRequest extends GramJsInstance {
    // flags: null;
    low?: true;
    high?: true;
    settings: AutoDownloadSettings;
  }
  interface account_uploadThemeRequest extends GramJsInstance {
    // flags: null;
    file: InputFile;
    thumb?: InputFile;
    fileName: string;
    mimeType: string;
  }
  interface account_createThemeRequest extends GramJsInstance {
    slug: string;
    title: string;
    document: InputDocument;
  }
  interface account_updateThemeRequest extends GramJsInstance {
    // flags: null;
    format: string;
    theme: InputTheme;
    slug?: string;
    title?: string;
    document?: InputDocument;
  }
  interface account_saveThemeRequest extends GramJsInstance {
    theme: InputTheme;
    unsave: Bool;
  }
  interface account_installThemeRequest extends GramJsInstance {
    // flags: null;
    dark?: true;
    format?: string;
    theme?: InputTheme;
  }
  interface account_getThemeRequest extends GramJsInstance {
    format: string;
    theme: InputTheme;
    documentId: long;
  }
  interface account_getThemesRequest extends GramJsInstance {
    format: string;
    hash: int;
  }
  interface users_getUsersRequest extends GramJsInstance {
    id: InputUser[];
  }
  interface users_getFullUserRequest extends GramJsInstance {
    id: InputUser;
  }
  interface users_setSecureValueErrorsRequest extends GramJsInstance {
    id: InputUser;
    errors: SecureValueError[];
  }
  interface contacts_getContactIDsRequest extends GramJsInstance {
    hash: int;
  }
  interface contacts_getStatusesRequest extends GramJsInstance {
    
  }
  interface contacts_getContactsRequest extends GramJsInstance {
    hash: int;
  }
  interface contacts_importContactsRequest extends GramJsInstance {
    contacts: InputContact[];
  }
  interface contacts_deleteContactsRequest extends GramJsInstance {
    id: InputUser[];
  }
  interface contacts_deleteByPhonesRequest extends GramJsInstance {
    phones: string[];
  }
  interface contacts_blockRequest extends GramJsInstance {
    id: InputUser;
  }
  interface contacts_unblockRequest extends GramJsInstance {
    id: InputUser;
  }
  interface contacts_getBlockedRequest extends GramJsInstance {
    offset: int;
    limit: int;
  }
  interface contacts_searchRequest extends GramJsInstance {
    q: string;
    limit: int;
  }
  interface contacts_resolveUsernameRequest extends GramJsInstance {
    username: string;
  }
  interface contacts_getTopPeersRequest extends GramJsInstance {
    // flags: null;
    correspondents?: true;
    botsPm?: true;
    botsInline?: true;
    phoneCalls?: true;
    forwardUsers?: true;
    forwardChats?: true;
    groups?: true;
    channels?: true;
    offset: int;
    limit: int;
    hash: int;
  }
  interface contacts_resetTopPeerRatingRequest extends GramJsInstance {
    category: TopPeerCategory;
    peer: InputPeer;
  }
  interface contacts_resetSavedRequest extends GramJsInstance {
    
  }
  interface contacts_getSavedRequest extends GramJsInstance {
    
  }
  interface contacts_toggleTopPeersRequest extends GramJsInstance {
    enabled: Bool;
  }
  interface contacts_addContactRequest extends GramJsInstance {
    // flags: null;
    addPhonePrivacyException?: true;
    id: InputUser;
    firstName: string;
    lastName: string;
    phone: string;
  }
  interface contacts_acceptContactRequest extends GramJsInstance {
    id: InputUser;
  }
  interface contacts_getLocatedRequest extends GramJsInstance {
    geoPoint: InputGeoPoint;
  }
  interface messages_getMessagesRequest extends GramJsInstance {
    id: InputMessage[];
  }
  interface messages_getDialogsRequest extends GramJsInstance {
    // flags: null;
    excludePinned?: true;
    folderId?: int;
    offsetDate: int;
    offsetId: int;
    offsetPeer: InputPeer;
    limit: int;
    hash: int;
  }
  interface messages_getHistoryRequest extends GramJsInstance {
    peer: InputPeer;
    offsetId: int;
    offsetDate: int;
    addOffset: int;
    limit: int;
    maxId: int;
    minId: int;
    hash: int;
  }
  interface messages_searchRequest extends GramJsInstance {
    // flags: null;
    peer: InputPeer;
    q: string;
    fromId?: InputUser;
    filter: MessagesFilter;
    minDate: int;
    maxDate: int;
    offsetId: int;
    addOffset: int;
    limit: int;
    maxId: int;
    minId: int;
    hash: int;
  }
  interface messages_readHistoryRequest extends GramJsInstance {
    peer: InputPeer;
    maxId: int;
  }
  interface messages_deleteHistoryRequest extends GramJsInstance {
    // flags: null;
    justClear?: true;
    revoke?: true;
    peer: InputPeer;
    maxId: int;
  }
  interface messages_deleteMessagesRequest extends GramJsInstance {
    // flags: null;
    revoke?: true;
    id: int[];
  }
  interface messages_receivedMessagesRequest extends GramJsInstance {
    maxId: int;
  }
  interface messages_setTypingRequest extends GramJsInstance {
    peer: InputPeer;
    action: SendMessageAction;
  }
  interface messages_sendMessageRequest extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    silent?: true;
    background?: true;
    clearDraft?: true;
    peer: InputPeer;
    replyToMsgId?: int;
    message: string;
    randomId: long;
    replyMarkup?: ReplyMarkup;
    entities?: MessageEntity[];
    scheduleDate?: int;
  }
  interface messages_sendMediaRequest extends GramJsInstance {
    // flags: null;
    silent?: true;
    background?: true;
    clearDraft?: true;
    peer: InputPeer;
    replyToMsgId?: int;
    media: InputMedia;
    message: string;
    randomId: long;
    replyMarkup?: ReplyMarkup;
    entities?: MessageEntity[];
    scheduleDate?: int;
  }
  interface messages_forwardMessagesRequest extends GramJsInstance {
    // flags: null;
    silent?: true;
    background?: true;
    withMyScore?: true;
    grouped?: true;
    fromPeer: InputPeer;
    id: int[];
    randomId: long[];
    toPeer: InputPeer;
    scheduleDate?: int;
  }
  interface messages_reportSpamRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_getPeerSettingsRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_reportRequest extends GramJsInstance {
    peer: InputPeer;
    id: int[];
    reason: ReportReason;
  }
  interface messages_getChatsRequest extends GramJsInstance {
    id: int[];
  }
  interface messages_getFullChatRequest extends GramJsInstance {
    chatId: int;
  }
  interface messages_editChatTitleRequest extends GramJsInstance {
    chatId: int;
    title: string;
  }
  interface messages_editChatPhotoRequest extends GramJsInstance {
    chatId: int;
    photo: InputChatPhoto;
  }
  interface messages_addChatUserRequest extends GramJsInstance {
    chatId: int;
    userId: InputUser;
    fwdLimit: int;
  }
  interface messages_deleteChatUserRequest extends GramJsInstance {
    chatId: int;
    userId: InputUser;
  }
  interface messages_createChatRequest extends GramJsInstance {
    users: InputUser[];
    title: string;
  }
  interface messages_getDhConfigRequest extends GramJsInstance {
    version: int;
    randomLength: int;
  }
  interface messages_requestEncryptionRequest extends GramJsInstance {
    userId: InputUser;
    randomId: int;
    gA: bytes;
  }
  interface messages_acceptEncryptionRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    gB: bytes;
    keyFingerprint: long;
  }
  interface messages_discardEncryptionRequest extends GramJsInstance {
    chatId: int;
  }
  interface messages_setEncryptedTypingRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    typing: Bool;
  }
  interface messages_readEncryptedHistoryRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    maxDate: int;
  }
  interface messages_sendEncryptedRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    randomId: long;
    data: bytes;
  }
  interface messages_sendEncryptedFileRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    randomId: long;
    data: bytes;
    file: InputEncryptedFile;
  }
  interface messages_sendEncryptedServiceRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    randomId: long;
    data: bytes;
  }
  interface messages_receivedQueueRequest extends GramJsInstance {
    maxQts: int;
  }
  interface messages_reportEncryptedSpamRequest extends GramJsInstance {
    peer: InputEncryptedChat;
  }
  interface messages_readMessageContentsRequest extends GramJsInstance {
    id: int[];
  }
  interface messages_getStickersRequest extends GramJsInstance {
    emoticon: string;
    hash: int;
  }
  interface messages_getAllStickersRequest extends GramJsInstance {
    hash: int;
  }
  interface messages_getWebPagePreviewRequest extends GramJsInstance {
    // flags: null;
    message: string;
    entities?: MessageEntity[];
  }
  interface messages_exportChatInviteRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_checkChatInviteRequest extends GramJsInstance {
    hash: string;
  }
  interface messages_importChatInviteRequest extends GramJsInstance {
    hash: string;
  }
  interface messages_getStickerSetRequest extends GramJsInstance {
    stickerset: InputStickerSet;
  }
  interface messages_installStickerSetRequest extends GramJsInstance {
    stickerset: InputStickerSet;
    archived: Bool;
  }
  interface messages_uninstallStickerSetRequest extends GramJsInstance {
    stickerset: InputStickerSet;
  }
  interface messages_startBotRequest extends GramJsInstance {
    bot: InputUser;
    peer: InputPeer;
    randomId: long;
    startParam: string;
  }
  interface messages_getMessagesViewsRequest extends GramJsInstance {
    peer: InputPeer;
    id: int[];
    increment: Bool;
  }
  interface messages_editChatAdminRequest extends GramJsInstance {
    chatId: int;
    userId: InputUser;
    isAdmin: Bool;
  }
  interface messages_migrateChatRequest extends GramJsInstance {
    chatId: int;
  }
  interface messages_searchGlobalRequest extends GramJsInstance {
    // flags: null;
    folderId?: int;
    q: string;
    offsetRate: int;
    offsetPeer: InputPeer;
    offsetId: int;
    limit: int;
  }
  interface messages_reorderStickerSetsRequest extends GramJsInstance {
    // flags: null;
    masks?: true;
    order: long[];
  }
  interface messages_getDocumentByHashRequest extends GramJsInstance {
    sha256: bytes;
    size: int;
    mimeType: string;
  }
  interface messages_searchGifsRequest extends GramJsInstance {
    q: string;
    offset: int;
  }
  interface messages_getSavedGifsRequest extends GramJsInstance {
    hash: int;
  }
  interface messages_saveGifRequest extends GramJsInstance {
    id: InputDocument;
    unsave: Bool;
  }
  interface messages_getInlineBotResultsRequest extends GramJsInstance {
    // flags: null;
    bot: InputUser;
    peer: InputPeer;
    geoPoint?: InputGeoPoint;
    query: string;
    offset: string;
  }
  interface messages_setInlineBotResultsRequest extends GramJsInstance {
    // flags: null;
    gallery?: true;
    private?: true;
    queryId: long;
    results: InputBotInlineResult[];
    cacheTime: int;
    nextOffset?: string;
    switchPm?: InlineBotSwitchPM;
  }
  interface messages_sendInlineBotResultRequest extends GramJsInstance {
    // flags: null;
    silent?: true;
    background?: true;
    clearDraft?: true;
    hideVia?: true;
    peer: InputPeer;
    replyToMsgId?: int;
    randomId: long;
    queryId: long;
    id: string;
    scheduleDate?: int;
  }
  interface messages_getMessageEditDataRequest extends GramJsInstance {
    peer: InputPeer;
    id: int;
  }
  interface messages_editMessageRequest extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    peer: InputPeer;
    id: int;
    message?: string;
    media?: InputMedia;
    replyMarkup?: ReplyMarkup;
    entities?: MessageEntity[];
    scheduleDate?: int;
  }
  interface messages_editInlineBotMessageRequest extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    id: InputBotInlineMessageID;
    message?: string;
    media?: InputMedia;
    replyMarkup?: ReplyMarkup;
    entities?: MessageEntity[];
  }
  interface messages_getBotCallbackAnswerRequest extends GramJsInstance {
    // flags: null;
    game?: true;
    peer: InputPeer;
    msgId: int;
    data?: bytes;
  }
  interface messages_setBotCallbackAnswerRequest extends GramJsInstance {
    // flags: null;
    alert?: true;
    queryId: long;
    message?: string;
    url?: string;
    cacheTime: int;
  }
  interface messages_getPeerDialogsRequest extends GramJsInstance {
    peers: InputDialogPeer[];
  }
  interface messages_saveDraftRequest extends GramJsInstance {
    // flags: null;
    noWebpage?: true;
    replyToMsgId?: int;
    peer: InputPeer;
    message: string;
    entities?: MessageEntity[];
  }
  interface messages_getAllDraftsRequest extends GramJsInstance {
    
  }
  interface messages_getFeaturedStickersRequest extends GramJsInstance {
    hash: int;
  }
  interface messages_readFeaturedStickersRequest extends GramJsInstance {
    id: long[];
  }
  interface messages_getRecentStickersRequest extends GramJsInstance {
    // flags: null;
    attached?: true;
    hash: int;
  }
  interface messages_saveRecentStickerRequest extends GramJsInstance {
    // flags: null;
    attached?: true;
    id: InputDocument;
    unsave: Bool;
  }
  interface messages_clearRecentStickersRequest extends GramJsInstance {
    // flags: null;
    attached?: true;
  }
  interface messages_getArchivedStickersRequest extends GramJsInstance {
    // flags: null;
    masks?: true;
    offsetId: long;
    limit: int;
  }
  interface messages_getMaskStickersRequest extends GramJsInstance {
    hash: int;
  }
  interface messages_getAttachedStickersRequest extends GramJsInstance {
    media: InputStickeredMedia;
  }
  interface messages_setGameScoreRequest extends GramJsInstance {
    // flags: null;
    editMessage?: true;
    force?: true;
    peer: InputPeer;
    id: int;
    userId: InputUser;
    score: int;
  }
  interface messages_setInlineGameScoreRequest extends GramJsInstance {
    // flags: null;
    editMessage?: true;
    force?: true;
    id: InputBotInlineMessageID;
    userId: InputUser;
    score: int;
  }
  interface messages_getGameHighScoresRequest extends GramJsInstance {
    peer: InputPeer;
    id: int;
    userId: InputUser;
  }
  interface messages_getInlineGameHighScoresRequest extends GramJsInstance {
    id: InputBotInlineMessageID;
    userId: InputUser;
  }
  interface messages_getCommonChatsRequest extends GramJsInstance {
    userId: InputUser;
    maxId: int;
    limit: int;
  }
  interface messages_getAllChatsRequest extends GramJsInstance {
    exceptIds: int[];
  }
  interface messages_getWebPageRequest extends GramJsInstance {
    url: string;
    hash: int;
  }
  interface messages_toggleDialogPinRequest extends GramJsInstance {
    // flags: null;
    pinned?: true;
    peer: InputDialogPeer;
  }
  interface messages_reorderPinnedDialogsRequest extends GramJsInstance {
    // flags: null;
    force?: true;
    folderId: int;
    order: InputDialogPeer[];
  }
  interface messages_getPinnedDialogsRequest extends GramJsInstance {
    folderId: int;
  }
  interface messages_setBotShippingResultsRequest extends GramJsInstance {
    // flags: null;
    queryId: long;
    error?: string;
    shippingOptions?: ShippingOption[];
  }
  interface messages_setBotPrecheckoutResultsRequest extends GramJsInstance {
    // flags: null;
    success?: true;
    queryId: long;
    error?: string;
  }
  interface messages_uploadMediaRequest extends GramJsInstance {
    peer: InputPeer;
    media: InputMedia;
  }
  interface messages_sendScreenshotNotificationRequest extends GramJsInstance {
    peer: InputPeer;
    replyToMsgId: int;
    randomId: long;
  }
  interface messages_getFavedStickersRequest extends GramJsInstance {
    hash: int;
  }
  interface messages_faveStickerRequest extends GramJsInstance {
    id: InputDocument;
    unfave: Bool;
  }
  interface messages_getUnreadMentionsRequest extends GramJsInstance {
    peer: InputPeer;
    offsetId: int;
    addOffset: int;
    limit: int;
    maxId: int;
    minId: int;
  }
  interface messages_readMentionsRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_getRecentLocationsRequest extends GramJsInstance {
    peer: InputPeer;
    limit: int;
    hash: int;
  }
  interface messages_sendMultiMediaRequest extends GramJsInstance {
    // flags: null;
    silent?: true;
    background?: true;
    clearDraft?: true;
    peer: InputPeer;
    replyToMsgId?: int;
    multiMedia: InputSingleMedia[];
    scheduleDate?: int;
  }
  interface messages_uploadEncryptedFileRequest extends GramJsInstance {
    peer: InputEncryptedChat;
    file: InputEncryptedFile;
  }
  interface messages_searchStickerSetsRequest extends GramJsInstance {
    // flags: null;
    excludeFeatured?: true;
    q: string;
    hash: int;
  }
  interface messages_getSplitRangesRequest extends GramJsInstance {
    
  }
  interface messages_markDialogUnreadRequest extends GramJsInstance {
    // flags: null;
    unread?: true;
    peer: InputDialogPeer;
  }
  interface messages_getDialogUnreadMarksRequest extends GramJsInstance {
    
  }
  interface messages_clearAllDraftsRequest extends GramJsInstance {
    
  }
  interface messages_updatePinnedMessageRequest extends GramJsInstance {
    // flags: null;
    silent?: true;
    peer: InputPeer;
    id: int;
  }
  interface messages_sendVoteRequest extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    options: bytes[];
  }
  interface messages_getPollResultsRequest extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
  }
  interface messages_getOnlinesRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_getStatsURLRequest extends GramJsInstance {
    // flags: null;
    dark?: true;
    peer: InputPeer;
    params: string;
  }
  interface messages_editChatAboutRequest extends GramJsInstance {
    peer: InputPeer;
    about: string;
  }
  interface messages_editChatDefaultBannedRightsRequest extends GramJsInstance {
    peer: InputPeer;
    bannedRights: ChatBannedRights;
  }
  interface messages_getEmojiKeywordsRequest extends GramJsInstance {
    langCode: string;
  }
  interface messages_getEmojiKeywordsDifferenceRequest extends GramJsInstance {
    langCode: string;
    fromVersion: int;
  }
  interface messages_getEmojiKeywordsLanguagesRequest extends GramJsInstance {
    langCodes: string[];
  }
  interface messages_getEmojiURLRequest extends GramJsInstance {
    langCode: string;
  }
  interface messages_getSearchCountersRequest extends GramJsInstance {
    peer: InputPeer;
    filters: MessagesFilter[];
  }
  interface messages_requestUrlAuthRequest extends GramJsInstance {
    peer: InputPeer;
    msgId: int;
    buttonId: int;
  }
  interface messages_acceptUrlAuthRequest extends GramJsInstance {
    // flags: null;
    writeAllowed?: true;
    peer: InputPeer;
    msgId: int;
    buttonId: int;
  }
  interface messages_hidePeerSettingsBarRequest extends GramJsInstance {
    peer: InputPeer;
  }
  interface messages_getScheduledHistoryRequest extends GramJsInstance {
    peer: InputPeer;
    hash: int;
  }
  interface messages_getScheduledMessagesRequest extends GramJsInstance {
    peer: InputPeer;
    id: int[];
  }
  interface messages_sendScheduledMessagesRequest extends GramJsInstance {
    peer: InputPeer;
    id: int[];
  }
  interface messages_deleteScheduledMessagesRequest extends GramJsInstance {
    peer: InputPeer;
    id: int[];
  }
  interface updates_getStateRequest extends GramJsInstance {
    
  }
  interface updates_getDifferenceRequest extends GramJsInstance {
    // flags: null;
    pts: int;
    ptsTotalLimit?: int;
    date: int;
    qts: int;
  }
  interface updates_getChannelDifferenceRequest extends GramJsInstance {
    // flags: null;
    force?: true;
    channel: InputChannel;
    filter: ChannelMessagesFilter;
    pts: int;
    limit: int;
  }
  interface photos_updateProfilePhotoRequest extends GramJsInstance {
    id: InputPhoto;
  }
  interface photos_uploadProfilePhotoRequest extends GramJsInstance {
    file: InputFile;
  }
  interface photos_deletePhotosRequest extends GramJsInstance {
    id: InputPhoto[];
  }
  interface photos_getUserPhotosRequest extends GramJsInstance {
    userId: InputUser;
    offset: int;
    maxId: long;
    limit: int;
  }
  interface upload_saveFilePartRequest extends GramJsInstance {
    fileId: long;
    filePart: int;
    bytes: bytes;
  }
  interface upload_getFileRequest extends GramJsInstance {
    // flags: null;
    precise?: true;
    location: InputFileLocation;
    offset: int;
    limit: int;
  }
  interface upload_saveBigFilePartRequest extends GramJsInstance {
    fileId: long;
    filePart: int;
    fileTotalParts: int;
    bytes: bytes;
  }
  interface upload_getWebFileRequest extends GramJsInstance {
    location: InputWebFileLocation;
    offset: int;
    limit: int;
  }
  interface upload_getCdnFileRequest extends GramJsInstance {
    fileToken: bytes;
    offset: int;
    limit: int;
  }
  interface upload_reuploadCdnFileRequest extends GramJsInstance {
    fileToken: bytes;
    requestToken: bytes;
  }
  interface upload_getCdnFileHashesRequest extends GramJsInstance {
    fileToken: bytes;
    offset: int;
  }
  interface upload_getFileHashesRequest extends GramJsInstance {
    location: InputFileLocation;
    offset: int;
  }
  interface help_getConfigRequest extends GramJsInstance {
    
  }
  interface help_getNearestDcRequest extends GramJsInstance {
    
  }
  interface help_getAppUpdateRequest extends GramJsInstance {
    source: string;
  }
  interface help_getInviteTextRequest extends GramJsInstance {
    
  }
  interface help_getSupportRequest extends GramJsInstance {
    
  }
  interface help_getAppChangelogRequest extends GramJsInstance {
    prevAppVersion: string;
  }
  interface help_setBotUpdatesStatusRequest extends GramJsInstance {
    pendingUpdatesCount: int;
    message: string;
  }
  interface help_getCdnConfigRequest extends GramJsInstance {
    
  }
  interface help_getRecentMeUrlsRequest extends GramJsInstance {
    referer: string;
  }
  interface help_getProxyDataRequest extends GramJsInstance {
    
  }
  interface help_getTermsOfServiceUpdateRequest extends GramJsInstance {
    
  }
  interface help_acceptTermsOfServiceRequest extends GramJsInstance {
    id: DataJSON;
  }
  interface help_getDeepLinkInfoRequest extends GramJsInstance {
    path: string;
  }
  interface help_getAppConfigRequest extends GramJsInstance {
    
  }
  interface help_saveAppLogRequest extends GramJsInstance {
    events: InputAppEvent[];
  }
  interface help_getPassportConfigRequest extends GramJsInstance {
    hash: int;
  }
  interface help_getSupportNameRequest extends GramJsInstance {
    
  }
  interface help_getUserInfoRequest extends GramJsInstance {
    userId: InputUser;
  }
  interface help_editUserInfoRequest extends GramJsInstance {
    userId: InputUser;
    message: string;
    entities: MessageEntity[];
  }
  interface channels_readHistoryRequest extends GramJsInstance {
    channel: InputChannel;
    maxId: int;
  }
  interface channels_deleteMessagesRequest extends GramJsInstance {
    channel: InputChannel;
    id: int[];
  }
  interface channels_deleteUserHistoryRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
  }
  interface channels_reportSpamRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
    id: int[];
  }
  interface channels_getMessagesRequest extends GramJsInstance {
    channel: InputChannel;
    id: InputMessage[];
  }
  interface channels_getParticipantsRequest extends GramJsInstance {
    channel: InputChannel;
    filter: ChannelParticipantsFilter;
    offset: int;
    limit: int;
    hash: int;
  }
  interface channels_getParticipantRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
  }
  interface channels_getChannelsRequest extends GramJsInstance {
    id: InputChannel[];
  }
  interface channels_getFullChannelRequest extends GramJsInstance {
    channel: InputChannel;
  }
  interface channels_createChannelRequest extends GramJsInstance {
    // flags: null;
    broadcast?: true;
    megagroup?: true;
    title: string;
    about: string;
    geoPoint?: InputGeoPoint;
    address?: string;
  }
  interface channels_editAdminRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
    adminRights: ChatAdminRights;
    rank: string;
  }
  interface channels_editTitleRequest extends GramJsInstance {
    channel: InputChannel;
    title: string;
  }
  interface channels_editPhotoRequest extends GramJsInstance {
    channel: InputChannel;
    photo: InputChatPhoto;
  }
  interface channels_checkUsernameRequest extends GramJsInstance {
    channel: InputChannel;
    username: string;
  }
  interface channels_updateUsernameRequest extends GramJsInstance {
    channel: InputChannel;
    username: string;
  }
  interface channels_joinChannelRequest extends GramJsInstance {
    channel: InputChannel;
  }
  interface channels_leaveChannelRequest extends GramJsInstance {
    channel: InputChannel;
  }
  interface channels_inviteToChannelRequest extends GramJsInstance {
    channel: InputChannel;
    users: InputUser[];
  }
  interface channels_deleteChannelRequest extends GramJsInstance {
    channel: InputChannel;
  }
  interface channels_exportMessageLinkRequest extends GramJsInstance {
    channel: InputChannel;
    id: int;
    grouped: Bool;
  }
  interface channels_toggleSignaturesRequest extends GramJsInstance {
    channel: InputChannel;
    enabled: Bool;
  }
  interface channels_getAdminedPublicChannelsRequest extends GramJsInstance {
    // flags: null;
    byLocation?: true;
    checkLimit?: true;
  }
  interface channels_editBannedRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
    bannedRights: ChatBannedRights;
  }
  interface channels_getAdminLogRequest extends GramJsInstance {
    // flags: null;
    channel: InputChannel;
    q: string;
    eventsFilter?: ChannelAdminLogEventsFilter;
    admins?: InputUser[];
    maxId: long;
    minId: long;
    limit: int;
  }
  interface channels_setStickersRequest extends GramJsInstance {
    channel: InputChannel;
    stickerset: InputStickerSet;
  }
  interface channels_readMessageContentsRequest extends GramJsInstance {
    channel: InputChannel;
    id: int[];
  }
  interface channels_deleteHistoryRequest extends GramJsInstance {
    channel: InputChannel;
    maxId: int;
  }
  interface channels_togglePreHistoryHiddenRequest extends GramJsInstance {
    channel: InputChannel;
    enabled: Bool;
  }
  interface channels_getLeftChannelsRequest extends GramJsInstance {
    offset: int;
  }
  interface channels_getGroupsForDiscussionRequest extends GramJsInstance {
    
  }
  interface channels_setDiscussionGroupRequest extends GramJsInstance {
    broadcast: InputChannel;
    group: InputChannel;
  }
  interface channels_editCreatorRequest extends GramJsInstance {
    channel: InputChannel;
    userId: InputUser;
    password: InputCheckPasswordSRP;
  }
  interface channels_editLocationRequest extends GramJsInstance {
    channel: InputChannel;
    geoPoint: InputGeoPoint;
    address: string;
  }
  interface channels_toggleSlowModeRequest extends GramJsInstance {
    channel: InputChannel;
    seconds: int;
  }
  interface bots_sendCustomRequestRequest extends GramJsInstance {
    customMethod: string;
    params: DataJSON;
  }
  interface bots_answerWebhookJSONQueryRequest extends GramJsInstance {
    queryId: long;
    data: DataJSON;
  }
  interface payments_getPaymentFormRequest extends GramJsInstance {
    msgId: int;
  }
  interface payments_getPaymentReceiptRequest extends GramJsInstance {
    msgId: int;
  }
  interface payments_validateRequestedInfoRequest extends GramJsInstance {
    // flags: null;
    save?: true;
    msgId: int;
    info: PaymentRequestedInfo;
  }
  interface payments_sendPaymentFormRequest extends GramJsInstance {
    // flags: null;
    msgId: int;
    requestedInfoId?: string;
    shippingOptionId?: string;
    credentials: InputPaymentCredentials;
  }
  interface payments_getSavedInfoRequest extends GramJsInstance {
    
  }
  interface payments_clearSavedInfoRequest extends GramJsInstance {
    // flags: null;
    credentials?: true;
    info?: true;
  }
  interface stickers_createStickerSetRequest extends GramJsInstance {
    // flags: null;
    masks?: true;
    userId: InputUser;
    title: string;
    shortName: string;
    stickers: InputStickerSetItem[];
  }
  interface stickers_removeStickerFromSetRequest extends GramJsInstance {
    sticker: InputDocument;
  }
  interface stickers_changeStickerPositionRequest extends GramJsInstance {
    sticker: InputDocument;
    position: int;
  }
  interface stickers_addStickerToSetRequest extends GramJsInstance {
    stickerset: InputStickerSet;
    sticker: InputStickerSetItem;
  }
  interface phone_getCallConfigRequest extends GramJsInstance {
    
  }
  interface phone_requestCallRequest extends GramJsInstance {
    // flags: null;
    video?: true;
    userId: InputUser;
    randomId: int;
    gAHash: bytes;
    protocol: PhoneCallProtocol;
  }
  interface phone_acceptCallRequest extends GramJsInstance {
    peer: InputPhoneCall;
    gB: bytes;
    protocol: PhoneCallProtocol;
  }
  interface phone_confirmCallRequest extends GramJsInstance {
    peer: InputPhoneCall;
    gA: bytes;
    keyFingerprint: long;
    protocol: PhoneCallProtocol;
  }
  interface phone_receivedCallRequest extends GramJsInstance {
    peer: InputPhoneCall;
  }
  interface phone_discardCallRequest extends GramJsInstance {
    // flags: null;
    video?: true;
    peer: InputPhoneCall;
    duration: int;
    reason: PhoneCallDiscardReason;
    connectionId: long;
  }
  interface phone_setCallRatingRequest extends GramJsInstance {
    // flags: null;
    userInitiative?: true;
    peer: InputPhoneCall;
    rating: int;
    comment: string;
  }
  interface phone_saveCallDebugRequest extends GramJsInstance {
    peer: InputPhoneCall;
    debug: DataJSON;
  }
  interface langpack_getLangPackRequest extends GramJsInstance {
    langPack: string;
    langCode: string;
  }
  interface langpack_getStringsRequest extends GramJsInstance {
    langPack: string;
    langCode: string;
    keys: string[];
  }
  interface langpack_getDifferenceRequest extends GramJsInstance {
    langPack: string;
    langCode: string;
    fromVersion: int;
  }
  interface langpack_getLanguagesRequest extends GramJsInstance {
    langPack: string;
  }
  interface langpack_getLanguageRequest extends GramJsInstance {
    langPack: string;
    langCode: string;
  }
  interface folders_editPeerFoldersRequest extends GramJsInstance {
    folderPeers: InputFolderPeer[];
  }
  interface folders_deleteFolderRequest extends GramJsInstance {
    folderId: int;
  }
  interface reqPqRequest extends GramJsInstance {
    nonce: int128;
  }
  interface reqPqMultiRequest extends GramJsInstance {
    nonce: int128;
  }
  interface reqDHParamsRequest extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    p: bytes;
    q: bytes;
    publicKeyFingerprint: long;
    encryptedData: bytes;
  }
  interface setClientDHParamsRequest extends GramJsInstance {
    nonce: int128;
    serverNonce: int128;
    encryptedData: bytes;
  }
  interface destroyAuthKeyRequest extends GramJsInstance {
    
  }
  interface rpcDropAnswerRequest extends GramJsInstance {
    reqMsgId: long;
  }
  interface getFutureSaltsRequest extends GramJsInstance {
    num: int;
  }
  interface pingRequest extends GramJsInstance {
    pingId: long;
  }
  interface pingDelayDisconnectRequest extends GramJsInstance {
    pingId: long;
    disconnectDelay: int;
  }
  interface destroySessionRequest extends GramJsInstance {
    sessionId: long;
  }

}

// For some reason when `interface TlRequest extends TlConstructor`,
// the `InstanceType<TlRequest>` refers to the parent class (`TlConstructor`) instance.
interface TlCommon<Args extends AnyLiteral> {
  serializeBytes(data: Buffer | string): Buffer;

  serializeDate(date: Date | number): Buffer;

  fromReader(reader: Reader): GramJsInstance & Args;
}

interface TlConstructor<Args> extends TlCommon<Args> {
  new(args: Args): GramJsInstance & Args;
}

interface TlRequest<Args, Response> extends TlCommon<Args> {
  new(args: Args): GramJsInstance & Args & {
    className: string;
    classType: 'request';

    __response: Response;
  };

  className: string;
  classType: 'request';

  readResult(reader: Reader): Buffer;

  resolve(client: Client, utils: Utils): Promise<void>;
}

interface Constructors {
  InputPeerEmpty: TlConstructor<ToArgs<MTProto.inputPeerEmpty>>
  InputPeerSelf: TlConstructor<ToArgs<MTProto.inputPeerSelf>>
  InputPeerChat: TlConstructor<ToArgs<MTProto.inputPeerChat>>
  InputPeerUser: TlConstructor<ToArgs<MTProto.inputPeerUser>>
  InputPeerChannel: TlConstructor<ToArgs<MTProto.inputPeerChannel>>
  InputPeerUserFromMessage: TlConstructor<ToArgs<MTProto.inputPeerUserFromMessage>>
  InputPeerChannelFromMessage: TlConstructor<ToArgs<MTProto.inputPeerChannelFromMessage>>
  InputUserEmpty: TlConstructor<ToArgs<MTProto.inputUserEmpty>>
  InputUserSelf: TlConstructor<ToArgs<MTProto.inputUserSelf>>
  InputUser: TlConstructor<ToArgs<MTProto.inputUser>>
  InputUserFromMessage: TlConstructor<ToArgs<MTProto.inputUserFromMessage>>
  InputPhoneContact: TlConstructor<ToArgs<MTProto.inputPhoneContact>>
  InputFile: TlConstructor<ToArgs<MTProto.inputFile>>
  InputFileBig: TlConstructor<ToArgs<MTProto.inputFileBig>>
  InputMediaEmpty: TlConstructor<ToArgs<MTProto.inputMediaEmpty>>
  InputMediaUploadedPhoto: TlConstructor<ToArgs<MTProto.inputMediaUploadedPhoto>>
  InputMediaPhoto: TlConstructor<ToArgs<MTProto.inputMediaPhoto>>
  InputMediaGeoPoint: TlConstructor<ToArgs<MTProto.inputMediaGeoPoint>>
  InputMediaContact: TlConstructor<ToArgs<MTProto.inputMediaContact>>
  InputMediaUploadedDocument: TlConstructor<ToArgs<MTProto.inputMediaUploadedDocument>>
  InputMediaDocument: TlConstructor<ToArgs<MTProto.inputMediaDocument>>
  InputMediaVenue: TlConstructor<ToArgs<MTProto.inputMediaVenue>>
  InputMediaGifExternal: TlConstructor<ToArgs<MTProto.inputMediaGifExternal>>
  InputMediaPhotoExternal: TlConstructor<ToArgs<MTProto.inputMediaPhotoExternal>>
  InputMediaDocumentExternal: TlConstructor<ToArgs<MTProto.inputMediaDocumentExternal>>
  InputMediaGame: TlConstructor<ToArgs<MTProto.inputMediaGame>>
  InputMediaInvoice: TlConstructor<ToArgs<MTProto.inputMediaInvoice>>
  InputMediaGeoLive: TlConstructor<ToArgs<MTProto.inputMediaGeoLive>>
  InputMediaPoll: TlConstructor<ToArgs<MTProto.inputMediaPoll>>
  InputChatPhotoEmpty: TlConstructor<ToArgs<MTProto.inputChatPhotoEmpty>>
  InputChatUploadedPhoto: TlConstructor<ToArgs<MTProto.inputChatUploadedPhoto>>
  InputChatPhoto: TlConstructor<ToArgs<MTProto.inputChatPhoto>>
  InputGeoPointEmpty: TlConstructor<ToArgs<MTProto.inputGeoPointEmpty>>
  InputGeoPoint: TlConstructor<ToArgs<MTProto.inputGeoPoint>>
  InputPhotoEmpty: TlConstructor<ToArgs<MTProto.inputPhotoEmpty>>
  InputPhoto: TlConstructor<ToArgs<MTProto.inputPhoto>>
  InputFileLocation: TlConstructor<ToArgs<MTProto.inputFileLocation>>
  InputEncryptedFileLocation: TlConstructor<ToArgs<MTProto.inputEncryptedFileLocation>>
  InputDocumentFileLocation: TlConstructor<ToArgs<MTProto.inputDocumentFileLocation>>
  InputSecureFileLocation: TlConstructor<ToArgs<MTProto.inputSecureFileLocation>>
  InputTakeoutFileLocation: TlConstructor<ToArgs<MTProto.inputTakeoutFileLocation>>
  InputPhotoFileLocation: TlConstructor<ToArgs<MTProto.inputPhotoFileLocation>>
  InputPeerPhotoFileLocation: TlConstructor<ToArgs<MTProto.inputPeerPhotoFileLocation>>
  InputStickerSetThumb: TlConstructor<ToArgs<MTProto.inputStickerSetThumb>>
  PeerUser: TlConstructor<ToArgs<MTProto.peerUser>>
  PeerChat: TlConstructor<ToArgs<MTProto.peerChat>>
  PeerChannel: TlConstructor<ToArgs<MTProto.peerChannel>>
  UserEmpty: TlConstructor<ToArgs<MTProto.userEmpty>>
  User: TlConstructor<ToArgs<MTProto.user>>
  UserProfilePhotoEmpty: TlConstructor<ToArgs<MTProto.userProfilePhotoEmpty>>
  UserProfilePhoto: TlConstructor<ToArgs<MTProto.userProfilePhoto>>
  UserStatusEmpty: TlConstructor<ToArgs<MTProto.userStatusEmpty>>
  UserStatusOnline: TlConstructor<ToArgs<MTProto.userStatusOnline>>
  UserStatusOffline: TlConstructor<ToArgs<MTProto.userStatusOffline>>
  UserStatusRecently: TlConstructor<ToArgs<MTProto.userStatusRecently>>
  UserStatusLastWeek: TlConstructor<ToArgs<MTProto.userStatusLastWeek>>
  UserStatusLastMonth: TlConstructor<ToArgs<MTProto.userStatusLastMonth>>
  ChatEmpty: TlConstructor<ToArgs<MTProto.chatEmpty>>
  Chat: TlConstructor<ToArgs<MTProto.chat>>
  ChatForbidden: TlConstructor<ToArgs<MTProto.chatForbidden>>
  Channel: TlConstructor<ToArgs<MTProto.channel>>
  ChannelForbidden: TlConstructor<ToArgs<MTProto.channelForbidden>>
  ChatFull: TlConstructor<ToArgs<MTProto.chatFull>>
  ChannelFull: TlConstructor<ToArgs<MTProto.channelFull>>
  ChatParticipant: TlConstructor<ToArgs<MTProto.chatParticipant>>
  ChatParticipantCreator: TlConstructor<ToArgs<MTProto.chatParticipantCreator>>
  ChatParticipantAdmin: TlConstructor<ToArgs<MTProto.chatParticipantAdmin>>
  ChatParticipantsForbidden: TlConstructor<ToArgs<MTProto.chatParticipantsForbidden>>
  ChatParticipants: TlConstructor<ToArgs<MTProto.chatParticipants>>
  ChatPhotoEmpty: TlConstructor<ToArgs<MTProto.chatPhotoEmpty>>
  ChatPhoto: TlConstructor<ToArgs<MTProto.chatPhoto>>
  MessageEmpty: TlConstructor<ToArgs<MTProto.messageEmpty>>
  Message: TlConstructor<ToArgs<MTProto.message>>
  MessageService: TlConstructor<ToArgs<MTProto.messageService>>
  MessageMediaEmpty: TlConstructor<ToArgs<MTProto.messageMediaEmpty>>
  MessageMediaPhoto: TlConstructor<ToArgs<MTProto.messageMediaPhoto>>
  MessageMediaGeo: TlConstructor<ToArgs<MTProto.messageMediaGeo>>
  MessageMediaContact: TlConstructor<ToArgs<MTProto.messageMediaContact>>
  MessageMediaUnsupported: TlConstructor<ToArgs<MTProto.messageMediaUnsupported>>
  MessageMediaDocument: TlConstructor<ToArgs<MTProto.messageMediaDocument>>
  MessageMediaWebPage: TlConstructor<ToArgs<MTProto.messageMediaWebPage>>
  MessageMediaVenue: TlConstructor<ToArgs<MTProto.messageMediaVenue>>
  MessageMediaGame: TlConstructor<ToArgs<MTProto.messageMediaGame>>
  MessageMediaInvoice: TlConstructor<ToArgs<MTProto.messageMediaInvoice>>
  MessageMediaGeoLive: TlConstructor<ToArgs<MTProto.messageMediaGeoLive>>
  MessageMediaPoll: TlConstructor<ToArgs<MTProto.messageMediaPoll>>
  MessageActionEmpty: TlConstructor<ToArgs<MTProto.messageActionEmpty>>
  MessageActionChatCreate: TlConstructor<ToArgs<MTProto.messageActionChatCreate>>
  MessageActionChatEditTitle: TlConstructor<ToArgs<MTProto.messageActionChatEditTitle>>
  MessageActionChatEditPhoto: TlConstructor<ToArgs<MTProto.messageActionChatEditPhoto>>
  MessageActionChatDeletePhoto: TlConstructor<ToArgs<MTProto.messageActionChatDeletePhoto>>
  MessageActionChatAddUser: TlConstructor<ToArgs<MTProto.messageActionChatAddUser>>
  MessageActionChatDeleteUser: TlConstructor<ToArgs<MTProto.messageActionChatDeleteUser>>
  MessageActionChatJoinedByLink: TlConstructor<ToArgs<MTProto.messageActionChatJoinedByLink>>
  MessageActionChannelCreate: TlConstructor<ToArgs<MTProto.messageActionChannelCreate>>
  MessageActionChatMigrateTo: TlConstructor<ToArgs<MTProto.messageActionChatMigrateTo>>
  MessageActionChannelMigrateFrom: TlConstructor<ToArgs<MTProto.messageActionChannelMigrateFrom>>
  MessageActionPinMessage: TlConstructor<ToArgs<MTProto.messageActionPinMessage>>
  MessageActionHistoryClear: TlConstructor<ToArgs<MTProto.messageActionHistoryClear>>
  MessageActionGameScore: TlConstructor<ToArgs<MTProto.messageActionGameScore>>
  MessageActionPaymentSentMe: TlConstructor<ToArgs<MTProto.messageActionPaymentSentMe>>
  MessageActionPaymentSent: TlConstructor<ToArgs<MTProto.messageActionPaymentSent>>
  MessageActionPhoneCall: TlConstructor<ToArgs<MTProto.messageActionPhoneCall>>
  MessageActionScreenshotTaken: TlConstructor<ToArgs<MTProto.messageActionScreenshotTaken>>
  MessageActionCustomAction: TlConstructor<ToArgs<MTProto.messageActionCustomAction>>
  MessageActionBotAllowed: TlConstructor<ToArgs<MTProto.messageActionBotAllowed>>
  MessageActionSecureValuesSentMe: TlConstructor<ToArgs<MTProto.messageActionSecureValuesSentMe>>
  MessageActionSecureValuesSent: TlConstructor<ToArgs<MTProto.messageActionSecureValuesSent>>
  MessageActionContactSignUp: TlConstructor<ToArgs<MTProto.messageActionContactSignUp>>
  Dialog: TlConstructor<ToArgs<MTProto.dialog>>
  DialogFolder: TlConstructor<ToArgs<MTProto.dialogFolder>>
  PhotoEmpty: TlConstructor<ToArgs<MTProto.photoEmpty>>
  Photo: TlConstructor<ToArgs<MTProto.photo>>
  PhotoSizeEmpty: TlConstructor<ToArgs<MTProto.photoSizeEmpty>>
  PhotoSize: TlConstructor<ToArgs<MTProto.photoSize>>
  PhotoCachedSize: TlConstructor<ToArgs<MTProto.photoCachedSize>>
  PhotoStrippedSize: TlConstructor<ToArgs<MTProto.photoStrippedSize>>
  GeoPointEmpty: TlConstructor<ToArgs<MTProto.geoPointEmpty>>
  GeoPoint: TlConstructor<ToArgs<MTProto.geoPoint>>
  InputNotifyPeer: TlConstructor<ToArgs<MTProto.inputNotifyPeer>>
  InputNotifyUsers: TlConstructor<ToArgs<MTProto.inputNotifyUsers>>
  InputNotifyChats: TlConstructor<ToArgs<MTProto.inputNotifyChats>>
  InputNotifyBroadcasts: TlConstructor<ToArgs<MTProto.inputNotifyBroadcasts>>
  InputPeerNotifySettings: TlConstructor<ToArgs<MTProto.inputPeerNotifySettings>>
  PeerNotifySettings: TlConstructor<ToArgs<MTProto.peerNotifySettings>>
  PeerSettings: TlConstructor<ToArgs<MTProto.peerSettings>>
  WallPaper: TlConstructor<ToArgs<MTProto.wallPaper>>
  InputReportReasonSpam: TlConstructor<ToArgs<MTProto.inputReportReasonSpam>>
  InputReportReasonViolence: TlConstructor<ToArgs<MTProto.inputReportReasonViolence>>
  InputReportReasonPornography: TlConstructor<ToArgs<MTProto.inputReportReasonPornography>>
  InputReportReasonChildAbuse: TlConstructor<ToArgs<MTProto.inputReportReasonChildAbuse>>
  InputReportReasonOther: TlConstructor<ToArgs<MTProto.inputReportReasonOther>>
  InputReportReasonCopyright: TlConstructor<ToArgs<MTProto.inputReportReasonCopyright>>
  InputReportReasonGeoIrrelevant: TlConstructor<ToArgs<MTProto.inputReportReasonGeoIrrelevant>>
  UserFull: TlConstructor<ToArgs<MTProto.userFull>>
  Contact: TlConstructor<ToArgs<MTProto.contact>>
  ImportedContact: TlConstructor<ToArgs<MTProto.importedContact>>
  ContactBlocked: TlConstructor<ToArgs<MTProto.contactBlocked>>
  ContactStatus: TlConstructor<ToArgs<MTProto.contactStatus>>
  InputMessagesFilterEmpty: TlConstructor<ToArgs<MTProto.inputMessagesFilterEmpty>>
  InputMessagesFilterPhotos: TlConstructor<ToArgs<MTProto.inputMessagesFilterPhotos>>
  InputMessagesFilterVideo: TlConstructor<ToArgs<MTProto.inputMessagesFilterVideo>>
  InputMessagesFilterPhotoVideo: TlConstructor<ToArgs<MTProto.inputMessagesFilterPhotoVideo>>
  InputMessagesFilterDocument: TlConstructor<ToArgs<MTProto.inputMessagesFilterDocument>>
  InputMessagesFilterUrl: TlConstructor<ToArgs<MTProto.inputMessagesFilterUrl>>
  InputMessagesFilterGif: TlConstructor<ToArgs<MTProto.inputMessagesFilterGif>>
  InputMessagesFilterVoice: TlConstructor<ToArgs<MTProto.inputMessagesFilterVoice>>
  InputMessagesFilterMusic: TlConstructor<ToArgs<MTProto.inputMessagesFilterMusic>>
  InputMessagesFilterChatPhotos: TlConstructor<ToArgs<MTProto.inputMessagesFilterChatPhotos>>
  InputMessagesFilterPhoneCalls: TlConstructor<ToArgs<MTProto.inputMessagesFilterPhoneCalls>>
  InputMessagesFilterRoundVoice: TlConstructor<ToArgs<MTProto.inputMessagesFilterRoundVoice>>
  InputMessagesFilterRoundVideo: TlConstructor<ToArgs<MTProto.inputMessagesFilterRoundVideo>>
  InputMessagesFilterMyMentions: TlConstructor<ToArgs<MTProto.inputMessagesFilterMyMentions>>
  InputMessagesFilterGeo: TlConstructor<ToArgs<MTProto.inputMessagesFilterGeo>>
  InputMessagesFilterContacts: TlConstructor<ToArgs<MTProto.inputMessagesFilterContacts>>
  UpdateNewMessage: TlConstructor<ToArgs<MTProto.updateNewMessage>>
  UpdateMessageID: TlConstructor<ToArgs<MTProto.updateMessageID>>
  UpdateDeleteMessages: TlConstructor<ToArgs<MTProto.updateDeleteMessages>>
  UpdateUserTyping: TlConstructor<ToArgs<MTProto.updateUserTyping>>
  UpdateChatUserTyping: TlConstructor<ToArgs<MTProto.updateChatUserTyping>>
  UpdateChatParticipants: TlConstructor<ToArgs<MTProto.updateChatParticipants>>
  UpdateUserStatus: TlConstructor<ToArgs<MTProto.updateUserStatus>>
  UpdateUserName: TlConstructor<ToArgs<MTProto.updateUserName>>
  UpdateUserPhoto: TlConstructor<ToArgs<MTProto.updateUserPhoto>>
  UpdateNewEncryptedMessage: TlConstructor<ToArgs<MTProto.updateNewEncryptedMessage>>
  UpdateEncryptedChatTyping: TlConstructor<ToArgs<MTProto.updateEncryptedChatTyping>>
  UpdateEncryption: TlConstructor<ToArgs<MTProto.updateEncryption>>
  UpdateEncryptedMessagesRead: TlConstructor<ToArgs<MTProto.updateEncryptedMessagesRead>>
  UpdateChatParticipantAdd: TlConstructor<ToArgs<MTProto.updateChatParticipantAdd>>
  UpdateChatParticipantDelete: TlConstructor<ToArgs<MTProto.updateChatParticipantDelete>>
  UpdateDcOptions: TlConstructor<ToArgs<MTProto.updateDcOptions>>
  UpdateUserBlocked: TlConstructor<ToArgs<MTProto.updateUserBlocked>>
  UpdateNotifySettings: TlConstructor<ToArgs<MTProto.updateNotifySettings>>
  UpdateServiceNotification: TlConstructor<ToArgs<MTProto.updateServiceNotification>>
  UpdatePrivacy: TlConstructor<ToArgs<MTProto.updatePrivacy>>
  UpdateUserPhone: TlConstructor<ToArgs<MTProto.updateUserPhone>>
  UpdateReadHistoryInbox: TlConstructor<ToArgs<MTProto.updateReadHistoryInbox>>
  UpdateReadHistoryOutbox: TlConstructor<ToArgs<MTProto.updateReadHistoryOutbox>>
  UpdateWebPage: TlConstructor<ToArgs<MTProto.updateWebPage>>
  UpdateReadMessagesContents: TlConstructor<ToArgs<MTProto.updateReadMessagesContents>>
  UpdateChannelTooLong: TlConstructor<ToArgs<MTProto.updateChannelTooLong>>
  UpdateChannel: TlConstructor<ToArgs<MTProto.updateChannel>>
  UpdateNewChannelMessage: TlConstructor<ToArgs<MTProto.updateNewChannelMessage>>
  UpdateReadChannelInbox: TlConstructor<ToArgs<MTProto.updateReadChannelInbox>>
  UpdateDeleteChannelMessages: TlConstructor<ToArgs<MTProto.updateDeleteChannelMessages>>
  UpdateChannelMessageViews: TlConstructor<ToArgs<MTProto.updateChannelMessageViews>>
  UpdateChatParticipantAdmin: TlConstructor<ToArgs<MTProto.updateChatParticipantAdmin>>
  UpdateNewStickerSet: TlConstructor<ToArgs<MTProto.updateNewStickerSet>>
  UpdateStickerSetsOrder: TlConstructor<ToArgs<MTProto.updateStickerSetsOrder>>
  UpdateStickerSets: TlConstructor<ToArgs<MTProto.updateStickerSets>>
  UpdateSavedGifs: TlConstructor<ToArgs<MTProto.updateSavedGifs>>
  UpdateBotInlineQuery: TlConstructor<ToArgs<MTProto.updateBotInlineQuery>>
  UpdateBotInlineSend: TlConstructor<ToArgs<MTProto.updateBotInlineSend>>
  UpdateEditChannelMessage: TlConstructor<ToArgs<MTProto.updateEditChannelMessage>>
  UpdateChannelPinnedMessage: TlConstructor<ToArgs<MTProto.updateChannelPinnedMessage>>
  UpdateBotCallbackQuery: TlConstructor<ToArgs<MTProto.updateBotCallbackQuery>>
  UpdateEditMessage: TlConstructor<ToArgs<MTProto.updateEditMessage>>
  UpdateInlineBotCallbackQuery: TlConstructor<ToArgs<MTProto.updateInlineBotCallbackQuery>>
  UpdateReadChannelOutbox: TlConstructor<ToArgs<MTProto.updateReadChannelOutbox>>
  UpdateDraftMessage: TlConstructor<ToArgs<MTProto.updateDraftMessage>>
  UpdateReadFeaturedStickers: TlConstructor<ToArgs<MTProto.updateReadFeaturedStickers>>
  UpdateRecentStickers: TlConstructor<ToArgs<MTProto.updateRecentStickers>>
  UpdateConfig: TlConstructor<ToArgs<MTProto.updateConfig>>
  UpdatePtsChanged: TlConstructor<ToArgs<MTProto.updatePtsChanged>>
  UpdateChannelWebPage: TlConstructor<ToArgs<MTProto.updateChannelWebPage>>
  UpdateDialogPinned: TlConstructor<ToArgs<MTProto.updateDialogPinned>>
  UpdatePinnedDialogs: TlConstructor<ToArgs<MTProto.updatePinnedDialogs>>
  UpdateBotWebhookJSON: TlConstructor<ToArgs<MTProto.updateBotWebhookJSON>>
  UpdateBotWebhookJSONQuery: TlConstructor<ToArgs<MTProto.updateBotWebhookJSONQuery>>
  UpdateBotShippingQuery: TlConstructor<ToArgs<MTProto.updateBotShippingQuery>>
  UpdateBotPrecheckoutQuery: TlConstructor<ToArgs<MTProto.updateBotPrecheckoutQuery>>
  UpdatePhoneCall: TlConstructor<ToArgs<MTProto.updatePhoneCall>>
  UpdateLangPackTooLong: TlConstructor<ToArgs<MTProto.updateLangPackTooLong>>
  UpdateLangPack: TlConstructor<ToArgs<MTProto.updateLangPack>>
  UpdateFavedStickers: TlConstructor<ToArgs<MTProto.updateFavedStickers>>
  UpdateChannelReadMessagesContents: TlConstructor<ToArgs<MTProto.updateChannelReadMessagesContents>>
  UpdateContactsReset: TlConstructor<ToArgs<MTProto.updateContactsReset>>
  UpdateChannelAvailableMessages: TlConstructor<ToArgs<MTProto.updateChannelAvailableMessages>>
  UpdateDialogUnreadMark: TlConstructor<ToArgs<MTProto.updateDialogUnreadMark>>
  UpdateUserPinnedMessage: TlConstructor<ToArgs<MTProto.updateUserPinnedMessage>>
  UpdateChatPinnedMessage: TlConstructor<ToArgs<MTProto.updateChatPinnedMessage>>
  UpdateMessagePoll: TlConstructor<ToArgs<MTProto.updateMessagePoll>>
  UpdateChatDefaultBannedRights: TlConstructor<ToArgs<MTProto.updateChatDefaultBannedRights>>
  UpdateFolderPeers: TlConstructor<ToArgs<MTProto.updateFolderPeers>>
  UpdatePeerSettings: TlConstructor<ToArgs<MTProto.updatePeerSettings>>
  UpdatePeerLocated: TlConstructor<ToArgs<MTProto.updatePeerLocated>>
  UpdateNewScheduledMessage: TlConstructor<ToArgs<MTProto.updateNewScheduledMessage>>
  UpdateDeleteScheduledMessages: TlConstructor<ToArgs<MTProto.updateDeleteScheduledMessages>>
  UpdateTheme: TlConstructor<ToArgs<MTProto.updateTheme>>
  UpdatesTooLong: TlConstructor<ToArgs<MTProto.updatesTooLong>>
  UpdateShortMessage: TlConstructor<ToArgs<MTProto.updateShortMessage>>
  UpdateShortChatMessage: TlConstructor<ToArgs<MTProto.updateShortChatMessage>>
  UpdateShort: TlConstructor<ToArgs<MTProto.updateShort>>
  UpdatesCombined: TlConstructor<ToArgs<MTProto.updatesCombined>>
  Updates: TlConstructor<ToArgs<MTProto.updates>>
  UpdateShortSentMessage: TlConstructor<ToArgs<MTProto.updateShortSentMessage>>
  DcOption: TlConstructor<ToArgs<MTProto.dcOption>>
  Config: TlConstructor<ToArgs<MTProto.config>>
  NearestDc: TlConstructor<ToArgs<MTProto.nearestDc>>
  EncryptedChatEmpty: TlConstructor<ToArgs<MTProto.encryptedChatEmpty>>
  EncryptedChatWaiting: TlConstructor<ToArgs<MTProto.encryptedChatWaiting>>
  EncryptedChatRequested: TlConstructor<ToArgs<MTProto.encryptedChatRequested>>
  EncryptedChat: TlConstructor<ToArgs<MTProto.encryptedChat>>
  EncryptedChatDiscarded: TlConstructor<ToArgs<MTProto.encryptedChatDiscarded>>
  InputEncryptedChat: TlConstructor<ToArgs<MTProto.inputEncryptedChat>>
  EncryptedFileEmpty: TlConstructor<ToArgs<MTProto.encryptedFileEmpty>>
  EncryptedFile: TlConstructor<ToArgs<MTProto.encryptedFile>>
  InputEncryptedFileEmpty: TlConstructor<ToArgs<MTProto.inputEncryptedFileEmpty>>
  InputEncryptedFileUploaded: TlConstructor<ToArgs<MTProto.inputEncryptedFileUploaded>>
  InputEncryptedFile: TlConstructor<ToArgs<MTProto.inputEncryptedFile>>
  InputEncryptedFileBigUploaded: TlConstructor<ToArgs<MTProto.inputEncryptedFileBigUploaded>>
  EncryptedMessage: TlConstructor<ToArgs<MTProto.encryptedMessage>>
  EncryptedMessageService: TlConstructor<ToArgs<MTProto.encryptedMessageService>>
  InputDocumentEmpty: TlConstructor<ToArgs<MTProto.inputDocumentEmpty>>
  InputDocument: TlConstructor<ToArgs<MTProto.inputDocument>>
  DocumentEmpty: TlConstructor<ToArgs<MTProto.documentEmpty>>
  Document: TlConstructor<ToArgs<MTProto.document>>
  NotifyPeer: TlConstructor<ToArgs<MTProto.notifyPeer>>
  NotifyUsers: TlConstructor<ToArgs<MTProto.notifyUsers>>
  NotifyChats: TlConstructor<ToArgs<MTProto.notifyChats>>
  NotifyBroadcasts: TlConstructor<ToArgs<MTProto.notifyBroadcasts>>
  SendMessageTypingAction: TlConstructor<ToArgs<MTProto.sendMessageTypingAction>>
  SendMessageCancelAction: TlConstructor<ToArgs<MTProto.sendMessageCancelAction>>
  SendMessageRecordVideoAction: TlConstructor<ToArgs<MTProto.sendMessageRecordVideoAction>>
  SendMessageUploadVideoAction: TlConstructor<ToArgs<MTProto.sendMessageUploadVideoAction>>
  SendMessageRecordAudioAction: TlConstructor<ToArgs<MTProto.sendMessageRecordAudioAction>>
  SendMessageUploadAudioAction: TlConstructor<ToArgs<MTProto.sendMessageUploadAudioAction>>
  SendMessageUploadPhotoAction: TlConstructor<ToArgs<MTProto.sendMessageUploadPhotoAction>>
  SendMessageUploadDocumentAction: TlConstructor<ToArgs<MTProto.sendMessageUploadDocumentAction>>
  SendMessageGeoLocationAction: TlConstructor<ToArgs<MTProto.sendMessageGeoLocationAction>>
  SendMessageChooseContactAction: TlConstructor<ToArgs<MTProto.sendMessageChooseContactAction>>
  SendMessageGamePlayAction: TlConstructor<ToArgs<MTProto.sendMessageGamePlayAction>>
  SendMessageRecordRoundAction: TlConstructor<ToArgs<MTProto.sendMessageRecordRoundAction>>
  SendMessageUploadRoundAction: TlConstructor<ToArgs<MTProto.sendMessageUploadRoundAction>>
  InputPrivacyKeyStatusTimestamp: TlConstructor<ToArgs<MTProto.inputPrivacyKeyStatusTimestamp>>
  InputPrivacyKeyChatInvite: TlConstructor<ToArgs<MTProto.inputPrivacyKeyChatInvite>>
  InputPrivacyKeyPhoneCall: TlConstructor<ToArgs<MTProto.inputPrivacyKeyPhoneCall>>
  InputPrivacyKeyPhoneP2P: TlConstructor<ToArgs<MTProto.inputPrivacyKeyPhoneP2P>>
  InputPrivacyKeyForwards: TlConstructor<ToArgs<MTProto.inputPrivacyKeyForwards>>
  InputPrivacyKeyProfilePhoto: TlConstructor<ToArgs<MTProto.inputPrivacyKeyProfilePhoto>>
  InputPrivacyKeyPhoneNumber: TlConstructor<ToArgs<MTProto.inputPrivacyKeyPhoneNumber>>
  InputPrivacyKeyAddedByPhone: TlConstructor<ToArgs<MTProto.inputPrivacyKeyAddedByPhone>>
  PrivacyKeyStatusTimestamp: TlConstructor<ToArgs<MTProto.privacyKeyStatusTimestamp>>
  PrivacyKeyChatInvite: TlConstructor<ToArgs<MTProto.privacyKeyChatInvite>>
  PrivacyKeyPhoneCall: TlConstructor<ToArgs<MTProto.privacyKeyPhoneCall>>
  PrivacyKeyPhoneP2P: TlConstructor<ToArgs<MTProto.privacyKeyPhoneP2P>>
  PrivacyKeyForwards: TlConstructor<ToArgs<MTProto.privacyKeyForwards>>
  PrivacyKeyProfilePhoto: TlConstructor<ToArgs<MTProto.privacyKeyProfilePhoto>>
  PrivacyKeyPhoneNumber: TlConstructor<ToArgs<MTProto.privacyKeyPhoneNumber>>
  PrivacyKeyAddedByPhone: TlConstructor<ToArgs<MTProto.privacyKeyAddedByPhone>>
  InputPrivacyValueAllowContacts: TlConstructor<ToArgs<MTProto.inputPrivacyValueAllowContacts>>
  InputPrivacyValueAllowAll: TlConstructor<ToArgs<MTProto.inputPrivacyValueAllowAll>>
  InputPrivacyValueAllowUsers: TlConstructor<ToArgs<MTProto.inputPrivacyValueAllowUsers>>
  InputPrivacyValueDisallowContacts: TlConstructor<ToArgs<MTProto.inputPrivacyValueDisallowContacts>>
  InputPrivacyValueDisallowAll: TlConstructor<ToArgs<MTProto.inputPrivacyValueDisallowAll>>
  InputPrivacyValueDisallowUsers: TlConstructor<ToArgs<MTProto.inputPrivacyValueDisallowUsers>>
  InputPrivacyValueAllowChatParticipants: TlConstructor<ToArgs<MTProto.inputPrivacyValueAllowChatParticipants>>
  InputPrivacyValueDisallowChatParticipants: TlConstructor<ToArgs<MTProto.inputPrivacyValueDisallowChatParticipants>>
  PrivacyValueAllowContacts: TlConstructor<ToArgs<MTProto.privacyValueAllowContacts>>
  PrivacyValueAllowAll: TlConstructor<ToArgs<MTProto.privacyValueAllowAll>>
  PrivacyValueAllowUsers: TlConstructor<ToArgs<MTProto.privacyValueAllowUsers>>
  PrivacyValueDisallowContacts: TlConstructor<ToArgs<MTProto.privacyValueDisallowContacts>>
  PrivacyValueDisallowAll: TlConstructor<ToArgs<MTProto.privacyValueDisallowAll>>
  PrivacyValueDisallowUsers: TlConstructor<ToArgs<MTProto.privacyValueDisallowUsers>>
  PrivacyValueAllowChatParticipants: TlConstructor<ToArgs<MTProto.privacyValueAllowChatParticipants>>
  PrivacyValueDisallowChatParticipants: TlConstructor<ToArgs<MTProto.privacyValueDisallowChatParticipants>>
  AccountDaysTTL: TlConstructor<ToArgs<MTProto.accountDaysTTL>>
  DocumentAttributeImageSize: TlConstructor<ToArgs<MTProto.documentAttributeImageSize>>
  DocumentAttributeAnimated: TlConstructor<ToArgs<MTProto.documentAttributeAnimated>>
  DocumentAttributeSticker: TlConstructor<ToArgs<MTProto.documentAttributeSticker>>
  DocumentAttributeVideo: TlConstructor<ToArgs<MTProto.documentAttributeVideo>>
  DocumentAttributeAudio: TlConstructor<ToArgs<MTProto.documentAttributeAudio>>
  DocumentAttributeFilename: TlConstructor<ToArgs<MTProto.documentAttributeFilename>>
  DocumentAttributeHasStickers: TlConstructor<ToArgs<MTProto.documentAttributeHasStickers>>
  StickerPack: TlConstructor<ToArgs<MTProto.stickerPack>>
  WebPageEmpty: TlConstructor<ToArgs<MTProto.webPageEmpty>>
  WebPagePending: TlConstructor<ToArgs<MTProto.webPagePending>>
  WebPage: TlConstructor<ToArgs<MTProto.webPage>>
  WebPageNotModified: TlConstructor<ToArgs<MTProto.webPageNotModified>>
  Authorization: TlConstructor<ToArgs<MTProto.authorization>>
  ReceivedNotifyMessage: TlConstructor<ToArgs<MTProto.receivedNotifyMessage>>
  ChatInviteEmpty: TlConstructor<ToArgs<MTProto.chatInviteEmpty>>
  ChatInviteExported: TlConstructor<ToArgs<MTProto.chatInviteExported>>
  ChatInviteAlready: TlConstructor<ToArgs<MTProto.chatInviteAlready>>
  ChatInvite: TlConstructor<ToArgs<MTProto.chatInvite>>
  InputStickerSetEmpty: TlConstructor<ToArgs<MTProto.inputStickerSetEmpty>>
  InputStickerSetID: TlConstructor<ToArgs<MTProto.inputStickerSetID>>
  InputStickerSetShortName: TlConstructor<ToArgs<MTProto.inputStickerSetShortName>>
  InputStickerSetAnimatedEmoji: TlConstructor<ToArgs<MTProto.inputStickerSetAnimatedEmoji>>
  StickerSet: TlConstructor<ToArgs<MTProto.stickerSet>>
  BotCommand: TlConstructor<ToArgs<MTProto.botCommand>>
  BotInfo: TlConstructor<ToArgs<MTProto.botInfo>>
  KeyboardButton: TlConstructor<ToArgs<MTProto.keyboardButton>>
  KeyboardButtonUrl: TlConstructor<ToArgs<MTProto.keyboardButtonUrl>>
  KeyboardButtonCallback: TlConstructor<ToArgs<MTProto.keyboardButtonCallback>>
  KeyboardButtonRequestPhone: TlConstructor<ToArgs<MTProto.keyboardButtonRequestPhone>>
  KeyboardButtonRequestGeoLocation: TlConstructor<ToArgs<MTProto.keyboardButtonRequestGeoLocation>>
  KeyboardButtonSwitchInline: TlConstructor<ToArgs<MTProto.keyboardButtonSwitchInline>>
  KeyboardButtonGame: TlConstructor<ToArgs<MTProto.keyboardButtonGame>>
  KeyboardButtonBuy: TlConstructor<ToArgs<MTProto.keyboardButtonBuy>>
  KeyboardButtonUrlAuth: TlConstructor<ToArgs<MTProto.keyboardButtonUrlAuth>>
  InputKeyboardButtonUrlAuth: TlConstructor<ToArgs<MTProto.inputKeyboardButtonUrlAuth>>
  KeyboardButtonRow: TlConstructor<ToArgs<MTProto.keyboardButtonRow>>
  ReplyKeyboardHide: TlConstructor<ToArgs<MTProto.replyKeyboardHide>>
  ReplyKeyboardForceReply: TlConstructor<ToArgs<MTProto.replyKeyboardForceReply>>
  ReplyKeyboardMarkup: TlConstructor<ToArgs<MTProto.replyKeyboardMarkup>>
  ReplyInlineMarkup: TlConstructor<ToArgs<MTProto.replyInlineMarkup>>
  MessageEntityUnknown: TlConstructor<ToArgs<MTProto.messageEntityUnknown>>
  MessageEntityMention: TlConstructor<ToArgs<MTProto.messageEntityMention>>
  MessageEntityHashtag: TlConstructor<ToArgs<MTProto.messageEntityHashtag>>
  MessageEntityBotCommand: TlConstructor<ToArgs<MTProto.messageEntityBotCommand>>
  MessageEntityUrl: TlConstructor<ToArgs<MTProto.messageEntityUrl>>
  MessageEntityEmail: TlConstructor<ToArgs<MTProto.messageEntityEmail>>
  MessageEntityBold: TlConstructor<ToArgs<MTProto.messageEntityBold>>
  MessageEntityItalic: TlConstructor<ToArgs<MTProto.messageEntityItalic>>
  MessageEntityCode: TlConstructor<ToArgs<MTProto.messageEntityCode>>
  MessageEntityPre: TlConstructor<ToArgs<MTProto.messageEntityPre>>
  MessageEntityTextUrl: TlConstructor<ToArgs<MTProto.messageEntityTextUrl>>
  MessageEntityMentionName: TlConstructor<ToArgs<MTProto.messageEntityMentionName>>
  InputMessageEntityMentionName: TlConstructor<ToArgs<MTProto.inputMessageEntityMentionName>>
  MessageEntityPhone: TlConstructor<ToArgs<MTProto.messageEntityPhone>>
  MessageEntityCashtag: TlConstructor<ToArgs<MTProto.messageEntityCashtag>>
  MessageEntityUnderline: TlConstructor<ToArgs<MTProto.messageEntityUnderline>>
  MessageEntityStrike: TlConstructor<ToArgs<MTProto.messageEntityStrike>>
  MessageEntityBlockquote: TlConstructor<ToArgs<MTProto.messageEntityBlockquote>>
  InputChannelEmpty: TlConstructor<ToArgs<MTProto.inputChannelEmpty>>
  InputChannel: TlConstructor<ToArgs<MTProto.inputChannel>>
  InputChannelFromMessage: TlConstructor<ToArgs<MTProto.inputChannelFromMessage>>
  MessageRange: TlConstructor<ToArgs<MTProto.messageRange>>
  ChannelMessagesFilterEmpty: TlConstructor<ToArgs<MTProto.channelMessagesFilterEmpty>>
  ChannelMessagesFilter: TlConstructor<ToArgs<MTProto.channelMessagesFilter>>
  ChannelParticipant: TlConstructor<ToArgs<MTProto.channelParticipant>>
  ChannelParticipantSelf: TlConstructor<ToArgs<MTProto.channelParticipantSelf>>
  ChannelParticipantCreator: TlConstructor<ToArgs<MTProto.channelParticipantCreator>>
  ChannelParticipantAdmin: TlConstructor<ToArgs<MTProto.channelParticipantAdmin>>
  ChannelParticipantBanned: TlConstructor<ToArgs<MTProto.channelParticipantBanned>>
  ChannelParticipantsRecent: TlConstructor<ToArgs<MTProto.channelParticipantsRecent>>
  ChannelParticipantsAdmins: TlConstructor<ToArgs<MTProto.channelParticipantsAdmins>>
  ChannelParticipantsKicked: TlConstructor<ToArgs<MTProto.channelParticipantsKicked>>
  ChannelParticipantsBots: TlConstructor<ToArgs<MTProto.channelParticipantsBots>>
  ChannelParticipantsBanned: TlConstructor<ToArgs<MTProto.channelParticipantsBanned>>
  ChannelParticipantsSearch: TlConstructor<ToArgs<MTProto.channelParticipantsSearch>>
  ChannelParticipantsContacts: TlConstructor<ToArgs<MTProto.channelParticipantsContacts>>
  FoundGif: TlConstructor<ToArgs<MTProto.foundGif>>
  FoundGifCached: TlConstructor<ToArgs<MTProto.foundGifCached>>
  InputBotInlineMessageMediaAuto: TlConstructor<ToArgs<MTProto.inputBotInlineMessageMediaAuto>>
  InputBotInlineMessageText: TlConstructor<ToArgs<MTProto.inputBotInlineMessageText>>
  InputBotInlineMessageMediaGeo: TlConstructor<ToArgs<MTProto.inputBotInlineMessageMediaGeo>>
  InputBotInlineMessageMediaVenue: TlConstructor<ToArgs<MTProto.inputBotInlineMessageMediaVenue>>
  InputBotInlineMessageMediaContact: TlConstructor<ToArgs<MTProto.inputBotInlineMessageMediaContact>>
  InputBotInlineMessageGame: TlConstructor<ToArgs<MTProto.inputBotInlineMessageGame>>
  InputBotInlineResult: TlConstructor<ToArgs<MTProto.inputBotInlineResult>>
  InputBotInlineResultPhoto: TlConstructor<ToArgs<MTProto.inputBotInlineResultPhoto>>
  InputBotInlineResultDocument: TlConstructor<ToArgs<MTProto.inputBotInlineResultDocument>>
  InputBotInlineResultGame: TlConstructor<ToArgs<MTProto.inputBotInlineResultGame>>
  BotInlineMessageMediaAuto: TlConstructor<ToArgs<MTProto.botInlineMessageMediaAuto>>
  BotInlineMessageText: TlConstructor<ToArgs<MTProto.botInlineMessageText>>
  BotInlineMessageMediaGeo: TlConstructor<ToArgs<MTProto.botInlineMessageMediaGeo>>
  BotInlineMessageMediaVenue: TlConstructor<ToArgs<MTProto.botInlineMessageMediaVenue>>
  BotInlineMessageMediaContact: TlConstructor<ToArgs<MTProto.botInlineMessageMediaContact>>
  BotInlineResult: TlConstructor<ToArgs<MTProto.botInlineResult>>
  BotInlineMediaResult: TlConstructor<ToArgs<MTProto.botInlineMediaResult>>
  ExportedMessageLink: TlConstructor<ToArgs<MTProto.exportedMessageLink>>
  MessageFwdHeader: TlConstructor<ToArgs<MTProto.messageFwdHeader>>
  InputBotInlineMessageID: TlConstructor<ToArgs<MTProto.inputBotInlineMessageID>>
  InlineBotSwitchPM: TlConstructor<ToArgs<MTProto.inlineBotSwitchPM>>
  TopPeer: TlConstructor<ToArgs<MTProto.topPeer>>
  TopPeerCategoryBotsPM: TlConstructor<ToArgs<MTProto.topPeerCategoryBotsPM>>
  TopPeerCategoryBotsInline: TlConstructor<ToArgs<MTProto.topPeerCategoryBotsInline>>
  TopPeerCategoryCorrespondents: TlConstructor<ToArgs<MTProto.topPeerCategoryCorrespondents>>
  TopPeerCategoryGroups: TlConstructor<ToArgs<MTProto.topPeerCategoryGroups>>
  TopPeerCategoryChannels: TlConstructor<ToArgs<MTProto.topPeerCategoryChannels>>
  TopPeerCategoryPhoneCalls: TlConstructor<ToArgs<MTProto.topPeerCategoryPhoneCalls>>
  TopPeerCategoryForwardUsers: TlConstructor<ToArgs<MTProto.topPeerCategoryForwardUsers>>
  TopPeerCategoryForwardChats: TlConstructor<ToArgs<MTProto.topPeerCategoryForwardChats>>
  TopPeerCategoryPeers: TlConstructor<ToArgs<MTProto.topPeerCategoryPeers>>
  DraftMessageEmpty: TlConstructor<ToArgs<MTProto.draftMessageEmpty>>
  DraftMessage: TlConstructor<ToArgs<MTProto.draftMessage>>
  StickerSetCovered: TlConstructor<ToArgs<MTProto.stickerSetCovered>>
  StickerSetMultiCovered: TlConstructor<ToArgs<MTProto.stickerSetMultiCovered>>
  MaskCoords: TlConstructor<ToArgs<MTProto.maskCoords>>
  InputStickeredMediaPhoto: TlConstructor<ToArgs<MTProto.inputStickeredMediaPhoto>>
  InputStickeredMediaDocument: TlConstructor<ToArgs<MTProto.inputStickeredMediaDocument>>
  Game: TlConstructor<ToArgs<MTProto.game>>
  InputGameID: TlConstructor<ToArgs<MTProto.inputGameID>>
  InputGameShortName: TlConstructor<ToArgs<MTProto.inputGameShortName>>
  HighScore: TlConstructor<ToArgs<MTProto.highScore>>
  TextEmpty: TlConstructor<ToArgs<MTProto.textEmpty>>
  TextPlain: TlConstructor<ToArgs<MTProto.textPlain>>
  TextBold: TlConstructor<ToArgs<MTProto.textBold>>
  TextItalic: TlConstructor<ToArgs<MTProto.textItalic>>
  TextUnderline: TlConstructor<ToArgs<MTProto.textUnderline>>
  TextStrike: TlConstructor<ToArgs<MTProto.textStrike>>
  TextFixed: TlConstructor<ToArgs<MTProto.textFixed>>
  TextUrl: TlConstructor<ToArgs<MTProto.textUrl>>
  TextEmail: TlConstructor<ToArgs<MTProto.textEmail>>
  TextConcat: TlConstructor<ToArgs<MTProto.textConcat>>
  TextSubscript: TlConstructor<ToArgs<MTProto.textSubscript>>
  TextSuperscript: TlConstructor<ToArgs<MTProto.textSuperscript>>
  TextMarked: TlConstructor<ToArgs<MTProto.textMarked>>
  TextPhone: TlConstructor<ToArgs<MTProto.textPhone>>
  TextImage: TlConstructor<ToArgs<MTProto.textImage>>
  TextAnchor: TlConstructor<ToArgs<MTProto.textAnchor>>
  PageBlockUnsupported: TlConstructor<ToArgs<MTProto.pageBlockUnsupported>>
  PageBlockTitle: TlConstructor<ToArgs<MTProto.pageBlockTitle>>
  PageBlockSubtitle: TlConstructor<ToArgs<MTProto.pageBlockSubtitle>>
  PageBlockAuthorDate: TlConstructor<ToArgs<MTProto.pageBlockAuthorDate>>
  PageBlockHeader: TlConstructor<ToArgs<MTProto.pageBlockHeader>>
  PageBlockSubheader: TlConstructor<ToArgs<MTProto.pageBlockSubheader>>
  PageBlockParagraph: TlConstructor<ToArgs<MTProto.pageBlockParagraph>>
  PageBlockPreformatted: TlConstructor<ToArgs<MTProto.pageBlockPreformatted>>
  PageBlockFooter: TlConstructor<ToArgs<MTProto.pageBlockFooter>>
  PageBlockDivider: TlConstructor<ToArgs<MTProto.pageBlockDivider>>
  PageBlockAnchor: TlConstructor<ToArgs<MTProto.pageBlockAnchor>>
  PageBlockList: TlConstructor<ToArgs<MTProto.pageBlockList>>
  PageBlockBlockquote: TlConstructor<ToArgs<MTProto.pageBlockBlockquote>>
  PageBlockPullquote: TlConstructor<ToArgs<MTProto.pageBlockPullquote>>
  PageBlockPhoto: TlConstructor<ToArgs<MTProto.pageBlockPhoto>>
  PageBlockVideo: TlConstructor<ToArgs<MTProto.pageBlockVideo>>
  PageBlockCover: TlConstructor<ToArgs<MTProto.pageBlockCover>>
  PageBlockEmbed: TlConstructor<ToArgs<MTProto.pageBlockEmbed>>
  PageBlockEmbedPost: TlConstructor<ToArgs<MTProto.pageBlockEmbedPost>>
  PageBlockCollage: TlConstructor<ToArgs<MTProto.pageBlockCollage>>
  PageBlockSlideshow: TlConstructor<ToArgs<MTProto.pageBlockSlideshow>>
  PageBlockChannel: TlConstructor<ToArgs<MTProto.pageBlockChannel>>
  PageBlockAudio: TlConstructor<ToArgs<MTProto.pageBlockAudio>>
  PageBlockKicker: TlConstructor<ToArgs<MTProto.pageBlockKicker>>
  PageBlockTable: TlConstructor<ToArgs<MTProto.pageBlockTable>>
  PageBlockOrderedList: TlConstructor<ToArgs<MTProto.pageBlockOrderedList>>
  PageBlockDetails: TlConstructor<ToArgs<MTProto.pageBlockDetails>>
  PageBlockRelatedArticles: TlConstructor<ToArgs<MTProto.pageBlockRelatedArticles>>
  PageBlockMap: TlConstructor<ToArgs<MTProto.pageBlockMap>>
  PhoneCallDiscardReasonMissed: TlConstructor<ToArgs<MTProto.phoneCallDiscardReasonMissed>>
  PhoneCallDiscardReasonDisconnect: TlConstructor<ToArgs<MTProto.phoneCallDiscardReasonDisconnect>>
  PhoneCallDiscardReasonHangup: TlConstructor<ToArgs<MTProto.phoneCallDiscardReasonHangup>>
  PhoneCallDiscardReasonBusy: TlConstructor<ToArgs<MTProto.phoneCallDiscardReasonBusy>>
  DataJSON: TlConstructor<ToArgs<MTProto.dataJSON>>
  LabeledPrice: TlConstructor<ToArgs<MTProto.labeledPrice>>
  Invoice: TlConstructor<ToArgs<MTProto.invoice>>
  PaymentCharge: TlConstructor<ToArgs<MTProto.paymentCharge>>
  PostAddress: TlConstructor<ToArgs<MTProto.postAddress>>
  PaymentRequestedInfo: TlConstructor<ToArgs<MTProto.paymentRequestedInfo>>
  PaymentSavedCredentialsCard: TlConstructor<ToArgs<MTProto.paymentSavedCredentialsCard>>
  WebDocument: TlConstructor<ToArgs<MTProto.webDocument>>
  WebDocumentNoProxy: TlConstructor<ToArgs<MTProto.webDocumentNoProxy>>
  InputWebDocument: TlConstructor<ToArgs<MTProto.inputWebDocument>>
  InputWebFileLocation: TlConstructor<ToArgs<MTProto.inputWebFileLocation>>
  InputWebFileGeoPointLocation: TlConstructor<ToArgs<MTProto.inputWebFileGeoPointLocation>>
  InputPaymentCredentialsSaved: TlConstructor<ToArgs<MTProto.inputPaymentCredentialsSaved>>
  InputPaymentCredentials: TlConstructor<ToArgs<MTProto.inputPaymentCredentials>>
  InputPaymentCredentialsApplePay: TlConstructor<ToArgs<MTProto.inputPaymentCredentialsApplePay>>
  InputPaymentCredentialsAndroidPay: TlConstructor<ToArgs<MTProto.inputPaymentCredentialsAndroidPay>>
  ShippingOption: TlConstructor<ToArgs<MTProto.shippingOption>>
  InputStickerSetItem: TlConstructor<ToArgs<MTProto.inputStickerSetItem>>
  InputPhoneCall: TlConstructor<ToArgs<MTProto.inputPhoneCall>>
  PhoneCallEmpty: TlConstructor<ToArgs<MTProto.phoneCallEmpty>>
  PhoneCallWaiting: TlConstructor<ToArgs<MTProto.phoneCallWaiting>>
  PhoneCallRequested: TlConstructor<ToArgs<MTProto.phoneCallRequested>>
  PhoneCallAccepted: TlConstructor<ToArgs<MTProto.phoneCallAccepted>>
  PhoneCall: TlConstructor<ToArgs<MTProto.phoneCall>>
  PhoneCallDiscarded: TlConstructor<ToArgs<MTProto.phoneCallDiscarded>>
  PhoneConnection: TlConstructor<ToArgs<MTProto.phoneConnection>>
  PhoneCallProtocol: TlConstructor<ToArgs<MTProto.phoneCallProtocol>>
  CdnPublicKey: TlConstructor<ToArgs<MTProto.cdnPublicKey>>
  CdnConfig: TlConstructor<ToArgs<MTProto.cdnConfig>>
  LangPackString: TlConstructor<ToArgs<MTProto.langPackString>>
  LangPackStringPluralized: TlConstructor<ToArgs<MTProto.langPackStringPluralized>>
  LangPackStringDeleted: TlConstructor<ToArgs<MTProto.langPackStringDeleted>>
  LangPackDifference: TlConstructor<ToArgs<MTProto.langPackDifference>>
  LangPackLanguage: TlConstructor<ToArgs<MTProto.langPackLanguage>>
  ChannelAdminLogEventActionChangeTitle: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeTitle>>
  ChannelAdminLogEventActionChangeAbout: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeAbout>>
  ChannelAdminLogEventActionChangeUsername: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeUsername>>
  ChannelAdminLogEventActionChangePhoto: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangePhoto>>
  ChannelAdminLogEventActionToggleInvites: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionToggleInvites>>
  ChannelAdminLogEventActionToggleSignatures: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionToggleSignatures>>
  ChannelAdminLogEventActionUpdatePinned: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionUpdatePinned>>
  ChannelAdminLogEventActionEditMessage: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionEditMessage>>
  ChannelAdminLogEventActionDeleteMessage: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionDeleteMessage>>
  ChannelAdminLogEventActionParticipantJoin: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionParticipantJoin>>
  ChannelAdminLogEventActionParticipantLeave: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionParticipantLeave>>
  ChannelAdminLogEventActionParticipantInvite: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionParticipantInvite>>
  ChannelAdminLogEventActionParticipantToggleBan: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionParticipantToggleBan>>
  ChannelAdminLogEventActionParticipantToggleAdmin: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionParticipantToggleAdmin>>
  ChannelAdminLogEventActionChangeStickerSet: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeStickerSet>>
  ChannelAdminLogEventActionTogglePreHistoryHidden: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionTogglePreHistoryHidden>>
  ChannelAdminLogEventActionDefaultBannedRights: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionDefaultBannedRights>>
  ChannelAdminLogEventActionStopPoll: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionStopPoll>>
  ChannelAdminLogEventActionChangeLinkedChat: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeLinkedChat>>
  ChannelAdminLogEventActionChangeLocation: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionChangeLocation>>
  ChannelAdminLogEventActionToggleSlowMode: TlConstructor<ToArgs<MTProto.channelAdminLogEventActionToggleSlowMode>>
  ChannelAdminLogEvent: TlConstructor<ToArgs<MTProto.channelAdminLogEvent>>
  ChannelAdminLogEventsFilter: TlConstructor<ToArgs<MTProto.channelAdminLogEventsFilter>>
  PopularContact: TlConstructor<ToArgs<MTProto.popularContact>>
  RecentMeUrlUnknown: TlConstructor<ToArgs<MTProto.recentMeUrlUnknown>>
  RecentMeUrlUser: TlConstructor<ToArgs<MTProto.recentMeUrlUser>>
  RecentMeUrlChat: TlConstructor<ToArgs<MTProto.recentMeUrlChat>>
  RecentMeUrlChatInvite: TlConstructor<ToArgs<MTProto.recentMeUrlChatInvite>>
  RecentMeUrlStickerSet: TlConstructor<ToArgs<MTProto.recentMeUrlStickerSet>>
  InputSingleMedia: TlConstructor<ToArgs<MTProto.inputSingleMedia>>
  WebAuthorization: TlConstructor<ToArgs<MTProto.webAuthorization>>
  InputMessageID: TlConstructor<ToArgs<MTProto.inputMessageID>>
  InputMessageReplyTo: TlConstructor<ToArgs<MTProto.inputMessageReplyTo>>
  InputMessagePinned: TlConstructor<ToArgs<MTProto.inputMessagePinned>>
  InputDialogPeer: TlConstructor<ToArgs<MTProto.inputDialogPeer>>
  InputDialogPeerFolder: TlConstructor<ToArgs<MTProto.inputDialogPeerFolder>>
  DialogPeer: TlConstructor<ToArgs<MTProto.dialogPeer>>
  DialogPeerFolder: TlConstructor<ToArgs<MTProto.dialogPeerFolder>>
  FileHash: TlConstructor<ToArgs<MTProto.fileHash>>
  InputClientProxy: TlConstructor<ToArgs<MTProto.inputClientProxy>>
  InputSecureFileUploaded: TlConstructor<ToArgs<MTProto.inputSecureFileUploaded>>
  InputSecureFile: TlConstructor<ToArgs<MTProto.inputSecureFile>>
  SecureFileEmpty: TlConstructor<ToArgs<MTProto.secureFileEmpty>>
  SecureFile: TlConstructor<ToArgs<MTProto.secureFile>>
  SecureData: TlConstructor<ToArgs<MTProto.secureData>>
  SecurePlainPhone: TlConstructor<ToArgs<MTProto.securePlainPhone>>
  SecurePlainEmail: TlConstructor<ToArgs<MTProto.securePlainEmail>>
  SecureValueTypePersonalDetails: TlConstructor<ToArgs<MTProto.secureValueTypePersonalDetails>>
  SecureValueTypePassport: TlConstructor<ToArgs<MTProto.secureValueTypePassport>>
  SecureValueTypeDriverLicense: TlConstructor<ToArgs<MTProto.secureValueTypeDriverLicense>>
  SecureValueTypeIdentityCard: TlConstructor<ToArgs<MTProto.secureValueTypeIdentityCard>>
  SecureValueTypeInternalPassport: TlConstructor<ToArgs<MTProto.secureValueTypeInternalPassport>>
  SecureValueTypeAddress: TlConstructor<ToArgs<MTProto.secureValueTypeAddress>>
  SecureValueTypeUtilityBill: TlConstructor<ToArgs<MTProto.secureValueTypeUtilityBill>>
  SecureValueTypeBankStatement: TlConstructor<ToArgs<MTProto.secureValueTypeBankStatement>>
  SecureValueTypeRentalAgreement: TlConstructor<ToArgs<MTProto.secureValueTypeRentalAgreement>>
  SecureValueTypePassportRegistration: TlConstructor<ToArgs<MTProto.secureValueTypePassportRegistration>>
  SecureValueTypeTemporaryRegistration: TlConstructor<ToArgs<MTProto.secureValueTypeTemporaryRegistration>>
  SecureValueTypePhone: TlConstructor<ToArgs<MTProto.secureValueTypePhone>>
  SecureValueTypeEmail: TlConstructor<ToArgs<MTProto.secureValueTypeEmail>>
  SecureValue: TlConstructor<ToArgs<MTProto.secureValue>>
  InputSecureValue: TlConstructor<ToArgs<MTProto.inputSecureValue>>
  SecureValueHash: TlConstructor<ToArgs<MTProto.secureValueHash>>
  SecureValueErrorData: TlConstructor<ToArgs<MTProto.secureValueErrorData>>
  SecureValueErrorFrontSide: TlConstructor<ToArgs<MTProto.secureValueErrorFrontSide>>
  SecureValueErrorReverseSide: TlConstructor<ToArgs<MTProto.secureValueErrorReverseSide>>
  SecureValueErrorSelfie: TlConstructor<ToArgs<MTProto.secureValueErrorSelfie>>
  SecureValueErrorFile: TlConstructor<ToArgs<MTProto.secureValueErrorFile>>
  SecureValueErrorFiles: TlConstructor<ToArgs<MTProto.secureValueErrorFiles>>
  SecureValueError: TlConstructor<ToArgs<MTProto.secureValueError>>
  SecureValueErrorTranslationFile: TlConstructor<ToArgs<MTProto.secureValueErrorTranslationFile>>
  SecureValueErrorTranslationFiles: TlConstructor<ToArgs<MTProto.secureValueErrorTranslationFiles>>
  SecureCredentialsEncrypted: TlConstructor<ToArgs<MTProto.secureCredentialsEncrypted>>
  SavedPhoneContact: TlConstructor<ToArgs<MTProto.savedPhoneContact>>
  PasswordKdfAlgoUnknown: TlConstructor<ToArgs<MTProto.passwordKdfAlgoUnknown>>
  PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: TlConstructor<ToArgs<MTProto.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow>>
  SecurePasswordKdfAlgoUnknown: TlConstructor<ToArgs<MTProto.securePasswordKdfAlgoUnknown>>
  SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: TlConstructor<ToArgs<MTProto.securePasswordKdfAlgoPBKDF2HMACSHA512iter100000>>
  SecurePasswordKdfAlgoSHA512: TlConstructor<ToArgs<MTProto.securePasswordKdfAlgoSHA512>>
  SecureSecretSettings: TlConstructor<ToArgs<MTProto.secureSecretSettings>>
  InputCheckPasswordEmpty: TlConstructor<ToArgs<MTProto.inputCheckPasswordEmpty>>
  InputCheckPasswordSRP: TlConstructor<ToArgs<MTProto.inputCheckPasswordSRP>>
  SecureRequiredType: TlConstructor<ToArgs<MTProto.secureRequiredType>>
  SecureRequiredTypeOneOf: TlConstructor<ToArgs<MTProto.secureRequiredTypeOneOf>>
  InputAppEvent: TlConstructor<ToArgs<MTProto.inputAppEvent>>
  JsonObjectValue: TlConstructor<ToArgs<MTProto.jsonObjectValue>>
  JsonNull: TlConstructor<ToArgs<MTProto.jsonNull>>
  JsonBool: TlConstructor<ToArgs<MTProto.jsonBool>>
  JsonNumber: TlConstructor<ToArgs<MTProto.jsonNumber>>
  JsonString: TlConstructor<ToArgs<MTProto.jsonString>>
  JsonArray: TlConstructor<ToArgs<MTProto.jsonArray>>
  JsonObject: TlConstructor<ToArgs<MTProto.jsonObject>>
  PageTableCell: TlConstructor<ToArgs<MTProto.pageTableCell>>
  PageTableRow: TlConstructor<ToArgs<MTProto.pageTableRow>>
  PageCaption: TlConstructor<ToArgs<MTProto.pageCaption>>
  PageListItemText: TlConstructor<ToArgs<MTProto.pageListItemText>>
  PageListItemBlocks: TlConstructor<ToArgs<MTProto.pageListItemBlocks>>
  PageListOrderedItemText: TlConstructor<ToArgs<MTProto.pageListOrderedItemText>>
  PageListOrderedItemBlocks: TlConstructor<ToArgs<MTProto.pageListOrderedItemBlocks>>
  PageRelatedArticle: TlConstructor<ToArgs<MTProto.pageRelatedArticle>>
  Page: TlConstructor<ToArgs<MTProto.page>>
  PollAnswer: TlConstructor<ToArgs<MTProto.pollAnswer>>
  Poll: TlConstructor<ToArgs<MTProto.poll>>
  PollAnswerVoters: TlConstructor<ToArgs<MTProto.pollAnswerVoters>>
  PollResults: TlConstructor<ToArgs<MTProto.pollResults>>
  ChatOnlines: TlConstructor<ToArgs<MTProto.chatOnlines>>
  StatsURL: TlConstructor<ToArgs<MTProto.statsURL>>
  ChatAdminRights: TlConstructor<ToArgs<MTProto.chatAdminRights>>
  ChatBannedRights: TlConstructor<ToArgs<MTProto.chatBannedRights>>
  InputWallPaper: TlConstructor<ToArgs<MTProto.inputWallPaper>>
  InputWallPaperSlug: TlConstructor<ToArgs<MTProto.inputWallPaperSlug>>
  CodeSettings: TlConstructor<ToArgs<MTProto.codeSettings>>
  WallPaperSettings: TlConstructor<ToArgs<MTProto.wallPaperSettings>>
  AutoDownloadSettings: TlConstructor<ToArgs<MTProto.autoDownloadSettings>>
  EmojiKeyword: TlConstructor<ToArgs<MTProto.emojiKeyword>>
  EmojiKeywordDeleted: TlConstructor<ToArgs<MTProto.emojiKeywordDeleted>>
  EmojiKeywordsDifference: TlConstructor<ToArgs<MTProto.emojiKeywordsDifference>>
  EmojiURL: TlConstructor<ToArgs<MTProto.emojiURL>>
  EmojiLanguage: TlConstructor<ToArgs<MTProto.emojiLanguage>>
  FileLocationToBeDeprecated: TlConstructor<ToArgs<MTProto.fileLocationToBeDeprecated>>
  Folder: TlConstructor<ToArgs<MTProto.folder>>
  InputFolderPeer: TlConstructor<ToArgs<MTProto.inputFolderPeer>>
  FolderPeer: TlConstructor<ToArgs<MTProto.folderPeer>>
  UrlAuthResultRequest: TlConstructor<ToArgs<MTProto.urlAuthResultRequest>>
  UrlAuthResultAccepted: TlConstructor<ToArgs<MTProto.urlAuthResultAccepted>>
  UrlAuthResultDefault: TlConstructor<ToArgs<MTProto.urlAuthResultDefault>>
  ChannelLocationEmpty: TlConstructor<ToArgs<MTProto.channelLocationEmpty>>
  ChannelLocation: TlConstructor<ToArgs<MTProto.channelLocation>>
  PeerLocated: TlConstructor<ToArgs<MTProto.peerLocated>>
  RestrictionReason: TlConstructor<ToArgs<MTProto.restrictionReason>>
  InputTheme: TlConstructor<ToArgs<MTProto.inputTheme>>
  InputThemeSlug: TlConstructor<ToArgs<MTProto.inputThemeSlug>>
  ThemeDocumentNotModified: TlConstructor<ToArgs<MTProto.themeDocumentNotModified>>
  Theme: TlConstructor<ToArgs<MTProto.theme>>
  ResPQ: TlConstructor<ToArgs<MTProto.resPQ>>
  PQInnerData: TlConstructor<ToArgs<MTProto.pQInnerData>>
  PQInnerDataDc: TlConstructor<ToArgs<MTProto.pQInnerDataDc>>
  PQInnerDataTemp: TlConstructor<ToArgs<MTProto.pQInnerDataTemp>>
  PQInnerDataTempDc: TlConstructor<ToArgs<MTProto.pQInnerDataTempDc>>
  ServerDHParamsFail: TlConstructor<ToArgs<MTProto.serverDHParamsFail>>
  ServerDHParamsOk: TlConstructor<ToArgs<MTProto.serverDHParamsOk>>
  ServerDHInnerData: TlConstructor<ToArgs<MTProto.serverDHInnerData>>
  ClientDHInnerData: TlConstructor<ToArgs<MTProto.clientDHInnerData>>
  DhGenOk: TlConstructor<ToArgs<MTProto.dhGenOk>>
  DhGenRetry: TlConstructor<ToArgs<MTProto.dhGenRetry>>
  DhGenFail: TlConstructor<ToArgs<MTProto.dhGenFail>>
  DestroyAuthKeyOk: TlConstructor<ToArgs<MTProto.destroyAuthKeyOk>>
  DestroyAuthKeyNone: TlConstructor<ToArgs<MTProto.destroyAuthKeyNone>>
  DestroyAuthKeyFail: TlConstructor<ToArgs<MTProto.destroyAuthKeyFail>>
  MsgsAck: TlConstructor<ToArgs<MTProto.msgsAck>>
  BadMsgNotification: TlConstructor<ToArgs<MTProto.badMsgNotification>>
  BadServerSalt: TlConstructor<ToArgs<MTProto.badServerSalt>>
  MsgsStateReq: TlConstructor<ToArgs<MTProto.msgsStateReq>>
  MsgsStateInfo: TlConstructor<ToArgs<MTProto.msgsStateInfo>>
  MsgsAllInfo: TlConstructor<ToArgs<MTProto.msgsAllInfo>>
  MsgDetailedInfo: TlConstructor<ToArgs<MTProto.msgDetailedInfo>>
  MsgNewDetailedInfo: TlConstructor<ToArgs<MTProto.msgNewDetailedInfo>>
  MsgResendReq: TlConstructor<ToArgs<MTProto.msgResendReq>>
  RpcError: TlConstructor<ToArgs<MTProto.rpcError>>
  RpcAnswerUnknown: TlConstructor<ToArgs<MTProto.rpcAnswerUnknown>>
  RpcAnswerDroppedRunning: TlConstructor<ToArgs<MTProto.rpcAnswerDroppedRunning>>
  RpcAnswerDropped: TlConstructor<ToArgs<MTProto.rpcAnswerDropped>>
  FutureSalt: TlConstructor<ToArgs<MTProto.futureSalt>>
  FutureSalts: TlConstructor<ToArgs<MTProto.futureSalts>>
  Pong: TlConstructor<ToArgs<MTProto.pong>>
  DestroySessionOk: TlConstructor<ToArgs<MTProto.destroySessionOk>>
  DestroySessionNone: TlConstructor<ToArgs<MTProto.destroySessionNone>>
  NewSessionCreated: TlConstructor<ToArgs<MTProto.newSessionCreated>>
  HttpWait: TlConstructor<ToArgs<MTProto.httpWait>>
  IpPort: TlConstructor<ToArgs<MTProto.ipPort>>
  IpPortSecret: TlConstructor<ToArgs<MTProto.ipPortSecret>>
  AccessPointRule: TlConstructor<ToArgs<MTProto.accessPointRule>>
  TlsClientHello: TlConstructor<ToArgs<MTProto.tlsClientHello>>
  TlsBlockString: TlConstructor<ToArgs<MTProto.tlsBlockString>>
  TlsBlockRandom: TlConstructor<ToArgs<MTProto.tlsBlockRandom>>
  TlsBlockZero: TlConstructor<ToArgs<MTProto.tlsBlockZero>>
  TlsBlockDomain: TlConstructor<ToArgs<MTProto.tlsBlockDomain>>
  TlsBlockGrease: TlConstructor<ToArgs<MTProto.tlsBlockGrease>>
  TlsBlockScope: TlConstructor<ToArgs<MTProto.tlsBlockScope>>
  

  storage: {
    FileUnknown: TlConstructor<ToArgs<MTProto.storage_fileUnknown>>
    FilePartial: TlConstructor<ToArgs<MTProto.storage_filePartial>>
    FileJpeg: TlConstructor<ToArgs<MTProto.storage_fileJpeg>>
    FileGif: TlConstructor<ToArgs<MTProto.storage_fileGif>>
    FilePng: TlConstructor<ToArgs<MTProto.storage_filePng>>
    FilePdf: TlConstructor<ToArgs<MTProto.storage_filePdf>>
    FileMp3: TlConstructor<ToArgs<MTProto.storage_fileMp3>>
    FileMov: TlConstructor<ToArgs<MTProto.storage_fileMov>>
    FileMp4: TlConstructor<ToArgs<MTProto.storage_fileMp4>>
    FileWebp: TlConstructor<ToArgs<MTProto.storage_fileWebp>>
  }

  auth: {
    SentCode: TlConstructor<ToArgs<MTProto.auth_sentCode>>
    Authorization: TlConstructor<ToArgs<MTProto.auth_authorization>>
    AuthorizationSignUpRequired: TlConstructor<ToArgs<MTProto.auth_authorizationSignUpRequired>>
    ExportedAuthorization: TlConstructor<ToArgs<MTProto.auth_exportedAuthorization>>
    PasswordRecovery: TlConstructor<ToArgs<MTProto.auth_passwordRecovery>>
    CodeTypeSms: TlConstructor<ToArgs<MTProto.auth_codeTypeSms>>
    CodeTypeCall: TlConstructor<ToArgs<MTProto.auth_codeTypeCall>>
    CodeTypeFlashCall: TlConstructor<ToArgs<MTProto.auth_codeTypeFlashCall>>
    SentCodeTypeApp: TlConstructor<ToArgs<MTProto.auth_sentCodeTypeApp>>
    SentCodeTypeSms: TlConstructor<ToArgs<MTProto.auth_sentCodeTypeSms>>
    SentCodeTypeCall: TlConstructor<ToArgs<MTProto.auth_sentCodeTypeCall>>
    SentCodeTypeFlashCall: TlConstructor<ToArgs<MTProto.auth_sentCodeTypeFlashCall>>
  }

  contacts: {
    ContactsNotModified: TlConstructor<ToArgs<MTProto.contacts_contactsNotModified>>
    Contacts: TlConstructor<ToArgs<MTProto.contacts_contacts>>
    ImportedContacts: TlConstructor<ToArgs<MTProto.contacts_importedContacts>>
    Blocked: TlConstructor<ToArgs<MTProto.contacts_blocked>>
    BlockedSlice: TlConstructor<ToArgs<MTProto.contacts_blockedSlice>>
    Found: TlConstructor<ToArgs<MTProto.contacts_found>>
    ResolvedPeer: TlConstructor<ToArgs<MTProto.contacts_resolvedPeer>>
    TopPeersNotModified: TlConstructor<ToArgs<MTProto.contacts_topPeersNotModified>>
    TopPeers: TlConstructor<ToArgs<MTProto.contacts_topPeers>>
    TopPeersDisabled: TlConstructor<ToArgs<MTProto.contacts_topPeersDisabled>>
  }

  messages: {
    Dialogs: TlConstructor<ToArgs<MTProto.messages_dialogs>>
    DialogsSlice: TlConstructor<ToArgs<MTProto.messages_dialogsSlice>>
    DialogsNotModified: TlConstructor<ToArgs<MTProto.messages_dialogsNotModified>>
    Messages: TlConstructor<ToArgs<MTProto.messages_messages>>
    MessagesSlice: TlConstructor<ToArgs<MTProto.messages_messagesSlice>>
    ChannelMessages: TlConstructor<ToArgs<MTProto.messages_channelMessages>>
    MessagesNotModified: TlConstructor<ToArgs<MTProto.messages_messagesNotModified>>
    Chats: TlConstructor<ToArgs<MTProto.messages_chats>>
    ChatsSlice: TlConstructor<ToArgs<MTProto.messages_chatsSlice>>
    ChatFull: TlConstructor<ToArgs<MTProto.messages_chatFull>>
    AffectedHistory: TlConstructor<ToArgs<MTProto.messages_affectedHistory>>
    DhConfigNotModified: TlConstructor<ToArgs<MTProto.messages_dhConfigNotModified>>
    DhConfig: TlConstructor<ToArgs<MTProto.messages_dhConfig>>
    SentEncryptedMessage: TlConstructor<ToArgs<MTProto.messages_sentEncryptedMessage>>
    SentEncryptedFile: TlConstructor<ToArgs<MTProto.messages_sentEncryptedFile>>
    StickersNotModified: TlConstructor<ToArgs<MTProto.messages_stickersNotModified>>
    Stickers: TlConstructor<ToArgs<MTProto.messages_stickers>>
    AllStickersNotModified: TlConstructor<ToArgs<MTProto.messages_allStickersNotModified>>
    AllStickers: TlConstructor<ToArgs<MTProto.messages_allStickers>>
    AffectedMessages: TlConstructor<ToArgs<MTProto.messages_affectedMessages>>
    StickerSet: TlConstructor<ToArgs<MTProto.messages_stickerSet>>
    FoundGifs: TlConstructor<ToArgs<MTProto.messages_foundGifs>>
    SavedGifsNotModified: TlConstructor<ToArgs<MTProto.messages_savedGifsNotModified>>
    SavedGifs: TlConstructor<ToArgs<MTProto.messages_savedGifs>>
    BotResults: TlConstructor<ToArgs<MTProto.messages_botResults>>
    BotCallbackAnswer: TlConstructor<ToArgs<MTProto.messages_botCallbackAnswer>>
    MessageEditData: TlConstructor<ToArgs<MTProto.messages_messageEditData>>
    PeerDialogs: TlConstructor<ToArgs<MTProto.messages_peerDialogs>>
    FeaturedStickersNotModified: TlConstructor<ToArgs<MTProto.messages_featuredStickersNotModified>>
    FeaturedStickers: TlConstructor<ToArgs<MTProto.messages_featuredStickers>>
    RecentStickersNotModified: TlConstructor<ToArgs<MTProto.messages_recentStickersNotModified>>
    RecentStickers: TlConstructor<ToArgs<MTProto.messages_recentStickers>>
    ArchivedStickers: TlConstructor<ToArgs<MTProto.messages_archivedStickers>>
    StickerSetInstallResultSuccess: TlConstructor<ToArgs<MTProto.messages_stickerSetInstallResultSuccess>>
    StickerSetInstallResultArchive: TlConstructor<ToArgs<MTProto.messages_stickerSetInstallResultArchive>>
    HighScores: TlConstructor<ToArgs<MTProto.messages_highScores>>
    FavedStickersNotModified: TlConstructor<ToArgs<MTProto.messages_favedStickersNotModified>>
    FavedStickers: TlConstructor<ToArgs<MTProto.messages_favedStickers>>
    FoundStickerSetsNotModified: TlConstructor<ToArgs<MTProto.messages_foundStickerSetsNotModified>>
    FoundStickerSets: TlConstructor<ToArgs<MTProto.messages_foundStickerSets>>
    SearchCounter: TlConstructor<ToArgs<MTProto.messages_searchCounter>>
  }

  updates: {
    State: TlConstructor<ToArgs<MTProto.updates_state>>
    DifferenceEmpty: TlConstructor<ToArgs<MTProto.updates_differenceEmpty>>
    Difference: TlConstructor<ToArgs<MTProto.updates_difference>>
    DifferenceSlice: TlConstructor<ToArgs<MTProto.updates_differenceSlice>>
    DifferenceTooLong: TlConstructor<ToArgs<MTProto.updates_differenceTooLong>>
    ChannelDifferenceEmpty: TlConstructor<ToArgs<MTProto.updates_channelDifferenceEmpty>>
    ChannelDifferenceTooLong: TlConstructor<ToArgs<MTProto.updates_channelDifferenceTooLong>>
    ChannelDifference: TlConstructor<ToArgs<MTProto.updates_channelDifference>>
  }

  photos: {
    Photos: TlConstructor<ToArgs<MTProto.photos_photos>>
    PhotosSlice: TlConstructor<ToArgs<MTProto.photos_photosSlice>>
    Photo: TlConstructor<ToArgs<MTProto.photos_photo>>
  }

  upload: {
    File: TlConstructor<ToArgs<MTProto.upload_file>>
    FileCdnRedirect: TlConstructor<ToArgs<MTProto.upload_fileCdnRedirect>>
    WebFile: TlConstructor<ToArgs<MTProto.upload_webFile>>
    CdnFileReuploadNeeded: TlConstructor<ToArgs<MTProto.upload_cdnFileReuploadNeeded>>
    CdnFile: TlConstructor<ToArgs<MTProto.upload_cdnFile>>
  }

  help: {
    AppUpdate: TlConstructor<ToArgs<MTProto.help_appUpdate>>
    NoAppUpdate: TlConstructor<ToArgs<MTProto.help_noAppUpdate>>
    InviteText: TlConstructor<ToArgs<MTProto.help_inviteText>>
    Support: TlConstructor<ToArgs<MTProto.help_support>>
    TermsOfService: TlConstructor<ToArgs<MTProto.help_termsOfService>>
    RecentMeUrls: TlConstructor<ToArgs<MTProto.help_recentMeUrls>>
    ProxyDataEmpty: TlConstructor<ToArgs<MTProto.help_proxyDataEmpty>>
    ProxyDataPromo: TlConstructor<ToArgs<MTProto.help_proxyDataPromo>>
    TermsOfServiceUpdateEmpty: TlConstructor<ToArgs<MTProto.help_termsOfServiceUpdateEmpty>>
    TermsOfServiceUpdate: TlConstructor<ToArgs<MTProto.help_termsOfServiceUpdate>>
    DeepLinkInfoEmpty: TlConstructor<ToArgs<MTProto.help_deepLinkInfoEmpty>>
    DeepLinkInfo: TlConstructor<ToArgs<MTProto.help_deepLinkInfo>>
    PassportConfigNotModified: TlConstructor<ToArgs<MTProto.help_passportConfigNotModified>>
    PassportConfig: TlConstructor<ToArgs<MTProto.help_passportConfig>>
    SupportName: TlConstructor<ToArgs<MTProto.help_supportName>>
    UserInfoEmpty: TlConstructor<ToArgs<MTProto.help_userInfoEmpty>>
    UserInfo: TlConstructor<ToArgs<MTProto.help_userInfo>>
    ConfigSimple: TlConstructor<ToArgs<MTProto.help_configSimple>>
  }

  account: {
    PrivacyRules: TlConstructor<ToArgs<MTProto.account_privacyRules>>
    Authorizations: TlConstructor<ToArgs<MTProto.account_authorizations>>
    Password: TlConstructor<ToArgs<MTProto.account_password>>
    PasswordSettings: TlConstructor<ToArgs<MTProto.account_passwordSettings>>
    PasswordInputSettings: TlConstructor<ToArgs<MTProto.account_passwordInputSettings>>
    TmpPassword: TlConstructor<ToArgs<MTProto.account_tmpPassword>>
    WebAuthorizations: TlConstructor<ToArgs<MTProto.account_webAuthorizations>>
    AuthorizationForm: TlConstructor<ToArgs<MTProto.account_authorizationForm>>
    SentEmailCode: TlConstructor<ToArgs<MTProto.account_sentEmailCode>>
    Takeout: TlConstructor<ToArgs<MTProto.account_takeout>>
    WallPapersNotModified: TlConstructor<ToArgs<MTProto.account_wallPapersNotModified>>
    WallPapers: TlConstructor<ToArgs<MTProto.account_wallPapers>>
    AutoDownloadSettings: TlConstructor<ToArgs<MTProto.account_autoDownloadSettings>>
    ThemesNotModified: TlConstructor<ToArgs<MTProto.account_themesNotModified>>
    Themes: TlConstructor<ToArgs<MTProto.account_themes>>
  }

  channels: {
    ChannelParticipants: TlConstructor<ToArgs<MTProto.channels_channelParticipants>>
    ChannelParticipantsNotModified: TlConstructor<ToArgs<MTProto.channels_channelParticipantsNotModified>>
    ChannelParticipant: TlConstructor<ToArgs<MTProto.channels_channelParticipant>>
    AdminLogResults: TlConstructor<ToArgs<MTProto.channels_adminLogResults>>
  }

  payments: {
    PaymentForm: TlConstructor<ToArgs<MTProto.payments_paymentForm>>
    ValidatedRequestedInfo: TlConstructor<ToArgs<MTProto.payments_validatedRequestedInfo>>
    PaymentResult: TlConstructor<ToArgs<MTProto.payments_paymentResult>>
    PaymentVerificationNeeded: TlConstructor<ToArgs<MTProto.payments_paymentVerificationNeeded>>
    PaymentReceipt: TlConstructor<ToArgs<MTProto.payments_paymentReceipt>>
    SavedInfo: TlConstructor<ToArgs<MTProto.payments_savedInfo>>
  }

  phone: {
    PhoneCall: TlConstructor<ToArgs<MTProto.phone_phoneCall>>
  }
}

interface Requests {
  InvokeAfterMsgRequest: TlRequest<
    Partial<MTProto.invokeAfterMsgRequest>,
    MTProto.X
  >
  InvokeAfterMsgsRequest: TlRequest<
    Partial<MTProto.invokeAfterMsgsRequest>,
    MTProto.X
  >
  InitConnectionRequest: TlRequest<
    Partial<MTProto.initConnectionRequest>,
    MTProto.X
  >
  InvokeWithLayerRequest: TlRequest<
    Partial<MTProto.invokeWithLayerRequest>,
    MTProto.X
  >
  InvokeWithoutUpdatesRequest: TlRequest<
    Partial<MTProto.invokeWithoutUpdatesRequest>,
    MTProto.X
  >
  InvokeWithMessagesRangeRequest: TlRequest<
    Partial<MTProto.invokeWithMessagesRangeRequest>,
    MTProto.X
  >
  InvokeWithTakeoutRequest: TlRequest<
    Partial<MTProto.invokeWithTakeoutRequest>,
    MTProto.X
  >
  ReqPqRequest: TlRequest<
    Partial<MTProto.reqPqRequest>,
    MTProto.ResPQ
  >
  ReqPqMultiRequest: TlRequest<
    Partial<MTProto.reqPqMultiRequest>,
    MTProto.ResPQ
  >
  ReqDHParamsRequest: TlRequest<
    Partial<MTProto.reqDHParamsRequest>,
    MTProto.Server_DH_Params
  >
  SetClientDHParamsRequest: TlRequest<
    Partial<MTProto.setClientDHParamsRequest>,
    MTProto.Set_client_DH_params_answer
  >
  DestroyAuthKeyRequest: TlRequest<
    Partial<MTProto.destroyAuthKeyRequest>,
    MTProto.DestroyAuthKeyRes
  >
  RpcDropAnswerRequest: TlRequest<
    Partial<MTProto.rpcDropAnswerRequest>,
    MTProto.RpcDropAnswer
  >
  GetFutureSaltsRequest: TlRequest<
    Partial<MTProto.getFutureSaltsRequest>,
    MTProto.FutureSalts
  >
  PingRequest: TlRequest<
    Partial<MTProto.pingRequest>,
    MTProto.Pong
  >
  PingDelayDisconnectRequest: TlRequest<
    Partial<MTProto.pingDelayDisconnectRequest>,
    MTProto.Pong
  >
  DestroySessionRequest: TlRequest<
    Partial<MTProto.destroySessionRequest>,
    MTProto.DestroySessionRes
  >
  

  auth: {
    SendCodeRequest: TlRequest<
      Partial<MTProto.auth_sendCodeRequest>,
      MTProto.auth_SentCode
    >
    SignUpRequest: TlRequest<
      Partial<MTProto.auth_signUpRequest>,
      MTProto.auth_Authorization
    >
    SignInRequest: TlRequest<
      Partial<MTProto.auth_signInRequest>,
      MTProto.auth_Authorization
    >
    LogOutRequest: TlRequest<
      Partial<MTProto.auth_logOutRequest>,
      MTProto.Bool
    >
    ResetAuthorizationsRequest: TlRequest<
      Partial<MTProto.auth_resetAuthorizationsRequest>,
      MTProto.Bool
    >
    ExportAuthorizationRequest: TlRequest<
      Partial<MTProto.auth_exportAuthorizationRequest>,
      MTProto.auth_ExportedAuthorization
    >
    ImportAuthorizationRequest: TlRequest<
      Partial<MTProto.auth_importAuthorizationRequest>,
      MTProto.auth_Authorization
    >
    BindTempAuthKeyRequest: TlRequest<
      Partial<MTProto.auth_bindTempAuthKeyRequest>,
      MTProto.Bool
    >
    ImportBotAuthorizationRequest: TlRequest<
      Partial<MTProto.auth_importBotAuthorizationRequest>,
      MTProto.auth_Authorization
    >
    CheckPasswordRequest: TlRequest<
      Partial<MTProto.auth_checkPasswordRequest>,
      MTProto.auth_Authorization
    >
    RequestPasswordRecoveryRequest: TlRequest<
      Partial<MTProto.auth_requestPasswordRecoveryRequest>,
      MTProto.auth_PasswordRecovery
    >
    RecoverPasswordRequest: TlRequest<
      Partial<MTProto.auth_recoverPasswordRequest>,
      MTProto.auth_Authorization
    >
    ResendCodeRequest: TlRequest<
      Partial<MTProto.auth_resendCodeRequest>,
      MTProto.auth_SentCode
    >
    CancelCodeRequest: TlRequest<
      Partial<MTProto.auth_cancelCodeRequest>,
      MTProto.Bool
    >
    DropTempAuthKeysRequest: TlRequest<
      Partial<MTProto.auth_dropTempAuthKeysRequest>,
      MTProto.Bool
    >
  }

  account: {
    RegisterDeviceRequest: TlRequest<
      Partial<MTProto.account_registerDeviceRequest>,
      MTProto.Bool
    >
    UnregisterDeviceRequest: TlRequest<
      Partial<MTProto.account_unregisterDeviceRequest>,
      MTProto.Bool
    >
    UpdateNotifySettingsRequest: TlRequest<
      Partial<MTProto.account_updateNotifySettingsRequest>,
      MTProto.Bool
    >
    GetNotifySettingsRequest: TlRequest<
      Partial<MTProto.account_getNotifySettingsRequest>,
      MTProto.PeerNotifySettings
    >
    ResetNotifySettingsRequest: TlRequest<
      Partial<MTProto.account_resetNotifySettingsRequest>,
      MTProto.Bool
    >
    UpdateProfileRequest: TlRequest<
      Partial<MTProto.account_updateProfileRequest>,
      MTProto.User
    >
    UpdateStatusRequest: TlRequest<
      Partial<MTProto.account_updateStatusRequest>,
      MTProto.Bool
    >
    GetWallPapersRequest: TlRequest<
      Partial<MTProto.account_getWallPapersRequest>,
      MTProto.account_WallPapers
    >
    ReportPeerRequest: TlRequest<
      Partial<MTProto.account_reportPeerRequest>,
      MTProto.Bool
    >
    CheckUsernameRequest: TlRequest<
      Partial<MTProto.account_checkUsernameRequest>,
      MTProto.Bool
    >
    UpdateUsernameRequest: TlRequest<
      Partial<MTProto.account_updateUsernameRequest>,
      MTProto.User
    >
    GetPrivacyRequest: TlRequest<
      Partial<MTProto.account_getPrivacyRequest>,
      MTProto.account_PrivacyRules
    >
    SetPrivacyRequest: TlRequest<
      Partial<MTProto.account_setPrivacyRequest>,
      MTProto.account_PrivacyRules
    >
    DeleteAccountRequest: TlRequest<
      Partial<MTProto.account_deleteAccountRequest>,
      MTProto.Bool
    >
    GetAccountTTLRequest: TlRequest<
      Partial<MTProto.account_getAccountTTLRequest>,
      MTProto.AccountDaysTTL
    >
    SetAccountTTLRequest: TlRequest<
      Partial<MTProto.account_setAccountTTLRequest>,
      MTProto.Bool
    >
    SendChangePhoneCodeRequest: TlRequest<
      Partial<MTProto.account_sendChangePhoneCodeRequest>,
      MTProto.auth_SentCode
    >
    ChangePhoneRequest: TlRequest<
      Partial<MTProto.account_changePhoneRequest>,
      MTProto.User
    >
    UpdateDeviceLockedRequest: TlRequest<
      Partial<MTProto.account_updateDeviceLockedRequest>,
      MTProto.Bool
    >
    GetAuthorizationsRequest: TlRequest<
      Partial<MTProto.account_getAuthorizationsRequest>,
      MTProto.account_Authorizations
    >
    ResetAuthorizationRequest: TlRequest<
      Partial<MTProto.account_resetAuthorizationRequest>,
      MTProto.Bool
    >
    GetPasswordRequest: TlRequest<
      Partial<MTProto.account_getPasswordRequest>,
      MTProto.account_Password
    >
    GetPasswordSettingsRequest: TlRequest<
      Partial<MTProto.account_getPasswordSettingsRequest>,
      MTProto.account_PasswordSettings
    >
    UpdatePasswordSettingsRequest: TlRequest<
      Partial<MTProto.account_updatePasswordSettingsRequest>,
      MTProto.Bool
    >
    SendConfirmPhoneCodeRequest: TlRequest<
      Partial<MTProto.account_sendConfirmPhoneCodeRequest>,
      MTProto.auth_SentCode
    >
    ConfirmPhoneRequest: TlRequest<
      Partial<MTProto.account_confirmPhoneRequest>,
      MTProto.Bool
    >
    GetTmpPasswordRequest: TlRequest<
      Partial<MTProto.account_getTmpPasswordRequest>,
      MTProto.account_TmpPassword
    >
    GetWebAuthorizationsRequest: TlRequest<
      Partial<MTProto.account_getWebAuthorizationsRequest>,
      MTProto.account_WebAuthorizations
    >
    ResetWebAuthorizationRequest: TlRequest<
      Partial<MTProto.account_resetWebAuthorizationRequest>,
      MTProto.Bool
    >
    ResetWebAuthorizationsRequest: TlRequest<
      Partial<MTProto.account_resetWebAuthorizationsRequest>,
      MTProto.Bool
    >
    GetAllSecureValuesRequest: TlRequest<
      Partial<MTProto.account_getAllSecureValuesRequest>,
      MTProto.SecureValue[]
    >
    GetSecureValueRequest: TlRequest<
      Partial<MTProto.account_getSecureValueRequest>,
      MTProto.SecureValue[]
    >
    SaveSecureValueRequest: TlRequest<
      Partial<MTProto.account_saveSecureValueRequest>,
      MTProto.SecureValue
    >
    DeleteSecureValueRequest: TlRequest<
      Partial<MTProto.account_deleteSecureValueRequest>,
      MTProto.Bool
    >
    GetAuthorizationFormRequest: TlRequest<
      Partial<MTProto.account_getAuthorizationFormRequest>,
      MTProto.account_AuthorizationForm
    >
    AcceptAuthorizationRequest: TlRequest<
      Partial<MTProto.account_acceptAuthorizationRequest>,
      MTProto.Bool
    >
    SendVerifyPhoneCodeRequest: TlRequest<
      Partial<MTProto.account_sendVerifyPhoneCodeRequest>,
      MTProto.auth_SentCode
    >
    VerifyPhoneRequest: TlRequest<
      Partial<MTProto.account_verifyPhoneRequest>,
      MTProto.Bool
    >
    SendVerifyEmailCodeRequest: TlRequest<
      Partial<MTProto.account_sendVerifyEmailCodeRequest>,
      MTProto.account_SentEmailCode
    >
    VerifyEmailRequest: TlRequest<
      Partial<MTProto.account_verifyEmailRequest>,
      MTProto.Bool
    >
    InitTakeoutSessionRequest: TlRequest<
      Partial<MTProto.account_initTakeoutSessionRequest>,
      MTProto.account_Takeout
    >
    FinishTakeoutSessionRequest: TlRequest<
      Partial<MTProto.account_finishTakeoutSessionRequest>,
      MTProto.Bool
    >
    ConfirmPasswordEmailRequest: TlRequest<
      Partial<MTProto.account_confirmPasswordEmailRequest>,
      MTProto.Bool
    >
    ResendPasswordEmailRequest: TlRequest<
      Partial<MTProto.account_resendPasswordEmailRequest>,
      MTProto.Bool
    >
    CancelPasswordEmailRequest: TlRequest<
      Partial<MTProto.account_cancelPasswordEmailRequest>,
      MTProto.Bool
    >
    GetContactSignUpNotificationRequest: TlRequest<
      Partial<MTProto.account_getContactSignUpNotificationRequest>,
      MTProto.Bool
    >
    SetContactSignUpNotificationRequest: TlRequest<
      Partial<MTProto.account_setContactSignUpNotificationRequest>,
      MTProto.Bool
    >
    GetNotifyExceptionsRequest: TlRequest<
      Partial<MTProto.account_getNotifyExceptionsRequest>,
      MTProto.Updates
    >
    GetWallPaperRequest: TlRequest<
      Partial<MTProto.account_getWallPaperRequest>,
      MTProto.WallPaper
    >
    UploadWallPaperRequest: TlRequest<
      Partial<MTProto.account_uploadWallPaperRequest>,
      MTProto.WallPaper
    >
    SaveWallPaperRequest: TlRequest<
      Partial<MTProto.account_saveWallPaperRequest>,
      MTProto.Bool
    >
    InstallWallPaperRequest: TlRequest<
      Partial<MTProto.account_installWallPaperRequest>,
      MTProto.Bool
    >
    ResetWallPapersRequest: TlRequest<
      Partial<MTProto.account_resetWallPapersRequest>,
      MTProto.Bool
    >
    GetAutoDownloadSettingsRequest: TlRequest<
      Partial<MTProto.account_getAutoDownloadSettingsRequest>,
      MTProto.account_AutoDownloadSettings
    >
    SaveAutoDownloadSettingsRequest: TlRequest<
      Partial<MTProto.account_saveAutoDownloadSettingsRequest>,
      MTProto.Bool
    >
    UploadThemeRequest: TlRequest<
      Partial<MTProto.account_uploadThemeRequest>,
      MTProto.Document
    >
    CreateThemeRequest: TlRequest<
      Partial<MTProto.account_createThemeRequest>,
      MTProto.Theme
    >
    UpdateThemeRequest: TlRequest<
      Partial<MTProto.account_updateThemeRequest>,
      MTProto.Theme
    >
    SaveThemeRequest: TlRequest<
      Partial<MTProto.account_saveThemeRequest>,
      MTProto.Bool
    >
    InstallThemeRequest: TlRequest<
      Partial<MTProto.account_installThemeRequest>,
      MTProto.Bool
    >
    GetThemeRequest: TlRequest<
      Partial<MTProto.account_getThemeRequest>,
      MTProto.Theme
    >
    GetThemesRequest: TlRequest<
      Partial<MTProto.account_getThemesRequest>,
      MTProto.account_Themes
    >
  }

  users: {
    GetUsersRequest: TlRequest<
      Partial<MTProto.users_getUsersRequest>,
      MTProto.User[]
    >
    GetFullUserRequest: TlRequest<
      Partial<MTProto.users_getFullUserRequest>,
      MTProto.UserFull
    >
    SetSecureValueErrorsRequest: TlRequest<
      Partial<MTProto.users_setSecureValueErrorsRequest>,
      MTProto.Bool
    >
  }

  contacts: {
    GetContactIDsRequest: TlRequest<
      Partial<MTProto.contacts_getContactIDsRequest>,
      MTProto.int[]
    >
    GetStatusesRequest: TlRequest<
      Partial<MTProto.contacts_getStatusesRequest>,
      MTProto.ContactStatus[]
    >
    GetContactsRequest: TlRequest<
      Partial<MTProto.contacts_getContactsRequest>,
      MTProto.contacts_Contacts
    >
    ImportContactsRequest: TlRequest<
      Partial<MTProto.contacts_importContactsRequest>,
      MTProto.contacts_ImportedContacts
    >
    DeleteContactsRequest: TlRequest<
      Partial<MTProto.contacts_deleteContactsRequest>,
      MTProto.Updates
    >
    DeleteByPhonesRequest: TlRequest<
      Partial<MTProto.contacts_deleteByPhonesRequest>,
      MTProto.Bool
    >
    BlockRequest: TlRequest<
      Partial<MTProto.contacts_blockRequest>,
      MTProto.Bool
    >
    UnblockRequest: TlRequest<
      Partial<MTProto.contacts_unblockRequest>,
      MTProto.Bool
    >
    GetBlockedRequest: TlRequest<
      Partial<MTProto.contacts_getBlockedRequest>,
      MTProto.contacts_Blocked
    >
    SearchRequest: TlRequest<
      Partial<MTProto.contacts_searchRequest>,
      MTProto.contacts_Found
    >
    ResolveUsernameRequest: TlRequest<
      Partial<MTProto.contacts_resolveUsernameRequest>,
      MTProto.contacts_ResolvedPeer
    >
    GetTopPeersRequest: TlRequest<
      Partial<MTProto.contacts_getTopPeersRequest>,
      MTProto.contacts_TopPeers
    >
    ResetTopPeerRatingRequest: TlRequest<
      Partial<MTProto.contacts_resetTopPeerRatingRequest>,
      MTProto.Bool
    >
    ResetSavedRequest: TlRequest<
      Partial<MTProto.contacts_resetSavedRequest>,
      MTProto.Bool
    >
    GetSavedRequest: TlRequest<
      Partial<MTProto.contacts_getSavedRequest>,
      MTProto.SavedContact[]
    >
    ToggleTopPeersRequest: TlRequest<
      Partial<MTProto.contacts_toggleTopPeersRequest>,
      MTProto.Bool
    >
    AddContactRequest: TlRequest<
      Partial<MTProto.contacts_addContactRequest>,
      MTProto.Updates
    >
    AcceptContactRequest: TlRequest<
      Partial<MTProto.contacts_acceptContactRequest>,
      MTProto.Updates
    >
    GetLocatedRequest: TlRequest<
      Partial<MTProto.contacts_getLocatedRequest>,
      MTProto.Updates
    >
  }

  messages: {
    GetMessagesRequest: TlRequest<
      Partial<MTProto.messages_getMessagesRequest>,
      MTProto.messages_Messages
    >
    GetDialogsRequest: TlRequest<
      Partial<MTProto.messages_getDialogsRequest>,
      MTProto.messages_Dialogs
    >
    GetHistoryRequest: TlRequest<
      Partial<MTProto.messages_getHistoryRequest>,
      MTProto.messages_Messages
    >
    SearchRequest: TlRequest<
      Partial<MTProto.messages_searchRequest>,
      MTProto.messages_Messages
    >
    ReadHistoryRequest: TlRequest<
      Partial<MTProto.messages_readHistoryRequest>,
      MTProto.messages_AffectedMessages
    >
    DeleteHistoryRequest: TlRequest<
      Partial<MTProto.messages_deleteHistoryRequest>,
      MTProto.messages_AffectedHistory
    >
    DeleteMessagesRequest: TlRequest<
      Partial<MTProto.messages_deleteMessagesRequest>,
      MTProto.messages_AffectedMessages
    >
    ReceivedMessagesRequest: TlRequest<
      Partial<MTProto.messages_receivedMessagesRequest>,
      MTProto.ReceivedNotifyMessage[]
    >
    SetTypingRequest: TlRequest<
      Partial<MTProto.messages_setTypingRequest>,
      MTProto.Bool
    >
    SendMessageRequest: TlRequest<
      Partial<MTProto.messages_sendMessageRequest>,
      MTProto.Updates
    >
    SendMediaRequest: TlRequest<
      Partial<MTProto.messages_sendMediaRequest>,
      MTProto.Updates
    >
    ForwardMessagesRequest: TlRequest<
      Partial<MTProto.messages_forwardMessagesRequest>,
      MTProto.Updates
    >
    ReportSpamRequest: TlRequest<
      Partial<MTProto.messages_reportSpamRequest>,
      MTProto.Bool
    >
    GetPeerSettingsRequest: TlRequest<
      Partial<MTProto.messages_getPeerSettingsRequest>,
      MTProto.PeerSettings
    >
    ReportRequest: TlRequest<
      Partial<MTProto.messages_reportRequest>,
      MTProto.Bool
    >
    GetChatsRequest: TlRequest<
      Partial<MTProto.messages_getChatsRequest>,
      MTProto.messages_Chats
    >
    GetFullChatRequest: TlRequest<
      Partial<MTProto.messages_getFullChatRequest>,
      MTProto.messages_ChatFull
    >
    EditChatTitleRequest: TlRequest<
      Partial<MTProto.messages_editChatTitleRequest>,
      MTProto.Updates
    >
    EditChatPhotoRequest: TlRequest<
      Partial<MTProto.messages_editChatPhotoRequest>,
      MTProto.Updates
    >
    AddChatUserRequest: TlRequest<
      Partial<MTProto.messages_addChatUserRequest>,
      MTProto.Updates
    >
    DeleteChatUserRequest: TlRequest<
      Partial<MTProto.messages_deleteChatUserRequest>,
      MTProto.Updates
    >
    CreateChatRequest: TlRequest<
      Partial<MTProto.messages_createChatRequest>,
      MTProto.Updates
    >
    GetDhConfigRequest: TlRequest<
      Partial<MTProto.messages_getDhConfigRequest>,
      MTProto.messages_DhConfig
    >
    RequestEncryptionRequest: TlRequest<
      Partial<MTProto.messages_requestEncryptionRequest>,
      MTProto.EncryptedChat
    >
    AcceptEncryptionRequest: TlRequest<
      Partial<MTProto.messages_acceptEncryptionRequest>,
      MTProto.EncryptedChat
    >
    DiscardEncryptionRequest: TlRequest<
      Partial<MTProto.messages_discardEncryptionRequest>,
      MTProto.Bool
    >
    SetEncryptedTypingRequest: TlRequest<
      Partial<MTProto.messages_setEncryptedTypingRequest>,
      MTProto.Bool
    >
    ReadEncryptedHistoryRequest: TlRequest<
      Partial<MTProto.messages_readEncryptedHistoryRequest>,
      MTProto.Bool
    >
    SendEncryptedRequest: TlRequest<
      Partial<MTProto.messages_sendEncryptedRequest>,
      MTProto.messages_SentEncryptedMessage
    >
    SendEncryptedFileRequest: TlRequest<
      Partial<MTProto.messages_sendEncryptedFileRequest>,
      MTProto.messages_SentEncryptedMessage
    >
    SendEncryptedServiceRequest: TlRequest<
      Partial<MTProto.messages_sendEncryptedServiceRequest>,
      MTProto.messages_SentEncryptedMessage
    >
    ReceivedQueueRequest: TlRequest<
      Partial<MTProto.messages_receivedQueueRequest>,
      MTProto.long[]
    >
    ReportEncryptedSpamRequest: TlRequest<
      Partial<MTProto.messages_reportEncryptedSpamRequest>,
      MTProto.Bool
    >
    ReadMessageContentsRequest: TlRequest<
      Partial<MTProto.messages_readMessageContentsRequest>,
      MTProto.messages_AffectedMessages
    >
    GetStickersRequest: TlRequest<
      Partial<MTProto.messages_getStickersRequest>,
      MTProto.messages_Stickers
    >
    GetAllStickersRequest: TlRequest<
      Partial<MTProto.messages_getAllStickersRequest>,
      MTProto.messages_AllStickers
    >
    GetWebPagePreviewRequest: TlRequest<
      Partial<MTProto.messages_getWebPagePreviewRequest>,
      MTProto.MessageMedia
    >
    ExportChatInviteRequest: TlRequest<
      Partial<MTProto.messages_exportChatInviteRequest>,
      MTProto.ExportedChatInvite
    >
    CheckChatInviteRequest: TlRequest<
      Partial<MTProto.messages_checkChatInviteRequest>,
      MTProto.ChatInvite
    >
    ImportChatInviteRequest: TlRequest<
      Partial<MTProto.messages_importChatInviteRequest>,
      MTProto.Updates
    >
    GetStickerSetRequest: TlRequest<
      Partial<MTProto.messages_getStickerSetRequest>,
      MTProto.messages_StickerSet
    >
    InstallStickerSetRequest: TlRequest<
      Partial<MTProto.messages_installStickerSetRequest>,
      MTProto.messages_StickerSetInstallResult
    >
    UninstallStickerSetRequest: TlRequest<
      Partial<MTProto.messages_uninstallStickerSetRequest>,
      MTProto.Bool
    >
    StartBotRequest: TlRequest<
      Partial<MTProto.messages_startBotRequest>,
      MTProto.Updates
    >
    GetMessagesViewsRequest: TlRequest<
      Partial<MTProto.messages_getMessagesViewsRequest>,
      MTProto.int[]
    >
    EditChatAdminRequest: TlRequest<
      Partial<MTProto.messages_editChatAdminRequest>,
      MTProto.Bool
    >
    MigrateChatRequest: TlRequest<
      Partial<MTProto.messages_migrateChatRequest>,
      MTProto.Updates
    >
    SearchGlobalRequest: TlRequest<
      Partial<MTProto.messages_searchGlobalRequest>,
      MTProto.messages_Messages
    >
    ReorderStickerSetsRequest: TlRequest<
      Partial<MTProto.messages_reorderStickerSetsRequest>,
      MTProto.Bool
    >
    GetDocumentByHashRequest: TlRequest<
      Partial<MTProto.messages_getDocumentByHashRequest>,
      MTProto.Document
    >
    SearchGifsRequest: TlRequest<
      Partial<MTProto.messages_searchGifsRequest>,
      MTProto.messages_FoundGifs
    >
    GetSavedGifsRequest: TlRequest<
      Partial<MTProto.messages_getSavedGifsRequest>,
      MTProto.messages_SavedGifs
    >
    SaveGifRequest: TlRequest<
      Partial<MTProto.messages_saveGifRequest>,
      MTProto.Bool
    >
    GetInlineBotResultsRequest: TlRequest<
      Partial<MTProto.messages_getInlineBotResultsRequest>,
      MTProto.messages_BotResults
    >
    SetInlineBotResultsRequest: TlRequest<
      Partial<MTProto.messages_setInlineBotResultsRequest>,
      MTProto.Bool
    >
    SendInlineBotResultRequest: TlRequest<
      Partial<MTProto.messages_sendInlineBotResultRequest>,
      MTProto.Updates
    >
    GetMessageEditDataRequest: TlRequest<
      Partial<MTProto.messages_getMessageEditDataRequest>,
      MTProto.messages_MessageEditData
    >
    EditMessageRequest: TlRequest<
      Partial<MTProto.messages_editMessageRequest>,
      MTProto.Updates
    >
    EditInlineBotMessageRequest: TlRequest<
      Partial<MTProto.messages_editInlineBotMessageRequest>,
      MTProto.Bool
    >
    GetBotCallbackAnswerRequest: TlRequest<
      Partial<MTProto.messages_getBotCallbackAnswerRequest>,
      MTProto.messages_BotCallbackAnswer
    >
    SetBotCallbackAnswerRequest: TlRequest<
      Partial<MTProto.messages_setBotCallbackAnswerRequest>,
      MTProto.Bool
    >
    GetPeerDialogsRequest: TlRequest<
      Partial<MTProto.messages_getPeerDialogsRequest>,
      MTProto.messages_PeerDialogs
    >
    SaveDraftRequest: TlRequest<
      Partial<MTProto.messages_saveDraftRequest>,
      MTProto.Bool
    >
    GetAllDraftsRequest: TlRequest<
      Partial<MTProto.messages_getAllDraftsRequest>,
      MTProto.Updates
    >
    GetFeaturedStickersRequest: TlRequest<
      Partial<MTProto.messages_getFeaturedStickersRequest>,
      MTProto.messages_FeaturedStickers
    >
    ReadFeaturedStickersRequest: TlRequest<
      Partial<MTProto.messages_readFeaturedStickersRequest>,
      MTProto.Bool
    >
    GetRecentStickersRequest: TlRequest<
      Partial<MTProto.messages_getRecentStickersRequest>,
      MTProto.messages_RecentStickers
    >
    SaveRecentStickerRequest: TlRequest<
      Partial<MTProto.messages_saveRecentStickerRequest>,
      MTProto.Bool
    >
    ClearRecentStickersRequest: TlRequest<
      Partial<MTProto.messages_clearRecentStickersRequest>,
      MTProto.Bool
    >
    GetArchivedStickersRequest: TlRequest<
      Partial<MTProto.messages_getArchivedStickersRequest>,
      MTProto.messages_ArchivedStickers
    >
    GetMaskStickersRequest: TlRequest<
      Partial<MTProto.messages_getMaskStickersRequest>,
      MTProto.messages_AllStickers
    >
    GetAttachedStickersRequest: TlRequest<
      Partial<MTProto.messages_getAttachedStickersRequest>,
      MTProto.StickerSetCovered[]
    >
    SetGameScoreRequest: TlRequest<
      Partial<MTProto.messages_setGameScoreRequest>,
      MTProto.Updates
    >
    SetInlineGameScoreRequest: TlRequest<
      Partial<MTProto.messages_setInlineGameScoreRequest>,
      MTProto.Bool
    >
    GetGameHighScoresRequest: TlRequest<
      Partial<MTProto.messages_getGameHighScoresRequest>,
      MTProto.messages_HighScores
    >
    GetInlineGameHighScoresRequest: TlRequest<
      Partial<MTProto.messages_getInlineGameHighScoresRequest>,
      MTProto.messages_HighScores
    >
    GetCommonChatsRequest: TlRequest<
      Partial<MTProto.messages_getCommonChatsRequest>,
      MTProto.messages_Chats
    >
    GetAllChatsRequest: TlRequest<
      Partial<MTProto.messages_getAllChatsRequest>,
      MTProto.messages_Chats
    >
    GetWebPageRequest: TlRequest<
      Partial<MTProto.messages_getWebPageRequest>,
      MTProto.WebPage
    >
    ToggleDialogPinRequest: TlRequest<
      Partial<MTProto.messages_toggleDialogPinRequest>,
      MTProto.Bool
    >
    ReorderPinnedDialogsRequest: TlRequest<
      Partial<MTProto.messages_reorderPinnedDialogsRequest>,
      MTProto.Bool
    >
    GetPinnedDialogsRequest: TlRequest<
      Partial<MTProto.messages_getPinnedDialogsRequest>,
      MTProto.messages_PeerDialogs
    >
    SetBotShippingResultsRequest: TlRequest<
      Partial<MTProto.messages_setBotShippingResultsRequest>,
      MTProto.Bool
    >
    SetBotPrecheckoutResultsRequest: TlRequest<
      Partial<MTProto.messages_setBotPrecheckoutResultsRequest>,
      MTProto.Bool
    >
    UploadMediaRequest: TlRequest<
      Partial<MTProto.messages_uploadMediaRequest>,
      MTProto.MessageMedia
    >
    SendScreenshotNotificationRequest: TlRequest<
      Partial<MTProto.messages_sendScreenshotNotificationRequest>,
      MTProto.Updates
    >
    GetFavedStickersRequest: TlRequest<
      Partial<MTProto.messages_getFavedStickersRequest>,
      MTProto.messages_FavedStickers
    >
    FaveStickerRequest: TlRequest<
      Partial<MTProto.messages_faveStickerRequest>,
      MTProto.Bool
    >
    GetUnreadMentionsRequest: TlRequest<
      Partial<MTProto.messages_getUnreadMentionsRequest>,
      MTProto.messages_Messages
    >
    ReadMentionsRequest: TlRequest<
      Partial<MTProto.messages_readMentionsRequest>,
      MTProto.messages_AffectedHistory
    >
    GetRecentLocationsRequest: TlRequest<
      Partial<MTProto.messages_getRecentLocationsRequest>,
      MTProto.messages_Messages
    >
    SendMultiMediaRequest: TlRequest<
      Partial<MTProto.messages_sendMultiMediaRequest>,
      MTProto.Updates
    >
    UploadEncryptedFileRequest: TlRequest<
      Partial<MTProto.messages_uploadEncryptedFileRequest>,
      MTProto.EncryptedFile
    >
    SearchStickerSetsRequest: TlRequest<
      Partial<MTProto.messages_searchStickerSetsRequest>,
      MTProto.messages_FoundStickerSets
    >
    GetSplitRangesRequest: TlRequest<
      Partial<MTProto.messages_getSplitRangesRequest>,
      MTProto.MessageRange[]
    >
    MarkDialogUnreadRequest: TlRequest<
      Partial<MTProto.messages_markDialogUnreadRequest>,
      MTProto.Bool
    >
    GetDialogUnreadMarksRequest: TlRequest<
      Partial<MTProto.messages_getDialogUnreadMarksRequest>,
      MTProto.DialogPeer[]
    >
    ClearAllDraftsRequest: TlRequest<
      Partial<MTProto.messages_clearAllDraftsRequest>,
      MTProto.Bool
    >
    UpdatePinnedMessageRequest: TlRequest<
      Partial<MTProto.messages_updatePinnedMessageRequest>,
      MTProto.Updates
    >
    SendVoteRequest: TlRequest<
      Partial<MTProto.messages_sendVoteRequest>,
      MTProto.Updates
    >
    GetPollResultsRequest: TlRequest<
      Partial<MTProto.messages_getPollResultsRequest>,
      MTProto.Updates
    >
    GetOnlinesRequest: TlRequest<
      Partial<MTProto.messages_getOnlinesRequest>,
      MTProto.ChatOnlines
    >
    GetStatsURLRequest: TlRequest<
      Partial<MTProto.messages_getStatsURLRequest>,
      MTProto.StatsURL
    >
    EditChatAboutRequest: TlRequest<
      Partial<MTProto.messages_editChatAboutRequest>,
      MTProto.Bool
    >
    EditChatDefaultBannedRightsRequest: TlRequest<
      Partial<MTProto.messages_editChatDefaultBannedRightsRequest>,
      MTProto.Updates
    >
    GetEmojiKeywordsRequest: TlRequest<
      Partial<MTProto.messages_getEmojiKeywordsRequest>,
      MTProto.EmojiKeywordsDifference
    >
    GetEmojiKeywordsDifferenceRequest: TlRequest<
      Partial<MTProto.messages_getEmojiKeywordsDifferenceRequest>,
      MTProto.EmojiKeywordsDifference
    >
    GetEmojiKeywordsLanguagesRequest: TlRequest<
      Partial<MTProto.messages_getEmojiKeywordsLanguagesRequest>,
      MTProto.EmojiLanguage[]
    >
    GetEmojiURLRequest: TlRequest<
      Partial<MTProto.messages_getEmojiURLRequest>,
      MTProto.EmojiURL
    >
    GetSearchCountersRequest: TlRequest<
      Partial<MTProto.messages_getSearchCountersRequest>,
      MTProto.messages_SearchCounter[]
    >
    RequestUrlAuthRequest: TlRequest<
      Partial<MTProto.messages_requestUrlAuthRequest>,
      MTProto.UrlAuthResult
    >
    AcceptUrlAuthRequest: TlRequest<
      Partial<MTProto.messages_acceptUrlAuthRequest>,
      MTProto.UrlAuthResult
    >
    HidePeerSettingsBarRequest: TlRequest<
      Partial<MTProto.messages_hidePeerSettingsBarRequest>,
      MTProto.Bool
    >
    GetScheduledHistoryRequest: TlRequest<
      Partial<MTProto.messages_getScheduledHistoryRequest>,
      MTProto.messages_Messages
    >
    GetScheduledMessagesRequest: TlRequest<
      Partial<MTProto.messages_getScheduledMessagesRequest>,
      MTProto.messages_Messages
    >
    SendScheduledMessagesRequest: TlRequest<
      Partial<MTProto.messages_sendScheduledMessagesRequest>,
      MTProto.Updates
    >
    DeleteScheduledMessagesRequest: TlRequest<
      Partial<MTProto.messages_deleteScheduledMessagesRequest>,
      MTProto.Updates
    >
  }

  updates: {
    GetStateRequest: TlRequest<
      Partial<MTProto.updates_getStateRequest>,
      MTProto.updates_State
    >
    GetDifferenceRequest: TlRequest<
      Partial<MTProto.updates_getDifferenceRequest>,
      MTProto.updates_Difference
    >
    GetChannelDifferenceRequest: TlRequest<
      Partial<MTProto.updates_getChannelDifferenceRequest>,
      MTProto.updates_ChannelDifference
    >
  }

  photos: {
    UpdateProfilePhotoRequest: TlRequest<
      Partial<MTProto.photos_updateProfilePhotoRequest>,
      MTProto.UserProfilePhoto
    >
    UploadProfilePhotoRequest: TlRequest<
      Partial<MTProto.photos_uploadProfilePhotoRequest>,
      MTProto.photos_Photo
    >
    DeletePhotosRequest: TlRequest<
      Partial<MTProto.photos_deletePhotosRequest>,
      MTProto.long[]
    >
    GetUserPhotosRequest: TlRequest<
      Partial<MTProto.photos_getUserPhotosRequest>,
      MTProto.photos_Photos
    >
  }

  upload: {
    SaveFilePartRequest: TlRequest<
      Partial<MTProto.upload_saveFilePartRequest>,
      MTProto.Bool
    >
    GetFileRequest: TlRequest<
      Partial<MTProto.upload_getFileRequest>,
      MTProto.upload_File
    >
    SaveBigFilePartRequest: TlRequest<
      Partial<MTProto.upload_saveBigFilePartRequest>,
      MTProto.Bool
    >
    GetWebFileRequest: TlRequest<
      Partial<MTProto.upload_getWebFileRequest>,
      MTProto.upload_WebFile
    >
    GetCdnFileRequest: TlRequest<
      Partial<MTProto.upload_getCdnFileRequest>,
      MTProto.upload_CdnFile
    >
    ReuploadCdnFileRequest: TlRequest<
      Partial<MTProto.upload_reuploadCdnFileRequest>,
      MTProto.FileHash[]
    >
    GetCdnFileHashesRequest: TlRequest<
      Partial<MTProto.upload_getCdnFileHashesRequest>,
      MTProto.FileHash[]
    >
    GetFileHashesRequest: TlRequest<
      Partial<MTProto.upload_getFileHashesRequest>,
      MTProto.FileHash[]
    >
  }

  help: {
    GetConfigRequest: TlRequest<
      Partial<MTProto.help_getConfigRequest>,
      MTProto.Config
    >
    GetNearestDcRequest: TlRequest<
      Partial<MTProto.help_getNearestDcRequest>,
      MTProto.NearestDc
    >
    GetAppUpdateRequest: TlRequest<
      Partial<MTProto.help_getAppUpdateRequest>,
      MTProto.help_AppUpdate
    >
    GetInviteTextRequest: TlRequest<
      Partial<MTProto.help_getInviteTextRequest>,
      MTProto.help_InviteText
    >
    GetSupportRequest: TlRequest<
      Partial<MTProto.help_getSupportRequest>,
      MTProto.help_Support
    >
    GetAppChangelogRequest: TlRequest<
      Partial<MTProto.help_getAppChangelogRequest>,
      MTProto.Updates
    >
    SetBotUpdatesStatusRequest: TlRequest<
      Partial<MTProto.help_setBotUpdatesStatusRequest>,
      MTProto.Bool
    >
    GetCdnConfigRequest: TlRequest<
      Partial<MTProto.help_getCdnConfigRequest>,
      MTProto.CdnConfig
    >
    GetRecentMeUrlsRequest: TlRequest<
      Partial<MTProto.help_getRecentMeUrlsRequest>,
      MTProto.help_RecentMeUrls
    >
    GetProxyDataRequest: TlRequest<
      Partial<MTProto.help_getProxyDataRequest>,
      MTProto.help_ProxyData
    >
    GetTermsOfServiceUpdateRequest: TlRequest<
      Partial<MTProto.help_getTermsOfServiceUpdateRequest>,
      MTProto.help_TermsOfServiceUpdate
    >
    AcceptTermsOfServiceRequest: TlRequest<
      Partial<MTProto.help_acceptTermsOfServiceRequest>,
      MTProto.Bool
    >
    GetDeepLinkInfoRequest: TlRequest<
      Partial<MTProto.help_getDeepLinkInfoRequest>,
      MTProto.help_DeepLinkInfo
    >
    GetAppConfigRequest: TlRequest<
      Partial<MTProto.help_getAppConfigRequest>,
      MTProto.JSONValue
    >
    SaveAppLogRequest: TlRequest<
      Partial<MTProto.help_saveAppLogRequest>,
      MTProto.Bool
    >
    GetPassportConfigRequest: TlRequest<
      Partial<MTProto.help_getPassportConfigRequest>,
      MTProto.help_PassportConfig
    >
    GetSupportNameRequest: TlRequest<
      Partial<MTProto.help_getSupportNameRequest>,
      MTProto.help_SupportName
    >
    GetUserInfoRequest: TlRequest<
      Partial<MTProto.help_getUserInfoRequest>,
      MTProto.help_UserInfo
    >
    EditUserInfoRequest: TlRequest<
      Partial<MTProto.help_editUserInfoRequest>,
      MTProto.help_UserInfo
    >
  }

  channels: {
    ReadHistoryRequest: TlRequest<
      Partial<MTProto.channels_readHistoryRequest>,
      MTProto.Bool
    >
    DeleteMessagesRequest: TlRequest<
      Partial<MTProto.channels_deleteMessagesRequest>,
      MTProto.messages_AffectedMessages
    >
    DeleteUserHistoryRequest: TlRequest<
      Partial<MTProto.channels_deleteUserHistoryRequest>,
      MTProto.messages_AffectedHistory
    >
    ReportSpamRequest: TlRequest<
      Partial<MTProto.channels_reportSpamRequest>,
      MTProto.Bool
    >
    GetMessagesRequest: TlRequest<
      Partial<MTProto.channels_getMessagesRequest>,
      MTProto.messages_Messages
    >
    GetParticipantsRequest: TlRequest<
      Partial<MTProto.channels_getParticipantsRequest>,
      MTProto.channels_ChannelParticipants
    >
    GetParticipantRequest: TlRequest<
      Partial<MTProto.channels_getParticipantRequest>,
      MTProto.channels_ChannelParticipant
    >
    GetChannelsRequest: TlRequest<
      Partial<MTProto.channels_getChannelsRequest>,
      MTProto.messages_Chats
    >
    GetFullChannelRequest: TlRequest<
      Partial<MTProto.channels_getFullChannelRequest>,
      MTProto.messages_ChatFull
    >
    CreateChannelRequest: TlRequest<
      Partial<MTProto.channels_createChannelRequest>,
      MTProto.Updates
    >
    EditAdminRequest: TlRequest<
      Partial<MTProto.channels_editAdminRequest>,
      MTProto.Updates
    >
    EditTitleRequest: TlRequest<
      Partial<MTProto.channels_editTitleRequest>,
      MTProto.Updates
    >
    EditPhotoRequest: TlRequest<
      Partial<MTProto.channels_editPhotoRequest>,
      MTProto.Updates
    >
    CheckUsernameRequest: TlRequest<
      Partial<MTProto.channels_checkUsernameRequest>,
      MTProto.Bool
    >
    UpdateUsernameRequest: TlRequest<
      Partial<MTProto.channels_updateUsernameRequest>,
      MTProto.Bool
    >
    JoinChannelRequest: TlRequest<
      Partial<MTProto.channels_joinChannelRequest>,
      MTProto.Updates
    >
    LeaveChannelRequest: TlRequest<
      Partial<MTProto.channels_leaveChannelRequest>,
      MTProto.Updates
    >
    InviteToChannelRequest: TlRequest<
      Partial<MTProto.channels_inviteToChannelRequest>,
      MTProto.Updates
    >
    DeleteChannelRequest: TlRequest<
      Partial<MTProto.channels_deleteChannelRequest>,
      MTProto.Updates
    >
    ExportMessageLinkRequest: TlRequest<
      Partial<MTProto.channels_exportMessageLinkRequest>,
      MTProto.ExportedMessageLink
    >
    ToggleSignaturesRequest: TlRequest<
      Partial<MTProto.channels_toggleSignaturesRequest>,
      MTProto.Updates
    >
    GetAdminedPublicChannelsRequest: TlRequest<
      Partial<MTProto.channels_getAdminedPublicChannelsRequest>,
      MTProto.messages_Chats
    >
    EditBannedRequest: TlRequest<
      Partial<MTProto.channels_editBannedRequest>,
      MTProto.Updates
    >
    GetAdminLogRequest: TlRequest<
      Partial<MTProto.channels_getAdminLogRequest>,
      MTProto.channels_AdminLogResults
    >
    SetStickersRequest: TlRequest<
      Partial<MTProto.channels_setStickersRequest>,
      MTProto.Bool
    >
    ReadMessageContentsRequest: TlRequest<
      Partial<MTProto.channels_readMessageContentsRequest>,
      MTProto.Bool
    >
    DeleteHistoryRequest: TlRequest<
      Partial<MTProto.channels_deleteHistoryRequest>,
      MTProto.Bool
    >
    TogglePreHistoryHiddenRequest: TlRequest<
      Partial<MTProto.channels_togglePreHistoryHiddenRequest>,
      MTProto.Updates
    >
    GetLeftChannelsRequest: TlRequest<
      Partial<MTProto.channels_getLeftChannelsRequest>,
      MTProto.messages_Chats
    >
    GetGroupsForDiscussionRequest: TlRequest<
      Partial<MTProto.channels_getGroupsForDiscussionRequest>,
      MTProto.messages_Chats
    >
    SetDiscussionGroupRequest: TlRequest<
      Partial<MTProto.channels_setDiscussionGroupRequest>,
      MTProto.Bool
    >
    EditCreatorRequest: TlRequest<
      Partial<MTProto.channels_editCreatorRequest>,
      MTProto.Updates
    >
    EditLocationRequest: TlRequest<
      Partial<MTProto.channels_editLocationRequest>,
      MTProto.Bool
    >
    ToggleSlowModeRequest: TlRequest<
      Partial<MTProto.channels_toggleSlowModeRequest>,
      MTProto.Updates
    >
  }

  bots: {
    SendCustomRequestRequest: TlRequest<
      Partial<MTProto.bots_sendCustomRequestRequest>,
      MTProto.DataJSON
    >
    AnswerWebhookJSONQueryRequest: TlRequest<
      Partial<MTProto.bots_answerWebhookJSONQueryRequest>,
      MTProto.Bool
    >
  }

  payments: {
    GetPaymentFormRequest: TlRequest<
      Partial<MTProto.payments_getPaymentFormRequest>,
      MTProto.payments_PaymentForm
    >
    GetPaymentReceiptRequest: TlRequest<
      Partial<MTProto.payments_getPaymentReceiptRequest>,
      MTProto.payments_PaymentReceipt
    >
    ValidateRequestedInfoRequest: TlRequest<
      Partial<MTProto.payments_validateRequestedInfoRequest>,
      MTProto.payments_ValidatedRequestedInfo
    >
    SendPaymentFormRequest: TlRequest<
      Partial<MTProto.payments_sendPaymentFormRequest>,
      MTProto.payments_PaymentResult
    >
    GetSavedInfoRequest: TlRequest<
      Partial<MTProto.payments_getSavedInfoRequest>,
      MTProto.payments_SavedInfo
    >
    ClearSavedInfoRequest: TlRequest<
      Partial<MTProto.payments_clearSavedInfoRequest>,
      MTProto.Bool
    >
  }

  stickers: {
    CreateStickerSetRequest: TlRequest<
      Partial<MTProto.stickers_createStickerSetRequest>,
      MTProto.messages_StickerSet
    >
    RemoveStickerFromSetRequest: TlRequest<
      Partial<MTProto.stickers_removeStickerFromSetRequest>,
      MTProto.messages_StickerSet
    >
    ChangeStickerPositionRequest: TlRequest<
      Partial<MTProto.stickers_changeStickerPositionRequest>,
      MTProto.messages_StickerSet
    >
    AddStickerToSetRequest: TlRequest<
      Partial<MTProto.stickers_addStickerToSetRequest>,
      MTProto.messages_StickerSet
    >
  }

  phone: {
    GetCallConfigRequest: TlRequest<
      Partial<MTProto.phone_getCallConfigRequest>,
      MTProto.DataJSON
    >
    RequestCallRequest: TlRequest<
      Partial<MTProto.phone_requestCallRequest>,
      MTProto.phone_PhoneCall
    >
    AcceptCallRequest: TlRequest<
      Partial<MTProto.phone_acceptCallRequest>,
      MTProto.phone_PhoneCall
    >
    ConfirmCallRequest: TlRequest<
      Partial<MTProto.phone_confirmCallRequest>,
      MTProto.phone_PhoneCall
    >
    ReceivedCallRequest: TlRequest<
      Partial<MTProto.phone_receivedCallRequest>,
      MTProto.Bool
    >
    DiscardCallRequest: TlRequest<
      Partial<MTProto.phone_discardCallRequest>,
      MTProto.Updates
    >
    SetCallRatingRequest: TlRequest<
      Partial<MTProto.phone_setCallRatingRequest>,
      MTProto.Updates
    >
    SaveCallDebugRequest: TlRequest<
      Partial<MTProto.phone_saveCallDebugRequest>,
      MTProto.Bool
    >
  }

  langpack: {
    GetLangPackRequest: TlRequest<
      Partial<MTProto.langpack_getLangPackRequest>,
      MTProto.LangPackDifference
    >
    GetStringsRequest: TlRequest<
      Partial<MTProto.langpack_getStringsRequest>,
      MTProto.LangPackString[]
    >
    GetDifferenceRequest: TlRequest<
      Partial<MTProto.langpack_getDifferenceRequest>,
      MTProto.LangPackDifference
    >
    GetLanguagesRequest: TlRequest<
      Partial<MTProto.langpack_getLanguagesRequest>,
      MTProto.LangPackLanguage[]
    >
    GetLanguageRequest: TlRequest<
      Partial<MTProto.langpack_getLanguageRequest>,
      MTProto.LangPackLanguage
    >
  }

  folders: {
    EditPeerFoldersRequest: TlRequest<
      Partial<MTProto.folders_editPeerFoldersRequest>,
      MTProto.Updates
    >
    DeleteFolderRequest: TlRequest<
      Partial<MTProto.folders_deleteFolderRequest>,
      MTProto.Updates
    >
  }
}

type ValuesOf<T> = T[keyof T];

export namespace GramJsApi {
  type AnyRequest = Requests['InvokeAfterMsgRequest'] | Requests['InvokeAfterMsgsRequest'] | Requests['InitConnectionRequest'] | Requests['InvokeWithLayerRequest'] | Requests['InvokeWithoutUpdatesRequest'] | Requests['InvokeWithMessagesRangeRequest'] | Requests['InvokeWithTakeoutRequest'] | Requests['ReqPqRequest'] | Requests['ReqPqMultiRequest'] | Requests['ReqDHParamsRequest'] | Requests['SetClientDHParamsRequest'] | Requests['DestroyAuthKeyRequest'] | Requests['RpcDropAnswerRequest'] | Requests['GetFutureSaltsRequest'] | Requests['PingRequest'] | Requests['PingDelayDisconnectRequest'] | Requests['DestroySessionRequest'] |
    ValuesOf<Requests['auth']> | ValuesOf<Requests['account']> | ValuesOf<Requests['users']> | ValuesOf<Requests['contacts']> | ValuesOf<Requests['messages']> | ValuesOf<Requests['updates']> | ValuesOf<Requests['photos']> | ValuesOf<Requests['upload']> | ValuesOf<Requests['help']> | ValuesOf<Requests['channels']> | ValuesOf<Requests['bots']> | ValuesOf<Requests['payments']> | ValuesOf<Requests['stickers']> | ValuesOf<Requests['phone']> | ValuesOf<Requests['langpack']> | ValuesOf<Requests['folders']>;
}

declare const gramJsApi: {
  constructors: Constructors;
  requests: Requests;
};

export default gramJsApi;
